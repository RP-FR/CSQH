CleRegle;NomRegle;Severite;NomLangage;TypeRegle;Etiquette
objc:SingleGotoOrBreakPerIteration;Loops should not have more than one break or goto statement;MAJOR;Objective-C;CODE_SMELL;{based-on-misra,confusing}
objc:S867;Boolean operators should have boolean operands;MAJOR;Objective-C;BUG;{based-on-misra,cert}
objc:S5293;Format strings should comply with ISO standards;MINOR;Objective-C;CODE_SMELL;{convention}
objc:S1144;Unused functions and methods should be removed;MAJOR;Objective-C;CODE_SMELL;{based-on-misra,unused}
objc:NarrowAndWideStringConcat;Narrow and wide string literals should not be concatenated;MAJOR;Objective-C;BUG;{based-on-misra,cert}
objc:S873;enum values should not be used as operands to built-in operators other than [ ], =, ==, !=, unary &, and the relational operat;MAJOR;Objective-C;CODE_SMELL;{based-on-misra,suspicious}
objc:S872;bool expressions should not be used as operands to built-in operators other than =, &&, ||, !, ==, !=, unary &, and the condit;MAJOR;Objective-C;CODE_SMELL;{based-on-misra,suspicious}
objc:S995;Pointer and reference parameters should be const if the corresponding object is not modified;MINOR;Objective-C;CODE_SMELL;{bad-practice,based-on-misra}
objc:S874;Bitwise operators should not be applied to signed operands;MAJOR;Objective-C;BUG;{bad-practice,based-on-misra,cert,cwe,lock-in}
objc:S876;Unary minus should not be applied to an unsigned expression;MAJOR;Objective-C;BUG;{based-on-misra}
objc:S878;Comma operator should not be used;MAJOR;Objective-C;CODE_SMELL;{based-on-misra}
objc:S2324;Flexible array members should not be declared;CRITICAL;Objective-C;CODE_SMELL;{based-on-misra,suspicious}
objc:S3776;Cognitive Complexity of functions should not be too high;CRITICAL;Objective-C;CODE_SMELL;{brain-overload}
objc:S2323;Line-splicing should not be used in // comments;CRITICAL;Objective-C;BUG;{based-on-misra}
objc:S5278;Size argument of memory functions should be consistent;MAJOR;Objective-C;CODE_SMELL;{suspicious}
objc:S5279;Unevaluated operands should not have side effects;MAJOR;Objective-C;CODE_SMELL;{based-on-misra,suspicious}
objc:S1117;Local variables should not shadow class fields;MAJOR;Objective-C;CODE_SMELL;{based-on-misra,cert,pitfall,suspicious}
objc:S1116;Empty statements should be removed;MINOR;Objective-C;CODE_SMELL;{based-on-misra,cert,unused}
objc:LogicalExpressionOperands;Operands of && and || should be primary (C) or postfix (C++) expressions;MAJOR;Objective-C;CODE_SMELL;{based-on-misra}
objc:S969;Only standard forms of the defined directive should be used;BLOCKER;Objective-C;CODE_SMELL;{bad-practice,based-on-misra}
objc:S960;Function-like macros should not be used;CRITICAL;Objective-C;CODE_SMELL;{bad-practice,based-on-misra,cert,preprocessor}
objc:S961;Function-like macros should not be invoked without all of their arguments;BLOCKER;Objective-C;BUG;{based-on-misra,cwe,preprocessor}
objc:S5273;Appropriate size arguments should be passed to strncat and strlcpy;MAJOR;Objective-C;CODE_SMELL;{suspicious}
objc:S5270;User-defined types should not be passed as variadic arguments;MAJOR;Objective-C;BUG;{suspicious}
objc:S967;There shall be at most one occurrence of the # or ## operators in a single macro definition;MAJOR;Objective-C;BUG;{misra-c++2008,misra-c2004,misra-c2012,preprocessor}
objc:S5271;Functions which do not return should be declared as noreturn;MINOR;Objective-C;CODE_SMELL;{confusing}
objc:S966;Macros used in preprocessor directives should be defined before use;MAJOR;Objective-C;BUG;{based-on-misra,preprocessor}
objc:S2335;Octal and hexadecimal escape sequences should be terminated;CRITICAL;Objective-C;CODE_SMELL;{based-on-misra,pitfall}
objc:S1244;Floating point numbers should not be tested for equality;MAJOR;Objective-C;BUG;{based-on-misra}
objc:S860;Objects with integer type should not be converted to objects with pointer type;MAJOR;Objective-C;BUG;{based-on-misra,cert}
objc:S2216;Single-bit named bit fields should not be of a signed type;MAJOR;Objective-C;BUG;{based-on-misra}
objc:InvalidEscapeSequence;Only escape sequences defined in the ISO C standard should be used;MAJOR;Objective-C;BUG;{based-on-misra}
objc:OctalConstantAndSequence;Octal values should not be used;BLOCKER;Objective-C;CODE_SMELL;{based-on-misra,cert,pitfall}
objc:S1481;Unused local variables should be removed;MINOR;Objective-C;CODE_SMELL;{unused}
objc:S851;The value of a complex expression should only be cast to a type that is narrower and of the same signedness as the underlying ty;MAJOR;Objective-C;CODE_SMELL;{based-on-misra}
objc:S853;Results of ~ and << operations on operands of underlying types unsigned char and unsigned short should immediately be cast to th;MAJOR;Objective-C;BUG;{based-on-misra,misra}
objc:S5281;Argument of printf should be a format string;CRITICAL;Objective-C;CODE_SMELL;{bad-practice}
objc:S855;Function pointers should not be converted to any other type;MAJOR;Objective-C;BUG;{based-on-misra}
objc:S854;Constants of unsigned type should have a U suffix;CRITICAL;Objective-C;CODE_SMELL;{based-on-misra,pitfall}
objc:S5280;mktemp family of functions templates should have at least six trailing Xs;CRITICAL;Objective-C;CODE_SMELL;{suspicious}
objc:S5283;Size of variable length arrays should be positive;CRITICAL;Objective-C;CODE_SMELL;{suspicious}
objc:S978;Reserved identifiers and functions in the standard library should not be defined or declared;BLOCKER;Objective-C;CODE_SMELL;{bad-practice,based-on-misra,cert}
objc:S977;Lines starting with # should contain valid preprocessing directives;MAJOR;Objective-C;BUG;{based-on-misra,preprocessor}
objc:S856;Object pointers should only be converted to other object pointers, integral types or void pointers;MAJOR;Objective-C;BUG;{based-on-misra}
objc:GotoLabelInNestedBlock;goto statements should not be used to jump into blocks;BLOCKER;Objective-C;CODE_SMELL;{based-on-misra,brain-overload,pitfall}
objc:S946;The address of an automatic object should not be assigned to another object that may persist after the first object has ceased t;BLOCKER;Objective-C;BUG;{based-on-misra,cert}
objc:S1172;Unused function parameters should be removed;MAJOR;Objective-C;CODE_SMELL;{based-on-misra,cert,unused}
objc:AssignmentInSubExpression;Assignments should not be made from within sub-expressions;MAJOR;Objective-C;CODE_SMELL;{based-on-misra,cert,cwe,suspicious}
objc:S820;Object and function types should be explicitly stated in their declarations and definitions;CRITICAL;Objective-C;CODE_SMELL;{based-on-misra,cert}
objc:S943;Object declarations should contain no more than 2 levels of pointer indirection;CRITICAL;Objective-C;CODE_SMELL;{based-on-misra,brain-overload,pitfall}
objc:GlobalMainFunction;The name main should not be used for any function other than the global main function;BLOCKER;Objective-C;CODE_SMELL;{misra-c++2008,pitfall}
objc:S824;Functions should not be declared at block scope;MAJOR;Objective-C;CODE_SMELL;{misra-c++2008,misra-c2004}
objc:S1065;Unused labels should be removed;MAJOR;Objective-C;CODE_SMELL;{based-on-misra,cert,unused}
objc:S2275;Printf-style format strings should not lead to unexpected behavior at runtime;BLOCKER;Objective-C;BUG;{cert,pitfall}
objc:S5308;Return value of setuid family of functions should always be checked;CRITICAL;Objective-C;CODE_SMELL;{}
objc:LiteralSuffix;Literal suffixes shall be upper case;MINOR;Objective-C;CODE_SMELL;{based-on-misra,cert,convention,pitfall}
objc:PPDefineOrUndefFromBlock;Macros should not be #define'd or #undef'd within a block;CRITICAL;Objective-C;CODE_SMELL;{based-on-misra,pitfall}
objc:S950;Structure and union types should be complete at the end of a translation unit;MINOR;Objective-C;CODE_SMELL;{based-on-misra}
objc:S2393;The <stdlib.h> functions bsearch and qsort should not be used;MAJOR;Objective-C;BUG;{based-on-misra,unpredictable}
objc:S834;Array declarations should include an explicit size specification;MAJOR;Objective-C;CODE_SMELL;{based-on-misra,cert}
objc:S835;Braces should be used to indicate and match the structure in the non-zero initialization of arrays and structures;MAJOR;Objective-C;CODE_SMELL;{based-on-misra}
objc:S3457;Printf-style format strings should be used correctly;MAJOR;Objective-C;CODE_SMELL;{cert,confusing}
objc:S1036;Control should not be transferred into a complex logic block using a goto or a switch statement;BLOCKER;Objective-C;CODE_SMELL;{based-on-misra,cert,lock-in,pitfall}
objc:S2486;Exceptions should not be ignored;CRITICAL;Objective-C;VULNERABILITY;{cwe,error-handling,owasp-a10,suspicious}
objc:S1836;restrict should not be used;CRITICAL;Objective-C;CODE_SMELL;{based-on-misra,cert}
objc:DigraphUsage;Digraphs should not be used;BLOCKER;Objective-C;CODE_SMELL;{based-on-misra,obsolete}
objc:S1831;static should not be used for the size of an array parameter;CRITICAL;Objective-C;CODE_SMELL;{based-on-misra,pitfall}
objc:PPIncludeTime;<time.h> should not be used;CRITICAL;Objective-C;CODE_SMELL;{based-on-misra,lock-in}
objc:S925;Recursion should not be used;CRITICAL;Objective-C;CODE_SMELL;{bad-practice,based-on-misra,pitfall}
objc:CommentedCode;Sections of code should not be commented out;MAJOR;Objective-C;CODE_SMELL;{based-on-misra,unused}
objc:S926;Parameters in a function prototype should be named;MAJOR;Objective-C;CODE_SMELL;{based-on-misra}
objc:S929;Functions without parameters should be declared with parameter type void;CRITICAL;Objective-C;CODE_SMELL;{based-on-misra,cert,pitfall}
objc:S127;for loop stop conditions should be invariant;MAJOR;Objective-C;CODE_SMELL;{based-on-misra,pitfall}
objc:S920;Switch statement conditions should not have essentially boolean type;MINOR;Objective-C;CODE_SMELL;{misra-c++2008,misra-c2004,misra-c2012}
objc:FunctionEllipsis;Functions should not be defined with a variable number of arguments;CRITICAL;Objective-C;CODE_SMELL;{cert,misra-c++2008,misra-c2004,pitfall}
objc:S802;typedef names should be unique identifiers;MAJOR;Objective-C;CODE_SMELL;{based-on-misra,suspicious}
objc:S936;Function names should be used either as a call with a parameter list or with the & operator;CRITICAL;Objective-C;CODE_SMELL;{based-on-misra,suspicious}
objc:S814;Bit fields should be declared with appropriate types;MAJOR;Objective-C;CODE_SMELL;{based-on-misra,cert,lock-in}
objc:S935;Function exit paths should have appropriate return values;CRITICAL;Objective-C;BUG;{based-on-misra,cert,cwe}
objc:S819;Functions should be declared explicitly;CRITICAL;Objective-C;CODE_SMELL;{bad-practice,based-on-misra,cert}
objc:S930;The number of arguments passed to a function should match the number of parameters;MAJOR;Objective-C;BUG;{based-on-misra,cert,cwe}
objc:S810;Appropriate char types should be used for character and integer values;MINOR;Objective-C;CODE_SMELL;{based-on-misra,cert,confusing}
objc:S813;typedefs that indicate size and signedness should be used in place of the basic types;MINOR;Objective-C;CODE_SMELL;{based-on-misra}
objc:EllipsisHandlerNotLast;Condition-specific catch handlers should not be used after the ellipsis (catch-all) handler;MAJOR;Objective-C;BUG;{based-on-misra,unused}
objc:IdentifierLongerThan31;Identifiers should not be longer than 31 characters;MAJOR;Objective-C;CODE_SMELL;{based-on-misra,cert}
objc:S905;Non-empty statements should change control flow or have at least one side-effect;MAJOR;Objective-C;BUG;{based-on-misra,cwe,unused}
objc:S1301;switch statements should have at least 3 case clauses;MINOR;Objective-C;CODE_SMELL;{bad-practice,based-on-misra}
objc:S2753;Values of different enum types should not be compared;MAJOR;Objective-C;BUG;{}
objc:SideEffectInRightHandSideOfLogical;The right-hand operands of && and || should not contain side effects;BLOCKER;Objective-C;CODE_SMELL;{based-on-misra,cert}
objc:S121;Control structures should use curly braces;CRITICAL;Objective-C;CODE_SMELL;{based-on-misra,cert,pitfall}
objc:PPUndefUsage;#undef should not be used;CRITICAL;Objective-C;CODE_SMELL;{based-on-misra,brain-overload}
objc:SwitchLabelPlacement;Switch labels should not be nested inside non-switch blocks;BLOCKER;Objective-C;CODE_SMELL;{confusing,misra-c++2008,misra-c2004,misra-c2012}
objc:EnumPartialInitialization;enum members other than the first one should not be explicitly initialized unless all members are explicitly initialized;MAJOR;Objective-C;CODE_SMELL;{based-on-misra}
objc:S2193;for loop counters should not have essentially floating type;MINOR;Objective-C;BUG;{based-on-misra,cert}
objc:S2190;Recursion should not be infinite;BLOCKER;Objective-C;BUG;{suspicious}
objc:SingleDeclarationPerStatement;Init-declarator-lists and member-declarator-lists should consist of single init-declarators and member-declarators respectively;MINOR;Objective-C;CODE_SMELL;{based-on-misra,cert,convention}
objc:S1763;Jump statements should not be followed by dead code;MAJOR;Objective-C;BUG;{based-on-misra,cert,cwe,unused}
objc:PPStringifyAndPastingUsage;Preprocessor operators # and ## should not be used;MINOR;Objective-C;CODE_SMELL;{based-on-misra,lock-in}
objc:S1761;Pre-defined macros should not be defined, redefined or undefined;CRITICAL;Objective-C;CODE_SMELL;{based-on-misra,preprocessor,suspicious}
objc:S3949;Integral operations should not overflow;MAJOR;Objective-C;BUG;{based-on-misra,cert,misra,misra-c++2008,misra-c2004,misra-c2012,overflow}
objc:S1767;Pointers should not be cast to integral types;CRITICAL;Objective-C;BUG;{based-on-misra,cert}
objc:PPIncludeStdio;<stdio.h> should not be used in production code;CRITICAL;Objective-C;BUG;{based-on-misra,lock-in}
objc:S1081;Insecure functions strcpy, strcat and sprintf should not be used;CRITICAL;Objective-C;VULNERABILITY;{cert,cwe,owasp-a9,sans-top25-risky}
objc:S5259;Header guards should be followed by according #define macro;CRITICAL;Objective-C;CODE_SMELL;{unpredictable}
objc:S1219;switch statements should not contain non-case labels;BLOCKER;Objective-C;CODE_SMELL;{based-on-misra,suspicious}
objc:S793;All uses of the #pragma directive should be documented;MAJOR;Objective-C;CODE_SMELL;{based-on-misra,cert}
objc:S784;Assembly language should be encapsulated and isolated;MAJOR;Objective-C;CODE_SMELL;{misra-c++2008,misra-c2004}
objc:C99CommentUsage;Source code should only use /* ... */ style comments;MINOR;Objective-C;CODE_SMELL;{based-on-misra,convention}
objc:ObsoletePosixFunction;Obsolete POSIX functions should not be used;MAJOR;Objective-C;CODE_SMELL;{cert,obsolete}
objc:S1103;/* and // should not be used within comments;MINOR;Objective-C;CODE_SMELL;{based-on-misra,cert,confusing}
objc:S5267;Functions with noreturn attribute should not return;BLOCKER;Objective-C;BUG;{confusing}
objc:S5266;Keywords shall not be used as macros identifiers;MAJOR;Objective-C;CODE_SMELL;{based-on-misra,pitfall,unpredictable}
objc:PPBadIncludeForm;#include directives should be followed by either <filename> or filename sequences;MAJOR;Objective-C;BUG;{based-on-misra}
objc:S1226;Function parameters should not be reassigned;MINOR;Objective-C;CODE_SMELL;{based-on-misra}
objc:Union;Unions should not be used;CRITICAL;Objective-C;CODE_SMELL;{based-on-misra}
objc:S5263;Logical operators should not be confused with bitwise operators;CRITICAL;Objective-C;CODE_SMELL;{pitfall}
objc:S5262;Dereferenced null pointers should not be bound to references;MAJOR;Objective-C;CODE_SMELL;{unpredictable}
objc:S5261;else statements should be clearly matched with an if;MAJOR;Objective-C;CODE_SMELL;{confusing}
objc:ContinueUsage;continue should not be used;MINOR;Objective-C;CODE_SMELL;{bad-practice,based-on-misra}
objc:PPIncludeNonStandardCharacters;Non-standard characters should not occur in header file names in #include directives;MAJOR;Objective-C;BUG;{based-on-misra}
objc:FunctionSinglePointOfExit;A function should have a single point of exit at the end of the function;MINOR;Objective-C;CODE_SMELL;{based-on-misra,brain-overload}
objc:SwitchWithoutDefault;switch statements should have default clauses;CRITICAL;Objective-C;CODE_SMELL;{based-on-misra,cert,cwe}
objc:PPIncludeNotAtTop;#include directives in a file should only be preceded by other preprocessor directives or comments;MAJOR;Objective-C;CODE_SMELL;{confusing,misra-c++2008,misra-c2004,misra-c2012}
objc:ElseIfWithoutElse;if ... else if constructs should end with else clauses;CRITICAL;Objective-C;CODE_SMELL;{based-on-misra,cert}
objc:NonEmptyCaseWithoutBreak;Switch cases should end with an unconditional break statement;BLOCKER;Objective-C;CODE_SMELL;{based-on-misra,cert,cwe,suspicious}
objc:S883;Tests of non-Boolean values against zero should be explicit;MINOR;Objective-C;CODE_SMELL;{based-on-misra}
objc:S886;The three expressions of a for statement should only be concerned with loop control;MAJOR;Objective-C;BUG;{based-on-misra}
objc:BackJumpWithGoto;goto should jump to labels declared later in the same function;BLOCKER;Objective-C;CODE_SMELL;{based-on-misra,pitfall}
objc:IncAndDecMixedWithOtherOperators;Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression;MAJOR;Objective-C;CODE_SMELL;{based-on-misra,cert}
objc:S897;Unused type declarations should be removed;MAJOR;Objective-C;CODE_SMELL;{based-on-misra,unused}
abap:S4721;Executing OS commands is security-sensitive;CRITICAL;ABAP;VULNERABILITY;{cwe,owasp-a1,sans-top25-insecure}
abap:S4524;WHEN OTHERS clauses should be last;CRITICAL;ABAP;CODE_SMELL;{based-on-misra}
abap:S2068;Credentials should not be hard-coded;BLOCKER;ABAP;VULNERABILITY;{cert,cwe,owasp-a2,sans-top25-porous}
abap:S1493;SQL SELECT statements should not contain dynamic clauses;BLOCKER;ABAP;VULNERABILITY;{cwe,owasp-a1,sans-top25-insecure,sql}
abap:S108;Nested blocks of code should not be left empty;MAJOR;ABAP;CODE_SMELL;{suspicious}
abap:S1301;CASE statements should have at least 3 WHEN clauses;MINOR;ABAP;CODE_SMELL;{bad-practice,based-on-misra}
abap:S1313;Using hardcoded IP addresses is security-sensitive;MINOR;ABAP;VULNERABILITY;{cert,owasp-a3}
abap:S3776;Cognitive Complexity of functions should not be too high;CRITICAL;ABAP;CODE_SMELL;{brain-overload}
abap:S5117;SY-SUBRC should be checked after an AUTHORITY-CHECK statement;BLOCKER;ABAP;VULNERABILITY;{}
abap:S1511;SY-SUBRC should be tested after each function call with exception handling;CRITICAL;ABAP;CODE_SMELL;{error-handling}
abap:S5118;Standard tables should be searched using BINARY SEARCH;MAJOR;ABAP;CODE_SMELL;{}
abap:S131;CASE statements should have WHEN OTHERS clauses;CRITICAL;ABAP;CODE_SMELL;{based-on-misra,cert,cwe}
abap:S5115;Authorization checks should not rely on hardcoded user properties;CRITICAL;ABAP;VULNERABILITY;{}
abap:S1238;Subroutine parameters should be passed by reference rather than by value;MAJOR;ABAP;CODE_SMELL;{performance}
abap:S125;Sections of code should not be commented out;MAJOR;ABAP;CODE_SMELL;{based-on-misra,unused}
abap:S126;IF ... ELSEIF constructs should end with ELSE clauses;CRITICAL;ABAP;CODE_SMELL;{based-on-misra,cert}
abap:S1486;BREAK-POINT statement should not be used in production;MINOR;ABAP;VULNERABILITY;{cwe,owasp-a3}
abap:S2809;Using CALL TRANSACTION statements without an authority check is security-sensitive;CRITICAL;ABAP;VULNERABILITY;{cwe,owasp-a2,sans-top25-porous}
abap:S4790;Hashing data is security-sensitive;CRITICAL;ABAP;VULNERABILITY;{cwe,owasp-a3,owasp-a6,sans-top25-porous,spring}
squid:S2225;toString() and clone() methods should not return null;MAJOR;Java;BUG;{cert,cwe}
squid:S2589;Boolean expressions should not be gratuitous;MAJOR;Java;CODE_SMELL;{based-on-misra,cert,cwe,redundant}
squid:S3436;Value-based classes should not be used for locking;MAJOR;Java;BUG;{java8,lock-in,multi-threading}
squid:S4524;default clauses should be last;CRITICAL;Java;CODE_SMELL;{based-on-misra}
squid:S2583;Conditionally executed blocks should be reachable;MAJOR;Java;BUG;{based-on-misra,cert,cwe,misra,misra-c2004,misra-c2012,pitfall,unused}
squid:S3439;DefaultMessageListenerContainer instances should not drop messages during restarts;MAJOR;Java;BUG;{spring}
squid:S3437;Value-based objects should not be serialized;MINOR;Java;CODE_SMELL;{java8,lock-in,serialization}
squid:S864;Limited dependence should be placed on operator precedence;MAJOR;Java;CODE_SMELL;{based-on-misra,cert,cwe}
squid:S00121;Control structures should use curly braces;CRITICAL;Java;CODE_SMELL;{based-on-misra,cert,pitfall}
squid:S2115;Databases should be password-protected;BLOCKER;Java;VULNERABILITY;{cwe,owasp-a3}
squid:S1148;Throwable.printStackTrace(...) should not be called;MINOR;Java;VULNERABILITY;{cwe,error-handling,owasp-a3}
squid:S1145;Useless if(true) {...} and if(false){...} blocks should be removed;MAJOR;Java;BUG;{cwe,misra,misra-c2004,misra-c2012}
squid:S4530;Using Struts 1 ActionForm is security-sensitive;MAJOR;Java;VULNERABILITY;{cwe,owasp-a1,struts}
squid:S881;Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression;MAJOR;Java;CODE_SMELL;{based-on-misra,cert}
squid:S4531;Using setters in Struts 2 ActionSupport is security-sensitive;MAJOR;Java;VULNERABILITY;{owasp-a1,struts}
squid:S3329;Cypher Block Chaining IV's should be random and unique;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a6}
squid:S2119;Random objects should be reused;CRITICAL;Java;BUG;{owasp-a6}
squid:S3655;Optional value should only be accessed after calling isPresent();MAJOR;Java;BUG;{cwe}
squid:S3776;Cognitive Complexity of methods should not be too high;CRITICAL;Java;CODE_SMELL;{brain-overload}
squid:S2201;Return values from functions without side effects should not be ignored;MAJOR;Java;BUG;{cert,misra-c2012}
squid:S4502;Disabling Spring Security's CSRF protection is security-sensitive;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a6,sans-top25-insecure,spring}
squid:S4508;Deserializing objects from an untrusted source is security-sensitive;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a8}
squid:S4507;Delivering code in production with debug features activated is security-sensitive;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a3,spring}
squid:S3416;Loggers should be named for their enclosing classes;MINOR;Java;CODE_SMELL;{confusing}
squid:S4512;Setting JavaBean properties is security-sensitive;CRITICAL;Java;VULNERABILITY;{cert,cwe,owasp-a1}
squid:S1244;Floating point numbers should not be tested for equality;MAJOR;Java;BUG;{based-on-misra}
squid:S4510;Deserializing XML from an untrusted source is security-sensitive;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a1,owasp-a8}
squid:S4684;Persistent entities should not be used as arguments of @RequestMapping methods;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a5,spring}
squid:S3355;Defined filters should be used;CRITICAL;Java;VULNERABILITY;{owasp-a6}
squid:S1172;Unused method parameters should be removed;MAJOR;Java;CODE_SMELL;{based-on-misra,cert,unused}
squid:S3369;Security constraints should be defined;BLOCKER;Java;VULNERABILITY;{cwe,jee,owasp-a5,websphere}
squid:S5304;Using environment variables is security-sensitive;CRITICAL;Java;VULNERABILITY;{cwe}
squid:S2278;Neither DES (Data Encryption Standard) nor DESede (3DES) should be used;BLOCKER;Java;VULNERABILITY;{cert,cwe,owasp-a6,sans-top25-porous}
squid:S5300;Sending emails is security-sensitive;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a1,sans-top25-insecure}
squid:S2277;Cryptographic RSA algorithms should always incorporate OAEP (Optimal Asymmetric Encryption Padding);CRITICAL;Java;VULNERABILITY;{cwe,owasp-a3,owasp-a6,sans-top25-porous}
squid:S1065;Unused labels should be removed;MAJOR;Java;CODE_SMELL;{based-on-misra,cert,unused}
squid:S2390;Classes should not access their own subclasses during initialization;CRITICAL;Java;CODE_SMELL;{cert}
squid:S4424;TrustManagers should not blindly accept any certificates;MAJOR;Java;VULNERABILITY;{cert,cwe,owasp-a6}
squid:S4787;Encrypting data is security-sensitive;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a3,owasp-a6,sans-top25-porous}
squid:S4544;Using unsafe Jackson deserialization configuration is security-sensitive;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a8}
squid:S4423;Weak SSL protocols should not be used;MAJOR;Java;VULNERABILITY;{cwe,owasp-a3,owasp-a6,sans-top25-porous}
squid:S4426;Cryptographic keys should not be too short;BLOCKER;Java;VULNERABILITY;{cwe,owasp-a3}
squid:S2245;Using pseudorandom number generators (PRNGs) is security-sensitive;CRITICAL;Java;VULNERABILITY;{cert,cwe,owasp-a3}
squid:S3330;HttpOnly should be set on cookies;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a7,sans-top25-insecure}
squid:S4784;Using regular expressions is security-sensitive;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a1}
squid:S3331;Cookie domains should be as narrow as possible;CRITICAL;Java;VULNERABILITY;{owasp-a7}
squid:S923;Functions should not be defined with a variable number of arguments;INFO;Java;CODE_SMELL;{cert,misra-c++2008,misra-c2004,pitfall}
squid:S4435;XML transformers should be secured;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a4}
squid:S2258;javax.crypto.NullCipher should not be used for anything other than testing;BLOCKER;Java;VULNERABILITY;{cwe,owasp-a6,sans-top25-porous}
squid:S4434;LDAP deserialization should be disabled;BLOCKER;Java;VULNERABILITY;{cwe,owasp-a8}
squid:S2257;Using non-standard cryptographic algorithms is security-sensitive;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a3,sans-top25-porous}
squid:S2254;HttpServletRequest.getRequestedSessionId() should not be used;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a2,sans-top25-porous}
squid:S1166;Exception handlers should preserve the original exceptions;MAJOR;Java;CODE_SMELL;{cert,cwe,error-handling,owasp-a10,suspicious}
squid:S2255;Using cookies is security-sensitive;MINOR;Java;VULNERABILITY;{cert,cwe,owasp-a3,sans-top25-porous}
squid:S4433;LDAP connections should be authenticated;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a2}
squid:S4432;AES encryption algorithm should be used with secured mode;CRITICAL;Java;VULNERABILITY;{cert,cwe,owasp-a6,sans-top25-porous}
squid:S818;Literal suffixes should be upper case;MINOR;Java;CODE_SMELL;{based-on-misra,cert,convention,pitfall}
squid:S4790;Hashing data is security-sensitive;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a3,owasp-a6,sans-top25-porous,spring}
squid:S4792;Configuring loggers is security-sensitive;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a10,owasp-a3,sans-top25-porous}
squid:AssignmentInSubExpressionCheck;Assignments should not be made from within sub-expressions;MAJOR;Java;CODE_SMELL;{based-on-misra,cert,cwe,suspicious}
squid:S1659;Multiple variables should not be declared on the same line;MINOR;Java;CODE_SMELL;{based-on-misra,cert,convention}
squid:S1301;switch statements should have at least 3 case clauses;MINOR;Java;CODE_SMELL;{bad-practice,based-on-misra}
squid:S2638;Method overrides should not change contracts;CRITICAL;Java;CODE_SMELL;{suspicious}
squid:S4818;Using Sockets is security-sensitive;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a3,sans-top25-porous,sans-top25-risky}
squid:S2755;Untrusted XML should be parsed with a local, static DTD;BLOCKER;Java;VULNERABILITY;{cwe,owasp-a4}
squid:CommentedOutCodeLine;Sections of code should not be commented out;MAJOR;Java;CODE_SMELL;{based-on-misra,unused}
squid:S2976;File.createTempFile should not be used to create a directory;CRITICAL;Java;VULNERABILITY;{owasp-a9}
squid:S3510;HostnameVerifier.verify should not always return true;BLOCKER;Java;VULNERABILITY;{cwe,owasp-a6}
squid:S3752;@RequestMapping methods should specify HTTP method;BLOCKER;Java;VULNERABILITY;{cwe,owasp-a6,sans-top25-insecure,spring}
squid:S4601;HttpSecurity URL patterns should be correctly ordered;CRITICAL;Java;VULNERABILITY;{owasp-a6,spring}
squid:S3751;@RequestMapping methods should be public;BLOCKER;Java;VULNERABILITY;{owasp-a6,spring}
squid:S1219;switch statements should not contain non-case labels;BLOCKER;Java;CODE_SMELL;{based-on-misra,suspicious}
squid:S1226;Method parameters, caught exceptions and foreach variables' initial values should not be ignored;MINOR;Java;BUG;{based-on-misra}
squid:ForLoopCounterChangedCheck;for loop stop conditions should be invariant;MAJOR;Java;CODE_SMELL;{based-on-misra,pitfall}
squid:S1313;Using hardcoded IP addresses is security-sensitive;MINOR;Java;VULNERABILITY;{cert,owasp-a3}
squid:S4829;Reading the Standard Input is security-sensitive;CRITICAL;Java;VULNERABILITY;{cwe}
squid:S2647;Basic authentication should not be used;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a6,sans-top25-porous}
squid:S4823;Using command line arguments is security-sensitive;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a1,sans-top25-insecure}
squid:S2653;Web applications should not have a main method;CRITICAL;Java;VULNERABILITY;{cert,cwe,jee,owasp-a3}
squid:S3749;Members of Spring components should be injected;CRITICAL;Java;VULNERABILITY;{owasp-a3,spring}
squid:S2658;Classes should not be loaded dynamically;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a1}
squid:S4834;Controlling permissions is security-sensitive;CRITICAL;Java;VULNERABILITY;{owasp-a5,sans-top25-porous}
squid:S1948;Fields in a Serializable class should either be transient or serializable;CRITICAL;Java;CODE_SMELL;{cwe,serialization}
squid:SwitchLastCaseIsDefaultCheck;switch statements should have default clauses;CRITICAL;Java;CODE_SMELL;{based-on-misra,cert,cwe}
squid:S5042;Expanding archive files is security-sensitive;CRITICAL;Java;VULNERABILITY;{cert,cwe,owasp-a1}
squid:S1989;Exceptions should not be thrown from servlet methods;MINOR;Java;VULNERABILITY;{cert,cwe,error-handling,owasp-a3}
squid:HiddenFieldCheck;Local variables should not shadow class fields;MAJOR;Java;CODE_SMELL;{based-on-misra,cert,pitfall,suspicious}
squid:S126;if ... else if constructs should end with else clauses;CRITICAL;Java;CODE_SMELL;{based-on-misra,cert}
squid:S128;Switch cases should end with an unconditional break statement;BLOCKER;Java;CODE_SMELL;{based-on-misra,cert,cwe,suspicious}
squid:S5194;Use Java 12 switch expression;MINOR;Java;CODE_SMELL;{java12}
squid:S1602;Lamdbas containing only one statement should not nest this statement in a block;MINOR;Java;CODE_SMELL;{java8}
squid:S2068;Credentials should not be hard-coded;BLOCKER;Java;VULNERABILITY;{cert,cwe,owasp-a2,sans-top25-porous}
squid:S2184;Math operands should be cast before assignment;MINOR;Java;BUG;{based-on-misra,cert,cwe,overflow,sans-top25-risky}
squid:S5344;Authentication should not rely on insecure PasswordEncoder;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a2,owasp-a6,sans-top25-porous,spring}
squid:S4499;SMTP SSL connection should check server identity;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a3}
squid:S2077;Executing SQL queries is security-sensitive;CRITICAL;Java;VULNERABILITY;{bad-practice,cert,cwe,hibernate,owasp-a1,sans-top25-insecure,sql}
squid:EmptyStatementUsageCheck;Empty statements should be removed;MINOR;Java;CODE_SMELL;{based-on-misra,cert,unused}
squid:S2070;SHA-1 and Message-Digest hash algorithms should not be used in secure contexts;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a6,sans-top25-porous,spring}
squid:S3281;Default EJB interceptors should be declared in ejb-jar.xml;BLOCKER;Java;VULNERABILITY;{owasp-a6}
squid:S4347;SecureRandom seeds should not be predictable;CRITICAL;Java;VULNERABILITY;{cert,cwe,owasp-a6,pitfall}
squid:S3011;Changing or bypassing accessibility is security-sensitive;CRITICAL;Java;VULNERABILITY;{cert,owasp-a3}
squid:S5326;Validating SSL/TLS connections is security-sensitive;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a6,sans-top25-porous}
squid:S5322;Receiving intents is security-sensitive;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a1,sans-top25-insecure}
squid:S5324;Accessing Android external storage is security-sensitive;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a1,owasp-a3,sans-top25-porous,sans-top25-risky}
squid:S5320;Broadcasting intents is security-sensitive;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a3}
squid:S2089;HTTP referers should not be relied on;CRITICAL;Java;VULNERABILITY;{cwe,owasp-a2,sans-top25-porous}
squid:S888;Equality operators should not be used in for loop termination conditions;CRITICAL;Java;CODE_SMELL;{based-on-misra,cert,cwe,suspicious}
squid:S5122;Enabling Cross-Origin Resource Sharing is security-sensitive;MINOR;Java;VULNERABILITY;{cwe,owasp-a6,sans-top25-porous}
squid:S899;Return values should not be ignored when they contain the operation status code;MINOR;Java;VULNERABILITY;{cert,cwe,error-handling,misra-c++2008,misra-c2004,misra-c2012}
squid:S2092;Creating cookies without the secure flag is security-sensitive;MINOR;Java;VULNERABILITY;{cwe,owasp-a2,owasp-a3,sans-top25-porous,spring}
javascript:S2589;Boolean expressions should not be gratuitous;MAJOR;JavaScript;CODE_SMELL;{based-on-misra,cert,cwe,redundant}
javascript:S2583;Conditionally executed blocks should be reachable;MAJOR;JavaScript;BUG;{based-on-misra,cert,cwe,misra,misra-c2004,misra-c2012,pitfall,unused}
javascript:S1145;Useless if(true) {...} and if(false){...} blocks should be removed;MAJOR;JavaScript;BUG;{cwe,misra,misra-c2004,misra-c2012}
javascript:S881;Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression;MAJOR;JavaScript;CODE_SMELL;{based-on-misra,cert}
javascript:S878;Comma operator should not be used;MAJOR;JavaScript;CODE_SMELL;{based-on-misra}
javascript:S3776;Cognitive Complexity of functions should not be too high;CRITICAL;JavaScript;CODE_SMELL;{brain-overload}
javascript:S2201;Return values from functions without side effects should not be ignored;MAJOR;JavaScript;BUG;{cert,misra-c2012}
javascript:S2681;Multiline blocks should be enclosed in curly braces;MAJOR;JavaScript;CODE_SMELL;{cert,cwe}
javascript:S1117;Variables should not be shadowed;MAJOR;JavaScript;CODE_SMELL;{based-on-misra,cert,pitfall,suspicious}
javascript:S1116;Extra semicolons should be removed;MINOR;JavaScript;CODE_SMELL;{based-on-misra,cert,unused}
javascript:AssignmentWithinCondition;Assignments should not be made from within sub-expressions;MAJOR;JavaScript;CODE_SMELL;{based-on-misra,cert,cwe,suspicious}
javascript:S2692;indexOf checks should not be for positive numbers;MAJOR;JavaScript;CODE_SMELL;{suspicious}
javascript:DebuggerStatement;Debugger statements should not be used;MINOR;JavaScript;VULNERABILITY;{cwe,owasp-a3,user-experience}
javascript:OctalNumber;Octal values should not be used;BLOCKER;JavaScript;CODE_SMELL;{based-on-misra,cert,pitfall}
javascript:S2819;Cross-document messaging domains should be carefully restricted;CRITICAL;JavaScript;VULNERABILITY;{html5,owasp-a7}
javascript:S3923;All branches in a conditional structure should not have exactly the same implementation;MAJOR;JavaScript;BUG;{}
javascript:S4787;Encrypting data is security-sensitive;CRITICAL;JavaScript;VULNERABILITY;{cwe,owasp-a3,owasp-a6,sans-top25-porous}
javascript:S2245;Using pseudorandom number generators (PRNGs) is security-sensitive;CRITICAL;JavaScript;VULNERABILITY;{cert,cwe,owasp-a3}
javascript:S4784;Using regular expressions is security-sensitive;CRITICAL;JavaScript;VULNERABILITY;{cwe,owasp-a1}
javascript:CommentedCode;Sections of code should not be commented out;MAJOR;JavaScript;CODE_SMELL;{based-on-misra,unused}
javascript:UnreachableCode;Jump statements should not be followed by dead code;MAJOR;JavaScript;BUG;{based-on-misra,cert,cwe,unused}
javascript:S2255;Using cookies is security-sensitive;MINOR;JavaScript;VULNERABILITY;{cert,cwe,owasp-a3,sans-top25-porous}
javascript:S2817;Web SQL databases should not be used;BLOCKER;JavaScript;VULNERABILITY;{html5,owasp-a3,owasp-a9}
javascript:S4790;Hashing data is security-sensitive;CRITICAL;JavaScript;VULNERABILITY;{cwe,owasp-a3,owasp-a6,sans-top25-porous,spring}
javascript:S930;Function calls should not pass extra arguments;CRITICAL;JavaScript;BUG;{based-on-misra,cert,cwe}
javascript:S905;Non-empty statements should change control flow or have at least one side-effect;MAJOR;JavaScript;BUG;{based-on-misra,cwe,unused}
javascript:S3271;Local storage should not be used;CRITICAL;JavaScript;VULNERABILITY;{owasp-a3}
javascript:S106;Standard outputs should not be used directly to log anything;MAJOR;JavaScript;CODE_SMELL;{bad-practice,cert,user-experience}
javascript:S1301;switch statements should have at least 3 case clauses;MINOR;JavaScript;CODE_SMELL;{bad-practice,based-on-misra}
javascript:S2077;Executing SQL queries is security-sensitive;CRITICAL;JavaScript;VULNERABILITY;{bad-practice,cert,cwe,owasp-a1,sans-top25-insecure,sql}
javascript:S4817;Executing XPath expressions is security-sensitive;CRITICAL;JavaScript;VULNERABILITY;{cert,cwe,owasp-a1}
javascript:S4818;Using Sockets is security-sensitive;CRITICAL;JavaScript;VULNERABILITY;{cwe,owasp-a3,sans-top25-porous,sans-top25-risky}
javascript:S1871;Two branches in a conditional structure should not have exactly the same implementation;MAJOR;JavaScript;CODE_SMELL;{design,suspicious}
javascript:S2611;Untrusted content should not be included;CRITICAL;JavaScript;VULNERABILITY;{cwe,owasp-a1,sans-top25-risky}
javascript:Eval;Code should not be dynamically injected and executed;CRITICAL;JavaScript;VULNERABILITY;{cwe,owasp-a1,owasp-a7}
javascript:UnusedFunctionArgument;Unused function parameters should be removed;MAJOR;JavaScript;CODE_SMELL;{based-on-misra,cert,unused}
javascript:S4721;Executing OS commands is security-sensitive;CRITICAL;JavaScript;VULNERABILITY;{cwe,owasp-a1,sans-top25-insecure}
javascript:S1219;switch statements should not contain non-case labels;BLOCKER;JavaScript;CODE_SMELL;{based-on-misra,suspicious}
javascript:CurlyBraces;Control structures should use curly braces;CRITICAL;JavaScript;CODE_SMELL;{based-on-misra,cert,pitfall}
javascript:ContinueStatement;continue should not be used;MINOR;JavaScript;CODE_SMELL;{bad-practice,based-on-misra}
javascript:S1226;Function parameters, caught exceptions and foreach variables should not be reassigned;MINOR;JavaScript;BUG;{based-on-misra}
javascript:SwitchWithoutDefault;switch statements should end with default clauses;CRITICAL;JavaScript;CODE_SMELL;{based-on-misra,cert,cwe}
javascript:S4823;Using command line arguments is security-sensitive;CRITICAL;JavaScript;VULNERABILITY;{cwe,owasp-a1,sans-top25-insecure}
javascript:ElseIfWithoutElse;if ... else if constructs should end with else clauses;CRITICAL;JavaScript;CODE_SMELL;{based-on-misra,cert}
javascript:NonEmptyCaseWithoutBreak;Switch cases should end with an unconditional break statement;BLOCKER;JavaScript;CODE_SMELL;{based-on-misra,cert,cwe,suspicious}
javascript:S888;Equality operators should not be used in for loop termination conditions;CRITICAL;JavaScript;CODE_SMELL;{based-on-misra,cert,cwe,suspicious}
javascript:S1442;alert(...) should not be used;MINOR;JavaScript;VULNERABILITY;{cwe,owasp-a3,user-experience}
javascript:S5122;Enabling Cross-Origin Resource Sharing is security-sensitive;MINOR;JavaScript;VULNERABILITY;{cwe,owasp-a6,sans-top25-porous}
tsql:S2068;Credentials should not be hard-coded;BLOCKER;T-SQL;VULNERABILITY;{cert,cwe,owasp-a2,sans-top25-porous}
tsql:S1659;Multiple variables should not be declared on the same line;MINOR;T-SQL;CODE_SMELL;{based-on-misra,cert,convention,misra}
tsql:S907;GOTO statements should not be used;MAJOR;T-SQL;CODE_SMELL;{based-on-misra,brain-overload,misra}
tsql:S1172;Unused procedure and function parameters should be removed;MAJOR;T-SQL;CODE_SMELL;{based-on-misra,cert,misra,unused}
tsql:S121;Control structures should use BEGIN...END blocks;CRITICAL;T-SQL;CODE_SMELL;{based-on-misra,cert,misra,pitfall}
tsql:S3641;Nullable subqueries should not be used in NOT IN conditions;CRITICAL;T-SQL;BUG;{sql}
tsql:S1065;Unused labels should be removed;MAJOR;T-SQL;CODE_SMELL;{based-on-misra,cert,misra,unused}
tsql:S2070;SHA-1 and Message-Digest hash algorithms should not be used in secure contexts;CRITICAL;T-SQL;VULNERABILITY;{cwe,owasp-a6,sans-top25-porous,spring}
tsql:S1313;Using hardcoded IP addresses is security-sensitive;MINOR;T-SQL;VULNERABILITY;{cert,owasp-a3}
tsql:S131;CASE expressions should end with ELSE clauses;CRITICAL;T-SQL;CODE_SMELL;{based-on-misra,cert,cwe,misra}
tsql:S1116;Empty statements should be removed;MINOR;T-SQL;CODE_SMELL;{based-on-misra,cert,misra,unused}
tsql:S125;Sections of code should not be commented out;MAJOR;T-SQL;CODE_SMELL;{based-on-misra,misra,unused}
tsql:S1590;DELETE and UPDATE statements should contain WHERE clauses;BLOCKER;T-SQL;BUG;{sql}
tsql:S126;IF ... ELSEIF constructs should end with ELSE clauses;CRITICAL;T-SQL;CODE_SMELL;{based-on-misra,cert,misra}
tsql:S1763;Jump statements should not be followed by dead code;MAJOR;T-SQL;BUG;{based-on-misra,cert,cwe,misra,unused}
tsql:S1523;Dynamically executing code is security-sensitive;CRITICAL;T-SQL;VULNERABILITY;{cwe,owasp-a1,owasp-a7}
pli:S1147;STOP statements should not be called;BLOCKER;PL/I;CODE_SMELL;{cwe,suspicious}
vb:S1313;IP addresses should not be hardcoded;MINOR;Vb;VULNERABILITY;{owasp-a3}
vb:S131;Select statements should end with a Case Else clause;CRITICAL;Vb;CODE_SMELL;{cwe}
vb:S1659;Multiple variables should not be declared on the same line;MINOR;Vb;CODE_SMELL;{convention}
vb:S1116;Empty statements should be removed;MINOR;Vb;CODE_SMELL;{unused}
vb:S907;GoTo statements should not be used;MAJOR;Vb;CODE_SMELL;{brain-overload}
vb:S1301;Select Case statements should have at least 3 Case clauses;MINOR;Vb;CODE_SMELL;{bad-practice}
c:S2589;Boolean expressions should not be gratuitous;MAJOR;C;CODE_SMELL;{based-on-misra,cert,cwe,redundant}
c:S990;abort, exit, getenv and system from <stdlib.h> should not be used;CRITICAL;C;BUG;{based-on-misra,cert}
c:PPIncludeSignal;<signal.h> should not be used;CRITICAL;C;BUG;{based-on-misra,lock-in}
c:S2583;Conditionally executed blocks should be reachable;MAJOR;C;BUG;{based-on-misra,cert,cwe,misra,misra-c2004,misra-c2012,pitfall,unused}
c:SideEffectInSizeOf;sizeof should not be used on expressions that contain side effects;MAJOR;C;BUG;{misra-c++2008}
c:TrigraphUsage;Trigraphs should not be used;BLOCKER;C;CODE_SMELL;{based-on-misra,cert,obsolete,suspicious}
c:S982;setjmp and longjmp should not be used;CRITICAL;C;CODE_SMELL;{based-on-misra,cert,pitfall}
c:S985;errno should not be used;CRITICAL;C;CODE_SMELL;{based-on-misra,suspicious}
c:S864;Limited dependence should be placed on operator precedence;MAJOR;C;CODE_SMELL;{based-on-misra,cert,cwe}
c:S5297;GNU attributes should be used correctly;MAJOR;C;CODE_SMELL;{confusing}
c:S984;Dynamic heap memory allocation should not be used;CRITICAL;C;BUG;{based-on-misra,pitfall}
c:GotoUsage;goto statement should not be used;MAJOR;C;CODE_SMELL;{based-on-misra,brain-overload}
c:S986;offsetof macro from <stddef.h> should not be used;CRITICAL;C;CODE_SMELL;{misra-c++2008,misra-c2004,suspicious}
c:S989;atof, atoi and atol from <stdlib.h> should not be used;CRITICAL;C;BUG;{based-on-misra,cert}
c:SingleGotoOrBreakPerIteration;Loops should not have more than one break or goto statement;MAJOR;C;CODE_SMELL;{based-on-misra,confusing}
c:S867;Boolean operators should have boolean operands;MAJOR;C;BUG;{based-on-misra,cert}
c:S5293;Format strings should comply with ISO standards;MINOR;C;CODE_SMELL;{convention}
c:S1144;Unused functions and methods should be removed;MAJOR;C;CODE_SMELL;{based-on-misra,unused}
c:NarrowAndWideStringConcat;Narrow and wide string literals should not be concatenated;MAJOR;C;BUG;{based-on-misra,cert}
c:S873;enum values should not be used as operands to built-in operators other than [ ], =, ==, !=, unary &, and the relational operat;MAJOR;C;CODE_SMELL;{based-on-misra,suspicious}
c:S872;bool expressions should not be used as operands to built-in operators other than =, &&, ||, !, ==, !=, unary &, and the condit;MAJOR;C;CODE_SMELL;{based-on-misra,suspicious}
c:S995;Pointer and reference parameters should be const if the corresponding object is not modified;MINOR;C;CODE_SMELL;{bad-practice,based-on-misra}
c:S874;Bitwise operators should not be applied to signed operands;MAJOR;C;BUG;{bad-practice,based-on-misra,cert,cwe,lock-in}
c:S876;Unary minus should not be applied to an unsigned expression;MAJOR;C;BUG;{based-on-misra}
c:S878;Comma operator should not be used;MAJOR;C;CODE_SMELL;{based-on-misra}
c:S3776;Cognitive Complexity of functions should not be too high;CRITICAL;C;CODE_SMELL;{brain-overload}
c:S2323;Line-splicing should not be used in // comments;CRITICAL;C;BUG;{based-on-misra}
c:S2324;Flexible array members should not be declared;CRITICAL;C;CODE_SMELL;{based-on-misra,suspicious}
c:S5278;Size argument of memory functions should be consistent;MAJOR;C;CODE_SMELL;{suspicious}
c:S5279;Unevaluated operands should not have side effects;MAJOR;C;CODE_SMELL;{based-on-misra,suspicious}
c:S1116;Empty statements should be removed;MINOR;C;CODE_SMELL;{based-on-misra,cert,unused}
c:S969;Only standard forms of the defined directive should be used;BLOCKER;C;CODE_SMELL;{bad-practice,based-on-misra}
c:LogicalExpressionOperands;Operands of && and || should be primary (C) or postfix (C++) expressions;MAJOR;C;CODE_SMELL;{based-on-misra}
c:S961;Function-like macros should not be invoked without all of their arguments;BLOCKER;C;BUG;{based-on-misra,cwe,preprocessor}
c:S960;Function-like macros should not be used;CRITICAL;C;CODE_SMELL;{bad-practice,based-on-misra,cert,preprocessor}
c:S5273;Appropriate size arguments should be passed to strncat and strlcpy;MAJOR;C;CODE_SMELL;{suspicious}
c:S5270;User-defined types should not be passed as variadic arguments;MAJOR;C;BUG;{suspicious}
c:S967;There shall be at most one occurrence of the # or ## operators in a single macro definition;MAJOR;C;BUG;{misra-c++2008,misra-c2004,misra-c2012,preprocessor}
c:S966;Macros used in preprocessor directives should be defined before use;MAJOR;C;BUG;{based-on-misra,preprocessor}
c:S5271;Functions which do not return should be declared as noreturn;MINOR;C;CODE_SMELL;{confusing}
c:S1244;Floating point numbers should not be tested for equality;MAJOR;C;BUG;{based-on-misra}
c:S2335;Octal and hexadecimal escape sequences should be terminated;CRITICAL;C;CODE_SMELL;{based-on-misra,pitfall}
c:S860;Objects with integer type should not be converted to objects with pointer type;MAJOR;C;BUG;{based-on-misra,cert}
c:InvalidEscapeSequence;Only escape sequences defined in the ISO C standard should be used;MAJOR;C;BUG;{based-on-misra}
c:S2216;Single-bit named bit fields should not be of a signed type;MAJOR;C;BUG;{based-on-misra}
c:OctalConstantAndSequence;Octal values should not be used;BLOCKER;C;CODE_SMELL;{based-on-misra,cert,pitfall}
c:S1481;Unused local variables should be removed;MINOR;C;CODE_SMELL;{unused}
c:S851;The value of a complex expression should only be cast to a type that is narrower and of the same signedness as the underlying ty;MAJOR;C;CODE_SMELL;{based-on-misra}
c:S853;Results of ~ and << operations on operands of underlying types unsigned char and unsigned short should immediately be cast to th;MAJOR;C;BUG;{based-on-misra,misra}
c:S855;Function pointers should not be converted to any other type;MAJOR;C;BUG;{based-on-misra}
c:S5281;Argument of printf should be a format string;CRITICAL;C;CODE_SMELL;{bad-practice}
c:S5280;mktemp family of functions templates should have at least six trailing Xs;CRITICAL;C;CODE_SMELL;{suspicious}
c:S854;Constants of unsigned type should have a U suffix;CRITICAL;C;CODE_SMELL;{based-on-misra,pitfall}
c:S978;Reserved identifiers and functions in the standard library should not be defined or declared;BLOCKER;C;CODE_SMELL;{bad-practice,based-on-misra,cert}
c:S5283;Size of variable length arrays should be positive;CRITICAL;C;CODE_SMELL;{suspicious}
c:S977;Lines starting with # should contain valid preprocessing directives;MAJOR;C;BUG;{based-on-misra,preprocessor}
c:S856;Object pointers should only be converted to other object pointers, integral types or void pointers;MAJOR;C;BUG;{based-on-misra}
c:GotoLabelInNestedBlock;goto statements should not be used to jump into blocks;BLOCKER;C;CODE_SMELL;{based-on-misra,brain-overload,pitfall}
c:S946;The address of an automatic object should not be assigned to another object that may persist after the first object has ceased t;BLOCKER;C;BUG;{based-on-misra,cert}
c:S1172;Unused function parameters should be removed;MAJOR;C;CODE_SMELL;{based-on-misra,cert,unused}
c:AssignmentInSubExpression;Assignments should not be made from within sub-expressions;MAJOR;C;CODE_SMELL;{based-on-misra,cert,cwe,suspicious}
c:S820;Object and function types should be explicitly stated in their declarations and definitions;CRITICAL;C;CODE_SMELL;{based-on-misra,cert}
c:S3590;Stack allocated memory should not be freed;BLOCKER;C;BUG;{unpredictable}
c:S943;Object declarations should contain no more than 2 levels of pointer indirection;CRITICAL;C;CODE_SMELL;{based-on-misra,brain-overload,pitfall}
c:S824;Functions should not be declared at block scope;MAJOR;C;CODE_SMELL;{misra-c++2008,misra-c2004}
c:GlobalMainFunction;The name main should not be used for any function other than the global main function;BLOCKER;C;CODE_SMELL;{misra-c++2008,pitfall}
c:S1065;Unused labels should be removed;MAJOR;C;CODE_SMELL;{based-on-misra,cert,unused}
c:S2275;Printf-style format strings should not lead to unexpected behavior at runtime;BLOCKER;C;BUG;{cert,pitfall}
c:S5308;Return value of setuid family of functions should always be checked;CRITICAL;C;CODE_SMELL;{}
c:S836;Variables should be initialized before use;MAJOR;C;BUG;{based-on-misra,cwe}
c:LiteralSuffix;Literal suffixes shall be upper case;MINOR;C;CODE_SMELL;{based-on-misra,cert,convention,pitfall}
c:PPDefineOrUndefFromBlock;Macros should not be #define'd or #undef'd within a block;CRITICAL;C;CODE_SMELL;{based-on-misra,pitfall}
c:S950;Structure and union types should be complete at the end of a translation unit;MINOR;C;CODE_SMELL;{based-on-misra}
c:S2393;The <stdlib.h> functions bsearch and qsort should not be used;MAJOR;C;BUG;{based-on-misra,unpredictable}
c:S833;If a function has internal linkage then all re-declarations shall include the static storage class specifer;MAJOR;C;CODE_SMELL;{misra-c++2008,misra-c2004,pitfall}
c:S834;Array declarations should include an explicit size specification;MAJOR;C;CODE_SMELL;{based-on-misra,cert}
c:S835;Braces should be used to indicate and match the structure in the non-zero initialization of arrays and structures;MAJOR;C;CODE_SMELL;{based-on-misra}
c:S3457;Printf-style format strings should be used correctly;MAJOR;C;CODE_SMELL;{cert,confusing}
c:S1036;Control should not be transferred into a complex logic block using a goto or a switch statement;BLOCKER;C;CODE_SMELL;{based-on-misra,cert,lock-in,pitfall}
c:S1836;restrict should not be used;CRITICAL;C;CODE_SMELL;{based-on-misra,cert}
c:DigraphUsage;Digraphs should not be used;BLOCKER;C;CODE_SMELL;{based-on-misra,obsolete}
c:S1831;static should not be used for the size of an array parameter;CRITICAL;C;CODE_SMELL;{based-on-misra,pitfall}
c:PPIncludeTime;<time.h> should not be used;CRITICAL;C;CODE_SMELL;{based-on-misra,lock-in}
c:S925;Recursion should not be used;CRITICAL;C;CODE_SMELL;{bad-practice,based-on-misra,pitfall}
c:CommentedCode;Sections of code should not be commented out;MAJOR;C;CODE_SMELL;{based-on-misra,unused}
c:S926;Parameters in a function prototype should be named;MAJOR;C;CODE_SMELL;{based-on-misra}
c:S929;Functions without parameters should be declared with parameter type void;CRITICAL;C;CODE_SMELL;{based-on-misra,cert,pitfall}
c:S127;for loop stop conditions should be invariant;MAJOR;C;CODE_SMELL;{based-on-misra,pitfall}
c:S920;Switch statement conditions should not have essentially boolean type;MINOR;C;CODE_SMELL;{misra-c++2008,misra-c2004,misra-c2012}
c:S802;typedef names should be unique identifiers;MAJOR;C;CODE_SMELL;{based-on-misra,suspicious}
c:FunctionEllipsis;Functions should not be defined with a variable number of arguments;CRITICAL;C;CODE_SMELL;{cert,misra-c++2008,misra-c2004,pitfall}
c:S936;Function names should be used either as a call with a parameter list or with the & operator;CRITICAL;C;CODE_SMELL;{based-on-misra,suspicious}
c:S935;Function exit paths should have appropriate return values;CRITICAL;C;BUG;{based-on-misra,cert,cwe}
c:S814;Bit fields should be declared with appropriate types;MAJOR;C;CODE_SMELL;{based-on-misra,cert,lock-in}
c:S819;Functions should be declared explicitly;CRITICAL;C;CODE_SMELL;{bad-practice,based-on-misra,cert}
c:S930;The number of arguments passed to a function should match the number of parameters;MAJOR;C;BUG;{based-on-misra,cert,cwe}
c:S810;Appropriate char types should be used for character and integer values;MINOR;C;CODE_SMELL;{based-on-misra,cert,confusing}
c:S813;typedefs that indicate size and signedness should be used in place of the basic types;MINOR;C;CODE_SMELL;{based-on-misra}
c:IdentifierLongerThan31;Identifiers should not be longer than 31 characters;MAJOR;C;CODE_SMELL;{based-on-misra,cert}
c:S905;Non-empty statements should change control flow or have at least one side-effect;MAJOR;C;BUG;{based-on-misra,cwe,unused}
c:S109;Magic numbers should not be used;MAJOR;C;CODE_SMELL;{brain-overload}
c:S2753;Values of different enum types should not be compared;MAJOR;C;BUG;{}
c:S1301;switch statements should have at least 3 case clauses;MINOR;C;CODE_SMELL;{bad-practice,based-on-misra}
c:S121;Control structures should use curly braces;CRITICAL;C;CODE_SMELL;{based-on-misra,cert,pitfall}
c:SideEffectInRightHandSideOfLogical;The right-hand operands of && and || should not contain side effects;BLOCKER;C;CODE_SMELL;{based-on-misra,cert}
c:PPUndefUsage;#undef should not be used;CRITICAL;C;CODE_SMELL;{based-on-misra,brain-overload}
c:SwitchLabelPlacement;Switch labels should not be nested inside non-switch blocks;BLOCKER;C;CODE_SMELL;{confusing,misra-c++2008,misra-c2004,misra-c2012}
c:EnumPartialInitialization;enum members other than the first one should not be explicitly initialized unless all members are explicitly initialized;MAJOR;C;CODE_SMELL;{based-on-misra}
c:S2193;for loop counters should not have essentially floating type;MINOR;C;BUG;{based-on-misra,cert}
c:S2190;Recursion should not be infinite;BLOCKER;C;BUG;{suspicious}
c:SingleDeclarationPerStatement;Init-declarator-lists and member-declarator-lists should consist of single init-declarators and member-declarators respectively;MINOR;C;CODE_SMELL;{based-on-misra,cert,convention}
c:S1763;Jump statements should not be followed by dead code;MAJOR;C;BUG;{based-on-misra,cert,cwe,unused}
c:PPStringifyAndPastingUsage;Preprocessor operators # and ## should not be used;MINOR;C;CODE_SMELL;{based-on-misra,lock-in}
c:S1761;Pre-defined macros should not be defined, redefined or undefined;CRITICAL;C;CODE_SMELL;{based-on-misra,preprocessor,suspicious}
c:S3949;Integral operations should not overflow;MAJOR;C;BUG;{based-on-misra,cert,misra,misra-c++2008,misra-c2004,misra-c2012,overflow}
c:S1767;Pointers should not be cast to integral types;CRITICAL;C;BUG;{based-on-misra,cert}
c:PPIncludeStdio;<stdio.h> should not be used in production code;CRITICAL;C;BUG;{based-on-misra,lock-in}
c:S1081;Insecure functions strcpy, strcat and sprintf should not be used;CRITICAL;C;VULNERABILITY;{cert,cwe,owasp-a9,sans-top25-risky}
c:S5259;Header guards should be followed by according #define macro;CRITICAL;C;CODE_SMELL;{unpredictable}
c:S793;All uses of the #pragma directive should be documented;MAJOR;C;CODE_SMELL;{based-on-misra,cert}
c:S1219;switch statements should not contain non-case labels;BLOCKER;C;CODE_SMELL;{based-on-misra,suspicious}
c:S784;Assembly language should be encapsulated and isolated;MAJOR;C;CODE_SMELL;{misra-c++2008,misra-c2004}
c:ObsoletePosixFunction;Obsolete POSIX functions should not be used;MAJOR;C;CODE_SMELL;{cert,obsolete}
c:C99CommentUsage;Source code should only use /* ... */ style comments;MINOR;C;CODE_SMELL;{based-on-misra,convention}
c:S1103;/* and // should not be used within comments;MINOR;C;CODE_SMELL;{based-on-misra,cert,confusing}
c:S5267;Functions with noreturn attribute should not return;BLOCKER;C;BUG;{confusing}
c:S5266;Keywords shall not be used as macros identifiers;MAJOR;C;CODE_SMELL;{based-on-misra,pitfall,unpredictable}
c:S1226;Function parameters should not be reassigned;MINOR;C;CODE_SMELL;{based-on-misra}
c:PPBadIncludeForm;#include directives should be followed by either <filename> or filename sequences;MAJOR;C;BUG;{based-on-misra}
c:Union;Unions should not be used;CRITICAL;C;CODE_SMELL;{based-on-misra}
c:S5263;Logical operators should not be confused with bitwise operators;CRITICAL;C;CODE_SMELL;{pitfall}
c:S5262;Dereferenced null pointers should not be bound to references;MAJOR;C;CODE_SMELL;{unpredictable}
c:S5261;else statements should be clearly matched with an if;MAJOR;C;CODE_SMELL;{confusing}
c:ContinueUsage;continue should not be used;MINOR;C;CODE_SMELL;{bad-practice,based-on-misra}
c:PPIncludeNonStandardCharacters;Non-standard characters should not occur in header file names in #include directives;MAJOR;C;BUG;{based-on-misra}
c:FunctionSinglePointOfExit;A function should have a single point of exit at the end of the function;MINOR;C;CODE_SMELL;{based-on-misra,brain-overload}
c:PPIncludeNotAtTop;#include directives in a file should only be preceded by other preprocessor directives or comments;MAJOR;C;CODE_SMELL;{confusing,misra-c++2008,misra-c2004,misra-c2012}
c:SwitchWithoutDefault;switch statements should have default clauses;CRITICAL;C;CODE_SMELL;{based-on-misra,cert,cwe}
c:ElseIfWithoutElse;if ... else if constructs should end with else clauses;CRITICAL;C;CODE_SMELL;{based-on-misra,cert}
c:NonEmptyCaseWithoutBreak;Switch cases should end with an unconditional break statement;BLOCKER;C;CODE_SMELL;{based-on-misra,cert,cwe,suspicious}
c:S883;Tests of non-Boolean values against zero should be explicit;MINOR;C;CODE_SMELL;{based-on-misra}
c:S886;The three expressions of a for statement should only be concerned with loop control;MAJOR;C;BUG;{based-on-misra}
c:BackJumpWithGoto;goto should jump to labels declared later in the same function;BLOCKER;C;CODE_SMELL;{based-on-misra,pitfall}
c:IncAndDecMixedWithOtherOperators;Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression;MAJOR;C;CODE_SMELL;{based-on-misra,cert}
c:S897;Unused type declarations should be removed;MAJOR;C;CODE_SMELL;{based-on-misra,unused}
cpp:S1016;Overriding virtual functions should be declared with override;MAJOR;C++;CODE_SMELL;{based-on-misra}
cpp:S2589;Boolean expressions should not be gratuitous;MAJOR;C++;CODE_SMELL;{based-on-misra,cert,cwe,redundant}
cpp:S1013;Accessible base classes should not be both virtual and non-virtual in the same hierarchy;MINOR;C++;BUG;{based-on-misra}
cpp:S990;abort, exit, getenv and system from <stdlib.h> should not be used;CRITICAL;C++;BUG;{based-on-misra,cert}
cpp:PPIncludeSignal;<signal.h> should not be used;CRITICAL;C++;BUG;{based-on-misra,lock-in}
cpp:S1011;Classes should not be derived from virtual bases;MINOR;C++;BUG;{based-on-misra}
cpp:S871;C-style and functional notation casts should not be used;MAJOR;C++;CODE_SMELL;{based-on-misra,pitfall}
cpp:S2583;Conditionally executed blocks should be reachable;MAJOR;C++;BUG;{based-on-misra,cert,cwe,misra,misra-c2004,misra-c2012,pitfall,unused}
cpp:SideEffectInSizeOf;sizeof should not be used on expressions that contain side effects;MAJOR;C++;BUG;{misra-c++2008}
cpp:S1017;Pure virtual functions should not override non-pure virtual functions;CRITICAL;C++;CODE_SMELL;{based-on-misra,pitfall}
cpp:S982;setjmp and longjmp should not be used;CRITICAL;C++;CODE_SMELL;{based-on-misra,cert,pitfall}
cpp:S985;errno should not be used;CRITICAL;C++;CODE_SMELL;{based-on-misra,suspicious}
cpp:S864;Limited dependence should be placed on operator precedence;MAJOR;C++;CODE_SMELL;{based-on-misra,cert,cwe}
cpp:S984;Dynamic heap memory allocation should not be used;CRITICAL;C++;BUG;{based-on-misra,pitfall}
cpp:S986;offsetof macro from <stddef.h> should not be used;CRITICAL;C++;CODE_SMELL;{misra-c++2008,misra-c2004,suspicious}
cpp:S989;atof, atoi and atol from <stdlib.h> should not be used;CRITICAL;C++;BUG;{based-on-misra,cert}
cpp:SingleGotoOrBreakPerIteration;Loops should not have more than one break or goto statement;MAJOR;C++;CODE_SMELL;{based-on-misra,confusing}
cpp:S867;Boolean operators should have boolean operands;MAJOR;C++;BUG;{based-on-misra,cert}
cpp:S1144;Unused private methods should be removed;MAJOR;C++;CODE_SMELL;{based-on-misra,unused}
cpp:NarrowAndWideStringConcat;Narrow and wide string literals should not be concatenated;MAJOR;C++;BUG;{based-on-misra,cert}
cpp:S872;bool expressions should not be used as operands to built-in operators other than =, &&, ||, !, ==, !=, unary &, and the condit;MAJOR;C++;CODE_SMELL;{based-on-misra,suspicious}
cpp:S873;enum values should not be used as operands to built-in operators other than [ ], =, ==, !=, unary &, and the relational operat;MAJOR;C++;CODE_SMELL;{based-on-misra,suspicious}
cpp:S874;Bitwise operators should not be applied to signed operands;MAJOR;C++;BUG;{bad-practice,based-on-misra,cert,cwe,lock-in}
cpp:S876;Unary minus should not be applied to an unsigned expression;MAJOR;C++;BUG;{based-on-misra}
cpp:S878;Comma operator should not be used;MAJOR;C++;CODE_SMELL;{based-on-misra}
cpp:S3776;Cognitive Complexity of functions should not be too high;CRITICAL;C++;CODE_SMELL;{brain-overload}
cpp:S2324;Flexible array members should not be declared;CRITICAL;C++;CODE_SMELL;{based-on-misra,suspicious}
cpp:S3656;Member variables should not be protected;CRITICAL;C++;CODE_SMELL;{based-on-misra,pitfall}
cpp:S2323;Line-splicing should not be used in // comments;CRITICAL;C++;BUG;{based-on-misra}
cpp:S1238;Pass by reference to const should be used for large input parameters;MAJOR;C++;CODE_SMELL;{performance}
cpp:S1117;Local variables should not shadow class fields;MAJOR;C++;CODE_SMELL;{based-on-misra,cert,pitfall,suspicious}
cpp:S1116;Empty statements should be removed;MINOR;C++;CODE_SMELL;{based-on-misra,cert,unused}
cpp:S969;Only standard forms of the defined directive should be used;BLOCKER;C++;CODE_SMELL;{bad-practice,based-on-misra}
cpp:S961;Function-like macros should not be invoked without all of their arguments;BLOCKER;C++;BUG;{based-on-misra,cwe,preprocessor}
cpp:S960;Function-like macros should not be used;CRITICAL;C++;CODE_SMELL;{bad-practice,based-on-misra,cert,preprocessor}
cpp:S967;There shall be at most one occurrence of the # or ## operators in a single macro definition;MAJOR;C++;BUG;{misra-c++2008,misra-c2004,misra-c2012,preprocessor}
cpp:S2335;Octal and hexadecimal escape sequences should be terminated;CRITICAL;C++;CODE_SMELL;{based-on-misra,pitfall}
cpp:S966;Macros used in preprocessor directives should be defined before use;MAJOR;C++;BUG;{based-on-misra,preprocessor}
cpp:S1003;using directives should not be used in header files;CRITICAL;C++;CODE_SMELL;{based-on-misra,suspicious}
cpp:S1244;Floating point numbers should not be tested for equality;MAJOR;C++;BUG;{based-on-misra}
cpp:S1242;Inherited non-virtual functions should not be hidden;CRITICAL;C++;CODE_SMELL;{confusing}
cpp:S860;Objects with integer type should not be converted to objects with pointer type;MAJOR;C++;BUG;{based-on-misra,cert}
cpp:S2216;Single-bit named bit fields should not be of a signed type;MAJOR;C++;BUG;{based-on-misra}
cpp:S3548;Declarations of functions defined outside of the class should not be marked as inline;MINOR;C++;CODE_SMELL;{clumsy}
cpp:S1006;Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else ;MAJOR;C++;CODE_SMELL;{misra-c++2008,pitfall}
cpp:S859;Casts should not remove const or volatile qualifications from the type;CRITICAL;C++;CODE_SMELL;{cert,misra-c++2008,misra-c2004,misra-c2012,suspicious}
cpp:InvalidEscapeSequence;Only escape sequences defined in the ISO C standard should be used;MAJOR;C++;BUG;{based-on-misra}
cpp:OctalConstantAndSequence;Octal values should not be used;BLOCKER;C++;CODE_SMELL;{based-on-misra,cert,pitfall}
cpp:S1481;Unused local variables should be removed;MINOR;C++;CODE_SMELL;{unused}
cpp:PPIncludeCtime;<ctime> should not be used;CRITICAL;C++;CODE_SMELL;{based-on-misra,lock-in}
cpp:S853;Results of ~ and << operations on operands of underlying types unsigned char and unsigned short should immediately be cast to th;MAJOR;C++;BUG;{based-on-misra,misra}
cpp:S855;Function pointers should not be converted to any other type;MAJOR;C++;BUG;{based-on-misra}
cpp:S854;Constants of unsigned type should have a U suffix;CRITICAL;C++;CODE_SMELL;{based-on-misra,pitfall}
cpp:S978;Reserved identifiers and functions in the standard library should not be defined or declared;BLOCKER;C++;CODE_SMELL;{bad-practice,based-on-misra,cert}
cpp:S977;Lines starting with # should contain valid preprocessing directives;MAJOR;C++;BUG;{based-on-misra,preprocessor}
cpp:S856;Pointer conversions should be restricted to a safe subset;MAJOR;C++;BUG;{based-on-misra}
cpp:GotoLabelInNestedBlock;goto statements should not be used to jump into blocks;BLOCKER;C++;CODE_SMELL;{based-on-misra,brain-overload,pitfall}
cpp:S946;The address of an automatic object should not be assigned to another object that may persist after the first object has ceased t;BLOCKER;C++;BUG;{based-on-misra,cert}
cpp:AssignmentInSubExpression;Assignments should not be made from within sub-expressions;MAJOR;C++;CODE_SMELL;{based-on-misra,cert,cwe,suspicious}
cpp:S1172;Unused function parameters should be removed;MAJOR;C++;CODE_SMELL;{based-on-misra,cert,unused}
cpp:S943;Object declarations should contain no more than 2 levels of pointer indirection;CRITICAL;C++;CODE_SMELL;{based-on-misra,brain-overload,pitfall}
cpp:S824;Functions should not be declared at block scope;MAJOR;C++;CODE_SMELL;{misra-c++2008,misra-c2004}
cpp:S5303;C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used;MINOR;C++;CODE_SMELL;{misra-c++2008}
cpp:S5306;An `if ( condition )` construct shall be followed by a compound statement. The else keyword shall be followed by either a compou;MINOR;C++;CODE_SMELL;{misra-c++2008}
cpp:S5305;The statement forming the body of a switch, while, do … while or for statement shall be a compound statement.;MINOR;C++;CODE_SMELL;{misra-c++2008}
cpp:S1065;Unused labels should be removed;MAJOR;C++;CODE_SMELL;{based-on-misra,cert,unused}
cpp:S2275;Printf-style format strings should not lead to unexpected behavior at runtime;BLOCKER;C++;BUG;{cert,pitfall}
cpp:S5308;Return value of setuid family of functions should always be checked;CRITICAL;C++;CODE_SMELL;{}
cpp:S5307;All if … else if constructs shall be terminated with an else clause;MINOR;C++;CODE_SMELL;{misra-c++2008}
cpp:S5309;Every switch statement shall have at least one case-clause;MINOR;C++;CODE_SMELL;{misra-c++2008}
cpp:S836;Variables should be initialized before use;MAJOR;C++;BUG;{based-on-misra,cwe}
cpp:LiteralSuffix;Literal suffixes shall be upper case;MINOR;C++;CODE_SMELL;{based-on-misra,cert,convention,pitfall}
cpp:S831;Objects or functions with external linkage shall be declared in a header file;MAJOR;C++;CODE_SMELL;{misra-c++2008}
cpp:S833;If a function has internal linkage then all re-declarations shall include the static storage class specifer;MAJOR;C++;CODE_SMELL;{misra-c++2008,misra-c2004,pitfall}
cpp:S835;Braces should be used to indicate and match the structure in the non-zero initialization of arrays and structures;MAJOR;C++;CODE_SMELL;{based-on-misra}
cpp:S834;Array declarations should include an explicit size specification;MAJOR;C++;CODE_SMELL;{based-on-misra,cert}
cpp:S3457;Printf-style format strings should be used correctly;MAJOR;C++;CODE_SMELL;{cert,confusing}
cpp:S1036;Control should not be transferred into a complex logic block using a goto or a switch statement;BLOCKER;C++;CODE_SMELL;{based-on-misra,cert,lock-in,pitfall}
cpp:S1035;An exception object should not have pointer type;CRITICAL;C++;BUG;{misra-c++2008}
cpp:S3696;Non-exception types should not be thrown;MAJOR;C++;CODE_SMELL;{api-design,based-on-misra,error-handling}
cpp:S2486;Exceptions should not be ignored;CRITICAL;C++;VULNERABILITY;{cwe,error-handling,owasp-a10,suspicious}
cpp:S1032;Function templates should not be specialized;BLOCKER;C++;BUG;{based-on-misra}
cpp:DigraphUsage;Digraphs should not be used;BLOCKER;C++;CODE_SMELL;{based-on-misra,obsolete}
cpp:S925;Recursion should not be used;CRITICAL;C++;CODE_SMELL;{bad-practice,based-on-misra,pitfall}
cpp:S926;Parameters in a function prototype should be named;MAJOR;C++;CODE_SMELL;{based-on-misra}
cpp:S920;Switch statement conditions should not have essentially boolean type;MINOR;C++;CODE_SMELL;{misra-c++2008,misra-c2004,misra-c2012}
cpp:FunctionEllipsis;Functions should not be defined with a variable number of arguments;CRITICAL;C++;CODE_SMELL;{cert,misra-c++2008,misra-c2004,pitfall}
cpp:S802;typedef names should be unique identifiers;MAJOR;C++;CODE_SMELL;{based-on-misra,suspicious}
cpp:S1045;Handlers in a single try-catch or function-try-block for a derived class and some or all of its bases should be ordered most-der;MAJOR;C++;BUG;{cert,misra-c++2008}
cpp:S1044;Exception classes should be caught by reference;MAJOR;C++;BUG;{cert,misra-c++2008}
cpp:UnaryAndOverloaded;The unary & operator should not be overloaded;MAJOR;C++;BUG;{misra-c++2008}
cpp:S936;Function names should be used either as a call with a parameter list or with the & operator;CRITICAL;C++;CODE_SMELL;{based-on-misra,suspicious}
cpp:S814;Bit fields should be declared with appropriate types;MAJOR;C++;CODE_SMELL;{based-on-misra,cert,lock-in}
cpp:S935;Function exit paths should have appropriate return values;CRITICAL;C++;BUG;{based-on-misra,cert,cwe}
cpp:S811;The condition of an if-statement and the condition of an iteration-statement shall have type bool;MINOR;C++;CODE_SMELL;{misra-c++2008}
cpp:S810;Appropriate char types should be used for character and integer values;MINOR;C++;CODE_SMELL;{based-on-misra,cert,confusing}
cpp:S813;typedefs that indicate size and signedness should be used in place of the basic types;MINOR;C++;CODE_SMELL;{based-on-misra}
cpp:S812;The first operand of a conditional operator should have type bool;MINOR;C++;CODE_SMELL;{misra-c++2008}
cpp:IdentifierLongerThan31;Identifiers should not be longer than 31 characters;MAJOR;C++;CODE_SMELL;{based-on-misra,cert}
cpp:S905;Non-empty statements should change control flow or have at least one side-effect;MAJOR;C++;BUG;{based-on-misra,cwe,unused}
cpp:UnnamedNamespaceInHeader;Header files should not contain unnamed namespaces;MAJOR;C++;BUG;{based-on-misra,cert,pitfall}
cpp:S2753;Values of different enum types should not be compared;MAJOR;C++;BUG;{}
cpp:S1301;switch statements should have at least 3 case clauses;MINOR;C++;CODE_SMELL;{bad-practice,based-on-misra}
cpp:PPUndefUsage;#undef should not be used;CRITICAL;C++;CODE_SMELL;{based-on-misra,brain-overload}
cpp:SwitchLabelPlacement;Switch labels should not be nested inside non-switch blocks;BLOCKER;C++;CODE_SMELL;{confusing,misra-c++2008,misra-c2004,misra-c2012}
cpp:EnumPartialInitialization;enum members other than the first one should not be explicitly initialized unless all members are explicitly initialized;MAJOR;C++;CODE_SMELL;{based-on-misra}
cpp:SingleDeclarationPerStatement;Init-declarator-lists and member-declarator-lists should consist of single init-declarators and member-declarators respectively;MINOR;C++;CODE_SMELL;{based-on-misra,cert,convention}
cpp:S1763;Jump statements should not be followed by dead code;MAJOR;C++;BUG;{based-on-misra,cert,cwe,unused}
cpp:PPStringifyAndPastingUsage;Preprocessor operators # and ## should not be used;MINOR;C++;CODE_SMELL;{based-on-misra,lock-in}
cpp:S1761;Pre-defined macros should not be defined, redefined or undefined;CRITICAL;C++;CODE_SMELL;{based-on-misra,preprocessor,suspicious}
cpp:S3949;Integral operations should not overflow;MAJOR;C++;BUG;{based-on-misra,cert,misra,misra-c++2008,misra-c2004,misra-c2012,overflow}
cpp:S1767;Pointers should not be cast to integral types;CRITICAL;C++;BUG;{based-on-misra,cert}
cpp:S1219;switch statements should not contain non-case labels;BLOCKER;C++;CODE_SMELL;{based-on-misra,suspicious}
cpp:S1699;Constructors and destructors should only call non-overridable methods;CRITICAL;C++;CODE_SMELL;{cert,pitfall}
cpp:C99CommentUsage;Source code should only use /* ... */ style comments;MINOR;C++;CODE_SMELL;{based-on-misra,convention}
cpp:S1103;/* and // should not be used within comments;MINOR;C++;CODE_SMELL;{based-on-misra,cert,confusing}
cpp:Union;Unions should not be used;CRITICAL;C++;CODE_SMELL;{based-on-misra}
cpp:GlobalNamespaceMembers;The global namespace should only contain main, namespace declarations, and extern C declarations;CRITICAL;C++;CODE_SMELL;{based-on-misra,brain-overload}
cpp:ContinueUsage;continue should not be used;MINOR;C++;CODE_SMELL;{bad-practice,based-on-misra}
cpp:ElseIfWithoutElse;if ... else if constructs should end with else clauses;CRITICAL;C++;CODE_SMELL;{based-on-misra,cert}
cpp:TrigraphUsage;Trigraphs should not be used;BLOCKER;C++;CODE_SMELL;{based-on-misra,cert,obsolete,suspicious}
cpp:S5298;When an array is declared, its size shall either be stated explicitly or defined implicitly by initialization;MAJOR;C++;BUG;{misra-c++2008}
cpp:S5297;GNU attributes should be used correctly;MAJOR;C++;CODE_SMELL;{confusing}
cpp:GotoUsage;goto statement should not be used;MAJOR;C++;CODE_SMELL;{based-on-misra,brain-overload}
cpp:S5293;Format strings should comply with ISO standards;MINOR;C++;CODE_SMELL;{convention}
cpp:S5180;The addresses of standard library functions should not be taken;CRITICAL;C++;BUG;{pitfall}
cpp:S5184;RAII objects should not be temporary;BLOCKER;C++;VULNERABILITY;{suspicious}
cpp:S5278;Size argument of memory functions should be consistent;MAJOR;C++;CODE_SMELL;{suspicious}
cpp:S5277;Return value of nodiscard functions should not be ignored;MAJOR;C++;CODE_SMELL;{suspicious}
cpp:S5279;Unevaluated operands should not have side effects;MAJOR;C++;CODE_SMELL;{based-on-misra,suspicious}
cpp:LogicalExpressionOperands;Operands of && and || should be primary (C) or postfix (C++) expressions;MAJOR;C++;CODE_SMELL;{based-on-misra}
cpp:S5274;Move operations should not interfere with copy elisions;MAJOR;C++;CODE_SMELL;{bad-practice}
cpp:S5273;Appropriate size arguments should be passed to strncat and strlcpy;MAJOR;C++;CODE_SMELL;{suspicious}
cpp:S5275;reinterpret_cast should be used carefully;CRITICAL;C++;BUG;{suspicious}
cpp:S5270;User-defined types should not be passed as variadic arguments;MAJOR;C++;BUG;{suspicious}
cpp:S5272;Moved-from objects should not be relied upon;MAJOR;C++;CODE_SMELL;{cert}
cpp:S5271;Functions which do not return should be declared as noreturn;MINOR;C++;CODE_SMELL;{confusing}
cpp:S5281;Argument of printf should be a format string;CRITICAL;C++;CODE_SMELL;{bad-practice}
cpp:S5280;mktemp family of functions templates should have at least six trailing Xs;CRITICAL;C++;CODE_SMELL;{suspicious}
cpp:S5283;Size of variable length arrays should be positive;CRITICAL;C++;CODE_SMELL;{suspicious}
cpp:GlobalMainFunction;The name main should not be used for any function other than the global main function;BLOCKER;C++;CODE_SMELL;{misra-c++2008,pitfall}
cpp:PPIncludeCstdio;<cstdio> should not be used;CRITICAL;C++;CODE_SMELL;{based-on-misra,lock-in}
cpp:EmptyThrowOutsideHandler;Empty throws (throw) should only be used in the compound statements of catch handlers;CRITICAL;C++;BUG;{based-on-misra}
cpp:PPDefineOrUndefFromBlock;Macros should not be #define'd or #undef'd within a block;CRITICAL;C++;CODE_SMELL;{based-on-misra,pitfall}
cpp:PPIncludeTime;<time.h> should not be used;CRITICAL;C++;CODE_SMELL;{based-on-misra,lock-in}
cpp:CommentedCode;Sections of code should not be commented out;MAJOR;C++;CODE_SMELL;{based-on-misra,unused}
cpp:S1709;explicit should be used on single-parameter constructors and conversion operators;CRITICAL;C++;CODE_SMELL;{based-on-misra}
cpp:S127;for loop stop conditions should be invariant;MAJOR;C++;CODE_SMELL;{based-on-misra,pitfall}
cpp:UsingDirective;using directives should not be used;MINOR;C++;BUG;{based-on-misra,pitfall}
cpp:EllipsisHandlerNotLast;Condition-specific catch handlers should not be used after the ellipsis (catch-all) handler;MAJOR;C++;BUG;{based-on-misra,unused}
cpp:S5213;Template parameters should be preferred to std::function when configuring behavior at compile time;CRITICAL;C++;CODE_SMELL;{bad-practice,performance}
cpp:PPIncludeCHeader;C libraries should not be used;CRITICAL;C++;CODE_SMELL;{misra-c++2008}
cpp:CommaAndOrOverloaded;The comma operator, &&, and || should not be overloaded;CRITICAL;C++;CODE_SMELL;{misra-c++2008}
cpp:S109;Magic numbers should not be used;MAJOR;C++;CODE_SMELL;{brain-overload}
cpp:S121;Control structures should use curly braces;CRITICAL;C++;CODE_SMELL;{based-on-misra,cert,pitfall}
cpp:SideEffectInRightHandSideOfLogical;The right-hand operands of && and || should not contain side effects;BLOCKER;C++;CODE_SMELL;{based-on-misra,cert}
cpp:S2193;for loop counters should not have essentially floating type;MINOR;C++;BUG;{based-on-misra,cert}
cpp:S2190;Recursion should not be infinite;BLOCKER;C++;BUG;{suspicious}
cpp:ExceptionInDestructor;Destructors should not throw exceptions;CRITICAL;C++;BUG;{based-on-misra}
cpp:S5319;The identifiers used for the parameters in a re-declaration or override of a function shall be identical to those in the declara;MINOR;C++;CODE_SMELL;{misra-c++2008}
cpp:S5318;using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header;CRITICAL;C++;CODE_SMELL;{misra-c++2008}
cpp:S5205;Function pointers should not be used as function parameters;MAJOR;C++;CODE_SMELL;{clumsy}
cpp:PPIncludeStdio;<stdio.h> should not be used in production code;CRITICAL;C++;BUG;{based-on-misra,lock-in}
cpp:S1081;Insecure functions strcpy, strcat and sprintf should not be used;CRITICAL;C++;VULNERABILITY;{cert,cwe,owasp-a9,sans-top25-risky}
cpp:S5259;Header guards should be followed by according #define macro;CRITICAL;C++;CODE_SMELL;{unpredictable}
cpp:S793;All uses of the #pragma directive should be documented;MAJOR;C++;CODE_SMELL;{based-on-misra,cert}
cpp:S784;Assembly language should be encapsulated and isolated;MAJOR;C++;CODE_SMELL;{misra-c++2008,misra-c2004}
cpp:ObsoletePosixFunction;Obsolete POSIX functions should not be used;MAJOR;C++;CODE_SMELL;{cert,obsolete}
cpp:S5028;Macros should not be used to define constants;CRITICAL;C++;CODE_SMELL;{bad-practice,clumsy}
cpp:S5267;Functions with noreturn attribute should not return;BLOCKER;C++;BUG;{confusing}
cpp:S5025;Memory should not be managed manually;CRITICAL;C++;CODE_SMELL;{bad-practice,cpp11}
cpp:S5266;Keywords shall not be used as macros identifiers;MAJOR;C++;CODE_SMELL;{based-on-misra,pitfall,unpredictable}
cpp:S5269;Class members should not be initialized with dangling references;MAJOR;C++;BUG;{pitfall}
cpp:PPBadIncludeForm;#include directives should be followed by either <filename> or filename sequences;MAJOR;C++;BUG;{based-on-misra}
cpp:S5263;Logical operators should not be confused with bitwise operators;CRITICAL;C++;CODE_SMELL;{pitfall}
cpp:S5262;Dereferenced null pointers should not be bound to references;MAJOR;C++;CODE_SMELL;{unpredictable}
cpp:S5265;Incomplete types should not be deleted;MAJOR;C++;CODE_SMELL;{unpredictable}
cpp:S5261;else statements should be clearly matched with an if;MAJOR;C++;CODE_SMELL;{confusing}
cpp:PPIncludeNonStandardCharacters;Non-standard characters should not occur in header file names in #include directives;MAJOR;C++;BUG;{based-on-misra}
cpp:FunctionSinglePointOfExit;A function should have a single point of exit at the end of the function;MINOR;C++;CODE_SMELL;{based-on-misra,brain-overload}
cpp:SwitchWithoutDefault;switch statements should have default clauses;CRITICAL;C++;CODE_SMELL;{based-on-misra,cert,cwe}
cpp:PPIncludeNotAtTop;#include directives in a file should only be preceded by other preprocessor directives or comments;MAJOR;C++;CODE_SMELL;{confusing,misra-c++2008,misra-c2004,misra-c2012}
cpp:NonEmptyCaseWithoutBreak;Switch cases should end with an unconditional break statement;BLOCKER;C++;CODE_SMELL;{based-on-misra,cert,cwe,suspicious}
cpp:S886;The three expressions of a for statement should only be concerned with loop control;MAJOR;C++;BUG;{based-on-misra}
cpp:BackJumpWithGoto;goto should jump to labels declared later in the same function;BLOCKER;C++;CODE_SMELL;{based-on-misra,pitfall}
cpp:IncAndDecMixedWithOtherOperators;Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression;MAJOR;C++;CODE_SMELL;{based-on-misra,cert}
cpp:S5008;void * should not be used in function parameters or return type;CRITICAL;C++;CODE_SMELL;{based-on-misra}
cpp:S897;Unused type declarations should be removed;MAJOR;C++;CODE_SMELL;{based-on-misra,unused}
vbnet:S2068;Credentials should not be hard-coded;BLOCKER;VB.NET;VULNERABILITY;{cwe,owasp-a2,sans-top25-porous}
vbnet:S112;General exceptions should never be thrown;MAJOR;VB.NET;CODE_SMELL;{cwe,error-handling}
vbnet:S1659;Multiple variables should not be declared on the same line;MINOR;VB.NET;CODE_SMELL;{convention}
vbnet:S1301;Select statements should have at least 3 Case clauses;MINOR;VB.NET;CODE_SMELL;{bad-practice}
vbnet:S1147;End statements should not be used;BLOCKER;VB.NET;CODE_SMELL;{cwe,suspicious}
vbnet:S1145;Useless if(true) {...} and if(false){...} blocks should be removed;MAJOR;VB.NET;BUG;{cwe}
vbnet:S3776;Cognitive Complexity of functions should not be too high;CRITICAL;VB.NET;CODE_SMELL;{brain-overload}
vbnet:S1075;URIs should not be hardcoded;MINOR;VB.NET;CODE_SMELL;{}
vbnet:S1764;Identical expressions should not be used on both sides of a binary operator;MAJOR;VB.NET;BUG;{}
vbnet:S2178;Short-circuit logic should be used in boolean contexts;BLOCKER;VB.NET;CODE_SMELL;{}
vbnet:S1172;Unused procedure parameters should be removed;MAJOR;VB.NET;CODE_SMELL;{unused}
vbnet:S1862;Related If/ElseIf statements should not have the same condition;MAJOR;VB.NET;BUG;{pitfall,unused}
vbnet:S1226;Method parameters and caught exceptions should not be reassigned;MINOR;VB.NET;BUG;{}
vbnet:S131;Select statements should end with a Case Else clause;CRITICAL;VB.NET;CODE_SMELL;{cwe}
vbnet:S126;If ... ElseIf constructs should end with Else clauses;CRITICAL;VB.NET;CODE_SMELL;{}
vbnet:S1048;Finalizers should not throw exceptions;BLOCKER;VB.NET;BUG;{}
flex:S4524;default clauses should be first or last;CRITICAL;Flex;CODE_SMELL;{}
flex:S1172;Unused function parameters should be removed;MAJOR;Flex;CODE_SMELL;{unused}
flex:S1301;switch statements should have at least 3 case clauses;MINOR;Flex;CODE_SMELL;{bad-practice}
flex:S1145;Useless if(true) {...} and if(false){...} blocks should be removed;MAJOR;Flex;BUG;{cwe}
flex:S3923;All branches in a conditional structure should not have exactly the same implementation;MAJOR;Flex;BUG;{}
flex:S1951;The trace function should not be used;MINOR;Flex;VULNERABILITY;{cwe,owasp-a3}
flex:S1871;Two branches in a conditional structure should not have exactly the same implementation;MAJOR;Flex;CODE_SMELL;{design,suspicious}
flex:FunctionSinglePointOfExit;A function should have a single point of exit at the end of the function;MINOR;Flex;CODE_SMELL;{brain-overload}
flex:SwitchWithoutDefault;switch statements should end with default clauses;CRITICAL;Flex;CODE_SMELL;{cwe}
flex:S1117;Local variables should not shadow class fields;MAJOR;Flex;CODE_SMELL;{pitfall,suspicious}
flex:S1314;Octal values should not be used;BLOCKER;Flex;CODE_SMELL;{pitfall}
flex:S1116;Empty statements should be removed;MINOR;Flex;CODE_SMELL;{unused}
flex:CommentedCode;Sections of code should not be commented out;MAJOR;Flex;CODE_SMELL;{unused}
flex:NonEmptyCaseWithoutBreak;Switch cases should end with an unconditional break statement;BLOCKER;Flex;CODE_SMELL;{cwe,suspicious}
flex:S127;for loop stop conditions should be invariant;MAJOR;Flex;CODE_SMELL;{pitfall}
flex:S1444;public static fields should be constant;MINOR;Flex;VULNERABILITY;{cwe}
flex:S1442;Alert.show(...) should not be used;MINOR;Flex;VULNERABILITY;{cwe,owasp-a3,user-experience}
vbnet:S1656;Variables should not be self-assigned;MAJOR;VB.NET;BUG;{}
plsql:DeleteOrUpdateWithoutWhereCheck;DELETE and UPDATE statements should contain WHERE clauses;BLOCKER;PL/SQL;BUG;{sql}
squid:S3553;Optional should not be used for parameters;MAJOR;Java;CODE_SMELL;{clumsy}
squid:S1118;Utility classes should not have public constructors;MAJOR;Java;CODE_SMELL;{design}
squid:UselessImportCheck;Useless imports should be removed;MINOR;Java;CODE_SMELL;{unused}
squid:S1126;Return of boolean expressions should not be wrapped into an if-then-else statement;MINOR;Java;CODE_SMELL;{clumsy}
squid:S2699;Tests should include assertions;BLOCKER;Java;CODE_SMELL;{tests}
squid:S2129;Constructors should not be used to instantiate String, BigInteger, BigDecimal and primitive-wrapper classes;MAJOR;Java;CODE_SMELL;{performance}
squid:S2639;Inappropriate regular expressions should not be used;MAJOR;Java;BUG;{}
squid:S3864;Stream.peek should not be used;MAJOR;Java;CODE_SMELL;{java8,pitfall}
squid:S2924;JUnit rules should be used;MINOR;Java;CODE_SMELL;{tests,unused}
squid:S2175;Inappropriate Collection calls should not be made;MAJOR;Java;BUG;{cert}
squid:S5128;Bean Validation (JSR 380) should be properly configured;CRITICAL;Java;CODE_SMELL;{}
php:S2053;Hashes should include an unpredictable salt;CRITICAL;PHP;VULNERABILITY;{cwe,owasp-a3,sans-top25-porous}
php:S2001;Deprecated features should not be used;MAJOR;PHP;CODE_SMELL;{obsolete}
php:S4823;Using command line arguments is security-sensitive;CRITICAL;PHP;VULNERABILITY;{cwe,owasp-a1,sans-top25-insecure}
javascript:S1143;Jump statements should not occur in finally blocks;CRITICAL;JavaScript;BUG;{cert,cwe,error-handling}
javascript:S2737;catch clauses should do more than rethrow;MINOR;JavaScript;CODE_SMELL;{clumsy,error-handling,finding,unused}
javascript:S3402;Strings and non-strings should not be added;MINOR;JavaScript;CODE_SMELL;{confusing}
javascript:S3523;Function constructors should not be used;CRITICAL;JavaScript;CODE_SMELL;{}
javascript:TrailingComma;Trailing commas should not be used;MINOR;JavaScript;CODE_SMELL;{cross-browser}
javascript:S4829;Reading the Standard Input is security-sensitive;CRITICAL;JavaScript;VULNERABILITY;{cwe}
javascript:S3984;Errors should not be created without being thrown;MAJOR;JavaScript;BUG;{error-handling}
c:S1760;Keywords introduced in later specifications should not be used as identifiers;BLOCKER;C;CODE_SMELL;{}
cpp:NamespaceName;Namespace names should comply with a naming convention;MINOR;C++;CODE_SMELL;{convention}
cpp:S1231;new and delete should be used;CRITICAL;C++;CODE_SMELL;{leak,suspicious}
cpp:S1669;Context-sensitive keywords should not be used as identifiers;BLOCKER;C++;CODE_SMELL;{pitfall}
cpp:S1760;Keywords introduced in later specifications should not be used as identifiers;BLOCKER;C++;CODE_SMELL;{}
cpp:ExceptionSpecificationUsage;Exception specifications should not be used;CRITICAL;C++;CODE_SMELL;{clumsy,error-handling}
vbnet:S1135;Track uses of TODO tags;INFO;VB.NET;CODE_SMELL;{cwe}
vbnet:S1134;Track uses of FIXME tags;MAJOR;VB.NET;CODE_SMELL;{cwe}
vbnet:S107;Procedures should not have too many parameters;MAJOR;VB.NET;CODE_SMELL;{brain-overload}
vbnet:S108;Nested blocks of code should not be left empty;MAJOR;VB.NET;CODE_SMELL;{suspicious}
vbnet:S2234;Parameters should be passed in the correct order;MAJOR;VB.NET;CODE_SMELL;{}
vbnet:S1110;Redundant pairs of parentheses should be removed;MAJOR;VB.NET;CODE_SMELL;{confusing}
vbnet:S1125;Boolean literals should not be redundant;MINOR;VB.NET;CODE_SMELL;{clumsy}
vbnet:S2551;Types and Me should not be used for locking;CRITICAL;VB.NET;BUG;{multi-threading}
vbnet:S1066;Collapsible if statements should be merged;MAJOR;VB.NET;CODE_SMELL;{clumsy}
vbnet:S1151;Select...Case clauses should not have too many lines of code;MAJOR;VB.NET;CODE_SMELL;{brain-overload}
vbnet:S138;Procedures should not have too many lines of code;MAJOR;VB.NET;CODE_SMELL;{brain-overload}
typescript:S2068;Credentials should not be hard-coded;BLOCKER;TypeScript;VULNERABILITY;{cert,cwe,owasp-a2,sans-top25-porous}
typescript:S107;Functions should not have too many parameters;MAJOR;TypeScript;CODE_SMELL;{brain-overload}
typescript:S2234;Parameters should be passed in the correct order;MAJOR;TypeScript;CODE_SMELL;{}
typescript:S1143;Jump statements should not occur in finally blocks;CRITICAL;TypeScript;BUG;{cert,cwe,error-handling}
typescript:S2871;A compare function should be provided when using Array.prototype.sort();CRITICAL;TypeScript;BUG;{bad-practice}
typescript:S1821;switch statements should not be nested;CRITICAL;TypeScript;CODE_SMELL;{pitfall}
typescript:S1751;Loops with at most one iteration should be refactored;MAJOR;TypeScript;BUG;{}
typescript:S1479;switch statements should not have too many case clauses;MAJOR;TypeScript;CODE_SMELL;{brain-overload}
typescript:S1192;String literals should not be duplicated;CRITICAL;TypeScript;CODE_SMELL;{design}
typescript:S1764;Identical expressions should not be used on both sides of a binary operator;MAJOR;TypeScript;BUG;{cert}
typescript:S2737;catch clauses should do more than rethrow;MINOR;TypeScript;CODE_SMELL;{clumsy,error-handling,finding,unused}
typescript:S1523;Code should not be dynamically injected and executed;CRITICAL;TypeScript;VULNERABILITY;{cwe,owasp-a1,owasp-a7}
typescript:S4322;Type guards should be used;MINOR;TypeScript;CODE_SMELL;{proficiency}
objc:S990;abort, exit, getenv and system from <stdlib.h> should not be used;CRITICAL;Objective-C;BUG;{based-on-misra,cert}
typescript:S4822;Promise rejections should not be caught by 'try' block;MAJOR;TypeScript;BUG;{}
typescript:S4798;Optional boolean parameters should have default value;MAJOR;TypeScript;CODE_SMELL;{}
typescript:S3984;Errors should not be created without being thrown;MAJOR;TypeScript;BUG;{error-handling}
typescript:S4158;Empty collections should not be accessed or iterated;MINOR;TypeScript;BUG;{}
plsql:S104;Files should not have too many lines of code;MAJOR;PL/SQL;CODE_SMELL;{brain-overload}
plsql:S1940;Boolean checks should not be inverted;MINOR;PL/SQL;CODE_SMELL;{pitfall}
plsql:S1703;%TYPE and %ROWTYPE should not be used in package specification;CRITICAL;PL/SQL;CODE_SMELL;{}
plsql:S1751;Jump statements should not be used unconditionally;MAJOR;PL/SQL;BUG;{}
plsql:S1871;Two branches in a conditional structure should not have exactly the same implementation;MAJOR;PL/SQL;CODE_SMELL;{design,suspicious}
plsql:S3651;Individual WHERE clause conditions should not be unconditionally true or false;CRITICAL;PL/SQL;BUG;{sql}
plsql:LiteralsNonPrintableCharactersCheck;Newline and control characters should not be used in string literals;CRITICAL;PL/SQL;CODE_SMELL;{pitfall}
plsql:S5047;TO_NUMBER should be used with a format model;MAJOR;PL/SQL;CODE_SMELL;{}
plsql:S2737;EXCEPTION WHEN ... THEN clauses should do more than RAISE;MINOR;PL/SQL;CODE_SMELL;{clumsy,error-handling,finding,unused}
plsql:MaskedExceptionCheck;Exceptions should not be ignored;CRITICAL;PL/SQL;VULNERABILITY;{cwe,error-handling,owasp-a10,suspicious}
plsql:S4196;Output parameters should be assigned;MAJOR;PL/SQL;BUG;{pitfall}
plsql:S1451;Track lack of copyright and license headers;BLOCKER;PL/SQL;CODE_SMELL;{}
plsql:S1854;Dead stores should be removed;MAJOR;PL/SQL;CODE_SMELL;{cert,cwe,unused}
plsql:S1172;Unused procedure and function parameters should be removed;MAJOR;PL/SQL;CODE_SMELL;{cert,misra,unused}
plsql:S3641;Nullable subqueries should not be used in NOT IN conditions;CRITICAL;PL/SQL;BUG;{sql}
plsql:S4575;TO_DATE should be used with a datetime model format;MAJOR;PL/SQL;CODE_SMELL;{}
plsql:S5141;SQL JOIN conditions should involve all joined tables;CRITICAL;PL/SQL;CODE_SMELL;{}
plsql:S2761;Unary prefix operators should not be repeated;MAJOR;PL/SQL;BUG;{}
plsql:S131;CASE expressions should end with ELSE clauses;CRITICAL;PL/SQL;CODE_SMELL;{cert,cwe,misra}
plsql:S3618;Inserts should include values for non-null columns;BLOCKER;PL/SQL;BUG;{sql}
plsql:S5245;Identifiers should be written in lower case;MINOR;PL/SQL;CODE_SMELL;{convention}
plsql:S3626;Jump statements should not be redundant;MINOR;PL/SQL;CODE_SMELL;{clumsy,redundant}
objc:S2342;Enumeration names should comply with a naming convention;MINOR;Objective-C;CODE_SMELL;{convention}
objc:S2479;Control characters should not be used in literals;CRITICAL;Objective-C;CODE_SMELL;{pitfall}
objc:S1143;return statements should not occur in finally blocks;CRITICAL;Objective-C;BUG;{cert,cwe,error-handling}
objc:S1141;Try-catch blocks should not be nested;MAJOR;Objective-C;CODE_SMELL;{confusing,error-handling}
objc:S1706;Exceptions should not be used;MAJOR;Objective-C;CODE_SMELL;{}
objc:S1854;Dead stores should be removed;MAJOR;Objective-C;CODE_SMELL;{cert,cwe,unused}
objc:S1749;Type specifiers should be listed in a standard order;MINOR;Objective-C;CODE_SMELL;{}
objc:S3923;All branches in a conditional structure should not have exactly the same implementation;MAJOR;Objective-C;BUG;{}
objc:S3222;Label names should comply with a naming convention;MINOR;Objective-C;CODE_SMELL;{convention}
objc:ClassName;Class names should comply with a naming convention;MINOR;Objective-C;CODE_SMELL;{convention}
objc:S1751;Loops with at most one iteration should be refactored;MAJOR;Objective-C;BUG;{}
objc:S1871;Two branches in a conditional structure should not have exactly the same implementation;MAJOR;Objective-C;CODE_SMELL;{design,suspicious}
objc:S1079;scanf() and fscanf() format strings should specify a field width for the %s string placeholder;CRITICAL;Objective-C;VULNERABILITY;{cwe,injection,sans-top25-risky}
objc:S1878;union names should comply with a naming convention;MINOR;Objective-C;CODE_SMELL;{convention}
objc:S1764;Identical expressions should not be used on both sides of a binary operator;MAJOR;Objective-C;BUG;{cert}
objc:S1642;struct names should comply with a naming convention;MINOR;Objective-C;CODE_SMELL;{convention}
objc:S2737;catch clauses should do more than rethrow;MINOR;Objective-C;CODE_SMELL;{clumsy,error-handling,finding,unused}
objc:S3973;A conditionally executed single line should be denoted by indentation;CRITICAL;Objective-C;CODE_SMELL;{confusing,suspicious}
objc:S1448;Classes should not have too many methods;MAJOR;Objective-C;CODE_SMELL;{brain-overload}
objc:S5000;memcmp should only be called with pointers to trivially copyable types with no padding;BLOCKER;Objective-C;BUG;{unpredictable}
squid:S3551;Overrides should match their parent class methods in synchronization;MAJOR;Java;BUG;{cert,multi-threading}
squid:S2235;IllegalMonitorStateException should not be caught;CRITICAL;Java;CODE_SMELL;{error-handling,multi-threading}
squid:S1143;Jump statements should not occur in finally blocks;CRITICAL;Java;BUG;{cert,cwe,error-handling}
squid:S1141;Try-catch blocks should not be nested;MAJOR;Java;CODE_SMELL;{confusing,error-handling}
squid:S2689;Files opened in append mode should not be used with ObjectOutputStream;BLOCKER;Java;BUG;{serialization}
objc:PPIncludeSignal;<signal.h> should not be used;CRITICAL;Objective-C;BUG;{based-on-misra,lock-in}
squid:S3658;Unit tests should throw exceptions;MINOR;Java;CODE_SMELL;{clumsy,error-handling,tests}
squid:S4517;InputSteam.read() implementation should not return a signed byte;MAJOR;Java;BUG;{}
squid:S2142;InterruptedException should not be ignored;MAJOR;Java;BUG;{cwe,error-handling,multi-threading}
squid:S4682;@CheckForNull or @Nullable should not be used on primitive types;MINOR;Java;CODE_SMELL;{}
squid:UndocumentedApi;Public types, methods and fields (API) should be documented with Javadoc;MAJOR;Java;CODE_SMELL;{convention}
squid:S2272;Iterator.next() methods should throw NoSuchElementException;MINOR;Java;BUG;{error-handling,unpredictable}
squid:S2139;Exceptions should be either logged or rethrown but not both;MAJOR;Java;CODE_SMELL;{clumsy,error-handling}
squid:S1161;@Override should be used on overriding and implementing methods;MAJOR;Java;CODE_SMELL;{bad-practice}
squid:S2629;Preconditions and logging arguments should not require evaluation;MAJOR;Java;CODE_SMELL;{performance}
squid:S4926;serialVersionUID should not be declared blindly;MINOR;Java;CODE_SMELL;{pitfall,serialization}
squid:S4929;read(byte[],int,int) should be overridden;MINOR;Java;CODE_SMELL;{performance}
squid:S4925;Class.forName() should not load JDBC 4.0+ drivers;MAJOR;Java;CODE_SMELL;{obsolete}
squid:S1751;Loops with at most one iteration should be refactored;MAJOR;Java;BUG;{}
squid:S2737;catch clauses should do more than rethrow;MINOR;Java;CODE_SMELL;{clumsy,error-handling,finding,unused}
squid:S3822;Hibernate should not update database schemas;CRITICAL;Java;BUG;{hibernate,sql}
squid:S1698;== and != should not be used when equals is overridden;MINOR;Java;CODE_SMELL;{cert,cwe,suspicious}
squid:S1695;NullPointerException should not be explicitly thrown;MAJOR;Java;CODE_SMELL;{error-handling,pitfall}
squid:S1217;Thread.run() should not be called directly;MAJOR;Java;BUG;{cert,cwe,multi-threading}
squid:S3878;Arrays should not be created for varargs parameters;MINOR;Java;CODE_SMELL;{clumsy}
squid:S4973;Strings and Boxed types should be compared using equals();MAJOR;Java;BUG;{cert,cwe}
squid:S4738;Java 8 features should be preferred to Guava;MAJOR;Java;CODE_SMELL;{guava,java8}
squid:S3984;Exception should not be created without being thrown;MAJOR;Java;BUG;{error-handling}
squid:S4838;An iteration on a Collection should be performed on the type handled by the Collection;MINOR;Java;CODE_SMELL;{bad-practice,clumsy}
squid:S4719;StandardCharsets constants should be preferred;MINOR;Java;CODE_SMELL;{clumsy,java7}
squid:S3032;JEE applications should not getClassLoader;MINOR;Java;BUG;{jee}
squid:S2183;Ints and longs should not be shifted by zero or more than their number of bits-1;MINOR;Java;BUG;{}
squid:S2166;Classes named like Exception should extend Exception or a subclass;MAJOR;Java;CODE_SMELL;{convention,error-handling,pitfall}
squid:S3014;ThreadGroup should not be used;BLOCKER;Java;CODE_SMELL;{cert,design,suspicious}
squid:RedundantThrowsDeclarationCheck;throws declarations should not be superfluous;MINOR;Java;CODE_SMELL;{clumsy,error-handling,redundant,unused}
squid:S3077;Non-primitive fields should not be volatile;MINOR;Java;BUG;{cert,multi-threading}
squid:S3078;volatile variables should not be used with compound operators;MAJOR;Java;BUG;{cert,multi-threading}
squid:S3065;Min and max used in combination should not always return the same value;MAJOR;Java;BUG;{}
php:S4529;Exposing HTTP endpoints is security-sensitive;CRITICAL;PHP;VULNERABILITY;{cwe,owasp-a1,owasp-a3,owasp-a7,sans-top25-insecure,sans-top25-porous,sans-top25-risky,spring}
php:S2077;Executing SQL queries is security-sensitive;CRITICAL;PHP;VULNERABILITY;{cert,cwe,owasp-a1,sans-top25-insecure,sql}
php:S4817;Executing XPath expressions is security-sensitive;CRITICAL;PHP;VULNERABILITY;{cert,cwe,owasp-a1}
php:S4818;Using Sockets is security-sensitive;CRITICAL;PHP;VULNERABILITY;{cwe,owasp-a1,owasp-a3,sans-top25-porous,sans-top25-risky}
php:S2070;SHA-1 and Message-Digest hash algorithms should not be used in secure contexts;CRITICAL;PHP;VULNERABILITY;{cwe,owasp-a6,sans-top25-porous,spring}
php:S1751;Loops with at most one iteration should be refactored;MAJOR;PHP;BUG;{}
php:S3011;Changing or bypassing accessibility is security-sensitive;CRITICAL;PHP;VULNERABILITY;{cert,owasp-a3}
php:S4507;Delivering code in production with debug features activated is security-sensitive;CRITICAL;PHP;VULNERABILITY;{cwe,owasp-a3}
php:S2737;catch clauses should do more than rethrow;MINOR;PHP;CODE_SMELL;{clumsy,error-handling,finding,unused}
php:S1523;Dynamically executing code is security-sensitive;CRITICAL;PHP;VULNERABILITY;{cwe,owasp-a1,owasp-a7}
php:S4721;Executing OS commands is security-sensitive;CRITICAL;PHP;VULNERABILITY;{cwe,sans-top25-insecure}
php:S1854;Dead stores should be removed;MAJOR;PHP;CODE_SMELL;{cert,cwe,unused}
php:S4787;Encrypting data is security-sensitive;CRITICAL;PHP;VULNERABILITY;{cwe,owasp-a3,owasp-a6,sans-top25-porous}
php:S4423;Weak SSL protocols should not be used;MAJOR;PHP;VULNERABILITY;{cwe,owasp-a3,owasp-a6,sans-top25-porous}
php:S2245;Using pseudorandom number generators (PRNGs) is security-sensitive;CRITICAL;PHP;VULNERABILITY;{cert,cwe,owasp-a3}
php:S4784;Using regular expressions is security-sensitive;CRITICAL;PHP;VULNERABILITY;{cwe,owasp-a1,sans-top25-porous}
php:S4828;Signalling processes is security-sensitive;CRITICAL;PHP;VULNERABILITY;{cwe}
php:S4829;Reading the Standard Input is security-sensitive;CRITICAL;PHP;VULNERABILITY;{cwe}
php:S4825;Sending HTTP requests is security-sensitive;CRITICAL;PHP;VULNERABILITY;{cwe,owasp-a1,owasp-a3}
php:S4830;SSL/TLS certificates chain of trust verification should not be disabled;CRITICAL;PHP;VULNERABILITY;{ssl}
php:S4797;Handling files is security-sensitive;CRITICAL;PHP;VULNERABILITY;{cert,cwe,owasp-a1,owasp-a3,sans-top25-porous,sans-top25-risky}
php:S4833;Use of namespaces should be preferred to include or require functions;MAJOR;PHP;CODE_SMELL;{drupal}
php:S3984;Exception should not be created without being thrown;MAJOR;PHP;BUG;{error-handling}
php:S2255;Using cookies is security-sensitive;MINOR;PHP;VULNERABILITY;{cert,cwe,owasp-a1,owasp-a3,sans-top25-porous}
php:S3626;Jump statements should not be redundant;MINOR;PHP;CODE_SMELL;{clumsy,redundant}
php:S4834;Controlling permissions is security-sensitive;CRITICAL;PHP;VULNERABILITY;{owasp-a5,sans-top25-porous}
php:S4790;Hashing data is security-sensitive;CRITICAL;PHP;VULNERABILITY;{cwe,owasp-a3,sans-top25-porous}
php:S4792;Configuring loggers is security-sensitive;CRITICAL;PHP;VULNERABILITY;{cwe,owasp-a10,owasp-a3,sans-top25-porous}
php:S2092;Creating cookies without the secure flag is security-sensitive;MINOR;PHP;VULNERABILITY;{cwe,owasp-a2,owasp-a3,sans-top25-porous}
cobol:S2589;Boolean expressions should not be gratuitous;MAJOR;COBOL;CODE_SMELL;{cert,cwe,misra,redundant}
cobol:S1134;Track uses of FIXME tags;MAJOR;COBOL;CODE_SMELL;{cwe}
cobol:S1135;Track uses of TODO tags;INFO;COBOL;CODE_SMELL;{cwe}
cobol:S4882;OCCURS DEPENDING ON should be used with a minimum value;MAJOR;COBOL;CODE_SMELL;{pitfall}
cobol:S4884;Paragraphs used by a PERFORM statement should not contain GO TO;CRITICAL;COBOL;BUG;{pitfall}
cobol:S4883;GO TO DEPENDING ON should not be used;CRITICAL;COBOL;CODE_SMELL;{}
cobol:S1300;Sections should not have too many lines of code;MAJOR;COBOL;CODE_SMELL;{brain-overload}
cobol:S3688;Track uses of disallowed modules;INFO;COBOL;CODE_SMELL;{}
cobol:WhereClauseLinesCheck;WHERE clauses should not contain too many lines of code;MAJOR;COBOL;CODE_SMELL;{brain-overload,performance,sql}
cobol:S1871;Two branches in a conditional structure should not have exactly the same implementation;MAJOR;COBOL;CODE_SMELL;{design,suspicious}
cobol:S1764;Identical expressions should not be used on both sides of a binary operator;MAJOR;COBOL;BUG;{cert}
cobol:COBOL.ParagraphOrSectionLinesCheck;Paragraphs should not have too many lines of code;MAJOR;COBOL;CODE_SMELL;{brain-overload}
cobol:S2269;Obsolete keywords should not be used;MINOR;COBOL;CODE_SMELL;{obsolete}
cobol:S4727;Unused condition names should be removed;MAJOR;COBOL;CODE_SMELL;{unused}
cobol:SQL.DynamicSqlCheck;SQL statements should not contain dynamic clauses;BLOCKER;COBOL;VULNERABILITY;{cwe,owasp-a1,sans-top25-insecure,sql}
cobol:S3923;All branches in a conditional structure should not have exactly the same implementation;MAJOR;COBOL;BUG;{}
cobol:S1745;INSERT statements should explicitly list the columns to be set;CRITICAL;COBOL;CODE_SMELL;{sql}
cobol:S3767;SQL statements should not use CAST(... AS CHAR/VARCHAR);MAJOR;COBOL;CODE_SMELL;{}
cobol:S4054;Queries that use FETCH FIRST should have an ORDER BY;MAJOR;COBOL;BUG;{sql}
cobol:COBOL.StopRunUsageCheck;STOP RUN or GOBACK should be the last statement of a sequence;MAJOR;COBOL;BUG;{unused}
cobol:S124;Track comments matching a regular expression;MAJOR;COBOL;CODE_SMELL;{}
cobol:S1966;Alphanumeric values should not be moved to numeric fields;CRITICAL;COBOL;BUG;{cwe}
tsql:S3650;WHERE clauses should not contain redundant conditions;MAJOR;T-SQL;BUG;{sql}
tsql:S2737;CATCH clauses should do more than rethrow;MINOR;T-SQL;CODE_SMELL;{clumsy,error-handling,finding,unused}
c:S2342;Enumeration names should comply with a naming convention;MINOR;C;CODE_SMELL;{convention}
c:S2479;Control characters should not be used in literals;CRITICAL;C;CODE_SMELL;{pitfall}
c:S1854;Dead stores should be removed;MAJOR;C;CODE_SMELL;{cert,cwe,unused}
c:S1749;Type specifiers should be listed in a standard order;MINOR;C;CODE_SMELL;{}
c:S3923;All branches in a conditional structure should not have exactly the same implementation;MAJOR;C;BUG;{}
c:S3222;Label names should comply with a naming convention;MINOR;C;CODE_SMELL;{convention}
c:S1751;Loops with at most one iteration should be refactored;MAJOR;C;BUG;{}
c:S1871;Two branches in a conditional structure should not have exactly the same implementation;MAJOR;C;CODE_SMELL;{design,suspicious}
c:S1079;scanf() and fscanf() format strings should specify a field width for the %s string placeholder;CRITICAL;C;VULNERABILITY;{cwe,injection,sans-top25-risky}
c:S1878;union names should comply with a naming convention;MINOR;C;CODE_SMELL;{convention}
c:S1764;Identical expressions should not be used on both sides of a binary operator;MAJOR;C;BUG;{cert}
c:S1642;struct names should comply with a naming convention;MINOR;C;CODE_SMELL;{convention}
c:S3973;A conditionally executed single line should be denoted by indentation;CRITICAL;C;CODE_SMELL;{confusing,suspicious}
c:S5000;memcmp should only be called with pointers to trivially copyable types with no padding;BLOCKER;C;BUG;{unpredictable}
cpp:S2342;Enumeration names should comply with a naming convention;MINOR;C++;CODE_SMELL;{convention}
cpp:S2479;Control characters should not be used in literals;CRITICAL;C++;CODE_SMELL;{pitfall}
cpp:S1141;Try-catch blocks should not be nested;MAJOR;C++;CODE_SMELL;{confusing,error-handling}
cpp:S1706;Exceptions should not be used;MAJOR;C++;CODE_SMELL;{}
cpp:S3654;Destructors should be noexcept;BLOCKER;C++;BUG;{cpp11,error-handling}
cpp:S4998;Function parameters should not be of type std::unique_ptr<T> const &;MAJOR;C++;CODE_SMELL;{bad-practice,clumsy,cpp11,design}
cpp:S4997;std::auto_ptr should not be used;BLOCKER;C++;BUG;{cpp11,suspicious}
cpp:S4999;memcpy, memmove, and memset should only be called with pointers to trivially copyable types;BLOCKER;C++;BUG;{}
cpp:S1854;Dead stores should be removed;MAJOR;C++;CODE_SMELL;{cert,cwe,unused}
cpp:S3470;Standard namespaces should not be modified;CRITICAL;C++;CODE_SMELL;{cert,cpp11}
cpp:S2156;final classes should not have protected members;MINOR;C++;CODE_SMELL;{confusing,cpp11}
cpp:S1749;Type specifiers should be listed in a standard order;MINOR;C++;CODE_SMELL;{}
cpp:S3923;All branches in a conditional structure should not have exactly the same implementation;MAJOR;C++;BUG;{}
cpp:S3468;Function declarations that look like variable declarations should not be used;MAJOR;C++;BUG;{cert}
cpp:S3222;Label names should comply with a naming convention;MINOR;C++;CODE_SMELL;{convention}
cpp:S1771;A struct should not have member functions;MAJOR;C++;CODE_SMELL;{pitfall}
cpp:ClassName;Class names should comply with a naming convention;MINOR;C++;CODE_SMELL;{convention}
cpp:S1751;Loops with at most one iteration should be refactored;MAJOR;C++;BUG;{}
cpp:S1871;Two branches in a conditional structure should not have exactly the same implementation;MAJOR;C++;CODE_SMELL;{design,suspicious}
cpp:S1079;scanf() and fscanf() format strings should specify a field width for the %s string placeholder;CRITICAL;C++;VULNERABILITY;{cwe,injection,sans-top25-risky}
cpp:S1878;union names should comply with a naming convention;MINOR;C++;CODE_SMELL;{convention}
cpp:S3252;static base class members should not be accessed via derived types;CRITICAL;C++;CODE_SMELL;{confusing}
cpp:S1764;Identical expressions should not be used on both sides of a binary operator;MAJOR;C++;BUG;{cert}
cpp:S1642;struct names should comply with a naming convention;MINOR;C++;CODE_SMELL;{convention}
cpp:S2737;catch clauses should do more than rethrow;MINOR;C++;CODE_SMELL;{clumsy,error-handling,finding,unused}
cpp:S5018;Move operations should be noexcept;BLOCKER;C++;BUG;{cpp11,error-handling}
cpp:S4963;The Rule-of-Zero should be followed;CRITICAL;C++;CODE_SMELL;{cert,leak}
cpp:S4962;nullptr should be used to denote the null pointer;CRITICAL;C++;CODE_SMELL;{bad-practice,cpp11}
cpp:S5019;Lambdas that capture this should capture everything explicitly;CRITICAL;C++;CODE_SMELL;{confusing,cpp11,pitfall}
cpp:S5020;srand, rand and random_shuffle should not be used;BLOCKER;C++;BUG;{cpp11,user-experience}
cpp:S3973;A conditionally executed single line should be denoted by indentation;CRITICAL;C++;CODE_SMELL;{confusing,suspicious}
cpp:S3624;When the Rule-of-Zero is not applicable, the Rule-of-Five should be followed;CRITICAL;C++;BUG;{cert,leak}
cpp:S5000;memcmp should only be called with pointers to trivially copyable types with no padding;BLOCKER;C++;BUG;{unpredictable}
swift:S2068;Credentials should not be hard-coded;BLOCKER;Swift;VULNERABILITY;{cert,cwe,owasp-a2,sans-top25-porous}
swift:S1659;Multiple variables should not be declared on the same line;MINOR;Swift;CODE_SMELL;{cert,convention,misra}
swift:S2070;SHA-1 and Message-Digest hash algorithms should not be used in secure contexts;CRITICAL;Swift;VULNERABILITY;{cwe,owasp-a6,sans-top25-porous,spring}
swift:S2737;catch clauses should do more than rethrow;MINOR;Swift;CODE_SMELL;{clumsy,error-handling,finding,unused}
vbnet:S1751;Loops with at most one iteration should be refactored;MAJOR;VB.NET;BUG;{}
vbnet:S4586;Non-async Task/Task<T> methods should not return null;CRITICAL;VB.NET;BUG;{}
vbnet:S2737;catch clauses should do more than rethrow;MINOR;VB.NET;CODE_SMELL;{clumsy,error-handling,finding,unused}
plsql:S1135;Track uses of TODO tags;INFO;PL/SQL;CODE_SMELL;{cwe}
plsql:S1134;Track uses of FIXME tags;MAJOR;PL/SQL;CODE_SMELL;{cwe}
plsql:S4801;SELECT statements used as argument of EXISTS statements should be selective;CRITICAL;PL/SQL;CODE_SMELL;{}
plsql:S1656;Variables and columns should not be self-assigned;MAJOR;PL/SQL;BUG;{cert}
plsql:S2070;SHA-1 and Message-Digest hash algorithms should not be used in secure contexts;CRITICAL;PL/SQL;VULNERABILITY;{cwe,owasp-a6,sans-top25-porous,spring}
plsql:S4584;CREATE_TIMER should not be used;MAJOR;PL/SQL;CODE_SMELL;{performance}
plsql:NestedCommentsCheck;Comments should not be nested;MINOR;PL/SQL;CODE_SMELL;{cert,confusing,misra}
plsql:S1764;Identical expressions should not be used on both sides of a binary operator;MAJOR;PL/SQL;BUG;{cert}
plsql:S1523;Dynamically executing code is security-sensitive;CRITICAL;PL/SQL;VULNERABILITY;{cwe,owasp-a1,owasp-a7}
plsql:UnionUsageCheck;UNION should be used with caution;MAJOR;PL/SQL;CODE_SMELL;{performance,sql}
plsql:VariableHiding;Variables should not be shadowed;CRITICAL;PL/SQL;CODE_SMELL;{cert,misra,suspicious}
plsql:S4577;SYNCHRONIZE should not be used;BLOCKER;PL/SQL;BUG;{performance}
plsql:S1862;Related IF/ELSIF statements and WHEN clauses in a CASE should not have the same condition;MAJOR;PL/SQL;BUG;{cert,pitfall,unused}
plsql:S2278;Neither DES (Data Encryption Standard) nor DESede (3DES) should be used;BLOCKER;PL/SQL;VULNERABILITY;{cert,cwe,owasp-a6,sans-top25-porous}
plsql:UnusedLabel;Unused labels should be removed;MAJOR;PL/SQL;CODE_SMELL;{cert,misra,unused}
plsql:S3643;LIKE clauses should not be used without wildcards;CRITICAL;PL/SQL;CODE_SMELL;{sql}
plsql:S4576;FORMS_DDL('COMMIT') and FORMS_DDL('ROLLBACK') should not be used;CRITICAL;PL/SQL;BUG;{}
plsql:S3923;All branches in a conditional structure should not have exactly the same implementation;MAJOR;PL/SQL;BUG;{}
plsql:S1745;INSERT statements should explicitly list the columns to be set;CRITICAL;PL/SQL;CODE_SMELL;{sql}
plsql:S4421;Features deprecated in Oracle 12 should not be used;MAJOR;PL/SQL;CODE_SMELL;{obsolete}
plsql:S125;Sections of code should not be commented out;MAJOR;PL/SQL;CODE_SMELL;{misra,unused}
plsql:S126;IF ... ELSEIF constructs should end with ELSE clauses;CRITICAL;PL/SQL;CODE_SMELL;{cert,misra}
plsql:DeadCodeCheck;Jump statements should not be followed by dead code;MAJOR;PL/SQL;BUG;{cert,cwe,misra,unused}
abap:S3923;All branches in a conditional structure should not have exactly the same implementation;MAJOR;ABAP;BUG;{}
abap:S1871;Two branches in a conditional structure should not have exactly the same implementation;MAJOR;ABAP;CODE_SMELL;{design,suspicious}
abap:S3626;Jump statements should not be redundant;MINOR;ABAP;CODE_SMELL;{clumsy,redundant}
squid:S00107;Methods should not have too many parameters;MAJOR;Java;CODE_SMELL;{brain-overload}
squid:S1598;Package declaration should match source file directory;CRITICAL;Java;CODE_SMELL;{pitfall}
squid:S4551;Enum values should be compared with ==;MAJOR;Java;CODE_SMELL;{}
squid:S1640;Maps with keys that are enum values should be replaced with EnumMap;MINOR;Java;CODE_SMELL;{performance}
squid:S1450;Private fields only used as local variables in methods should become local variables;MINOR;Java;CODE_SMELL;{pitfall}
squid:S3973;A conditionally executed single line should be denoted by indentation;CRITICAL;Java;CODE_SMELL;{confusing,suspicious}
squid:S2168;Double-checked locking should not be used;BLOCKER;Java;BUG;{cert,cwe,multi-threading}
squid:S2057;Serializable classes should have a serialVersionUID;CRITICAL;Java;CODE_SMELL;{cert,pitfall,serialization}
squid:S4266;Stream.collect() calls should not be redundant;MINOR;Java;CODE_SMELL;{clumsy}
squid:S4034;Stream call chains should be simplified when possible;MINOR;Java;CODE_SMELL;{clumsy}
squid:S4276;Functional Interfaces should be as specialised as possible;MINOR;Java;CODE_SMELL;{performance}
php:S4524;default clauses should be first or last;CRITICAL;PHP;CODE_SMELL;{misra}
php:S2068;Credentials should not be hard-coded;BLOCKER;PHP;VULNERABILITY;{cert,cwe,owasp-a2,sans-top25-porous}
php:S2115;Databases should be password-protected;BLOCKER;PHP;VULNERABILITY;{owasp-a3}
php:S1871;Two branches in a conditional structure should not have exactly the same implementation;MAJOR;PHP;CODE_SMELL;{design,suspicious}
php:S4508;Deserializing objects from an untrusted source is security-sensitive;CRITICAL;PHP;VULNERABILITY;{cwe,owasp-a8}
php:S1764;Identical expressions should not be used on both sides of a binary operator;MAJOR;PHP;BUG;{cert}
php:S2278;Neither DES (Data Encryption Standard) nor DESede (3DES) should be used;BLOCKER;PHP;VULNERABILITY;{cert,cwe,owasp-a6,sans-top25-porous}
php:S2277;Cryptographic RSA algorithms should always incorporate OAEP (Optimal Asymmetric Encryption Padding);CRITICAL;PHP;VULNERABILITY;{cwe,owasp-a3,owasp-a6,sans-top25-porous}
php:S1313;Using hardcoded IP addresses is security-sensitive;MINOR;PHP;VULNERABILITY;{cert}
php:S3334;allow_url_fopen and allow_url_include should be disabled;BLOCKER;PHP;VULNERABILITY;{cwe,owasp-a1,php-ini,sans-top25-risky}
abap:S1751;Loops with at most one iteration should be refactored;MAJOR;ABAP;BUG;{}
php:S4426;Cryptographic keys should not be too short;BLOCKER;PHP;VULNERABILITY;{cwe,owasp-a3}
php:S3973;A conditionally executed single line should be denoted by indentation;CRITICAL;PHP;CODE_SMELL;{confusing,suspicious}
php:S131;switch statements should have default clauses;CRITICAL;PHP;CODE_SMELL;{cert,cwe,misra}
php:S3330;HttpOnly should be set on cookies;CRITICAL;PHP;VULNERABILITY;{cwe,owasp-a7,sans-top25-insecure}
php:S3331;Cookie domains should be as narrow as possible;CRITICAL;PHP;VULNERABILITY;{owasp-a7}
php:S3338;file_uploads should be disabled;BLOCKER;PHP;VULNERABILITY;{cwe,php-ini,sans-top25-insecure}
php:S125;Sections of code should not be commented out;MAJOR;PHP;CODE_SMELL;{misra,unused}
php:S4433;LDAP connections should be authenticated;CRITICAL;PHP;VULNERABILITY;{cwe,owasp-a2}
Web:S1134;Track uses of FIXME tags;MAJOR;HTML;CODE_SMELL;{cwe}
Web:S4645;<script>...</script> elements should not be nested;MAJOR;HTML;BUG;{}
Web:S4084;Videos should have subtitles;MAJOR;HTML;CODE_SMELL;{accessibility,html5}
Web:BoldAndItalicTagsCheck;<strong> and <em> tags should be used;MINOR;HTML;BUG;{accessibility}
Web:AvoidCommentedOutCodeCheck;Sections of code should not be commented out;MAJOR;HTML;CODE_SMELL;{misra,unused}
Web:ParentElementIllegalCheck;Track presence of forbidden parent element;INFO;HTML;CODE_SMELL;{}
javascript:S3798;Variables and functions should not be declared in the global scope;MAJOR;JavaScript;CODE_SMELL;{}
javascript:MissingNewlineAtEndOfFile;Files should contain an empty newline at the end;MINOR;JavaScript;CODE_SMELL;{convention}
javascript:S3799;Destructuring patterns should not be empty;MAJOR;JavaScript;BUG;{}
javascript:S1135;Track uses of TODO tags;INFO;JavaScript;CODE_SMELL;{cwe}
javascript:S3796;Callbacks of array methods should have return statements;BLOCKER;JavaScript;BUG;{}
javascript:S1134;Track uses of FIXME tags;MAJOR;JavaScript;CODE_SMELL;{cwe}
javascript:ConditionalComment;Internet Explorer's conditional comments should not be used;CRITICAL;JavaScript;CODE_SMELL;{cross-browser}
javascript:BoundOrAssignedEvalOrArguments;eval and arguments should not be bound or assigned;MAJOR;JavaScript;BUG;{}
javascript:VariableDeclarationAfterUsage;Variables should be declared before they are used;BLOCKER;JavaScript;CODE_SMELL;{pitfall}
javascript:S3317;Default export names and file names should match;MINOR;JavaScript;CODE_SMELL;{confusing,convention,es2015}
javascript:S1940;Boolean checks should not be inverted;MINOR;JavaScript;CODE_SMELL;{pitfall}
Web:S1135;Track uses of TODO tags;INFO;HTML;CODE_SMELL;{cwe}
javascript:Parentheses;Redundant pairs of parentheses should be removed;MAJOR;JavaScript;CODE_SMELL;{confusing}
javascript:S2234;Parameters should be passed in the correct order;MAJOR;JavaScript;CODE_SMELL;{}
javascript:S3686;Functions should not be called both with and without new;MAJOR;JavaScript;CODE_SMELL;{}
javascript:S1264;A while loop should be used instead of a for loop;MINOR;JavaScript;CODE_SMELL;{clumsy}
javascript:DuplicatePropertyName;Property names should not be duplicated within a class or object literal;MAJOR;JavaScript;BUG;{pitfall}
javascript:S2688;NaN should not be used in comparisons;MAJOR;JavaScript;BUG;{cert}
javascript:S2685;arguments.caller and arguments.callee should not be used;MAJOR;JavaScript;CODE_SMELL;{obsolete}
javascript:S3531;Generators should yield something;MAJOR;JavaScript;BUG;{api-design,es2015}
javascript:S3533;import should be used to include external code;MINOR;JavaScript;CODE_SMELL;{convention,es2015,obsolete}
javascript:S1119;Labels should not be used;MAJOR;JavaScript;CODE_SMELL;{confusing}
javascript:S1472;Function call arguments should not start on new lines;MINOR;JavaScript;CODE_SMELL;{suspicious}
javascript:S2208;Wildcard imports should not be used;CRITICAL;JavaScript;CODE_SMELL;{es2015,pitfall}
javascript:DuplicateFunctionArgument;Function argument names should be unique;MAJOR;JavaScript;BUG;{}
javascript:S1479;switch statements should not have too many case clauses;MAJOR;JavaScript;CODE_SMELL;{brain-overload}
javascript:ForIn;for...in loops should filter properties before acting on them;MAJOR;JavaScript;BUG;{}
javascript:S1126;Return of boolean expressions should not be wrapped into an if-then-else statement;MINOR;JavaScript;CODE_SMELL;{clumsy}
javascript:S1488;Local variables should not be declared and then immediately returned or thrown;MINOR;JavaScript;CODE_SMELL;{clumsy}
javascript:S1125;Boolean literals should not be used in comparisons;MINOR;JavaScript;CODE_SMELL;{clumsy}
javascript:S3785;in should not be used with primitive types;CRITICAL;JavaScript;BUG;{}
javascript:S3786;Template literal placeholder syntax should not be used in regular strings;MAJOR;JavaScript;BUG;{}
javascript:SingleQuote;Single quotes should be used for string literals;MINOR;JavaScript;CODE_SMELL;{convention}
javascript:S3782;Arguments to built-in functions should match documented types;MAJOR;JavaScript;CODE_SMELL;{}
javascript:S1128;Unnecessary imports should be removed;MINOR;JavaScript;CODE_SMELL;{es2015,unused}
javascript:S3358;Ternary operators should not be nested;MAJOR;JavaScript;CODE_SMELL;{confusing}
javascript:FunctionDeclarationsWithinBlocks;Function declarations should not be made within blocks;MINOR;JavaScript;BUG;{cross-browser,user-experience}
javascript:S3353;Unchanged variables should be marked const;CRITICAL;JavaScript;CODE_SMELL;{es2015}
javascript:LabelPlacement;Only while, do and for statements should be labelled;MAJOR;JavaScript;CODE_SMELL;{pitfall}
javascript:EmptyBlock;Nested blocks of code should not be left empty;MAJOR;JavaScript;CODE_SMELL;{suspicious}
javascript:EqEqEq;=== and !== should be used instead of == and !=;MAJOR;JavaScript;CODE_SMELL;{suspicious}
javascript:S2703;Variables should be declared explicitly;BLOCKER;JavaScript;CODE_SMELL;{pitfall}
javascript:HtmlComments;HTML-style comments should not be used;MINOR;JavaScript;CODE_SMELL;{bad-practice}
javascript:S1854;Dead stores should be removed;MAJOR;JavaScript;CODE_SMELL;{cert,cwe,unused}
javascript:PrimitiveWrappers;Wrapper objects should not be used for primitive types;MINOR;JavaScript;CODE_SMELL;{pitfall}
javascript:S1862;Related if/else if statements and cases in a switch should not have the same condition;MAJOR;JavaScript;BUG;{cert,pitfall,unused}
javascript:ExcessiveParameterList;Functions should not have too many parameters;MAJOR;JavaScript;CODE_SMELL;{brain-overload}
javascript:S3002;Unary operators + and - should not be used with objects;MINOR;JavaScript;CODE_SMELL;{confusing}
javascript:S1067;Expressions should not be too complex;CRITICAL;JavaScript;CODE_SMELL;{brain-overload}
javascript:S3003;Comparison operators should not be used with strings;MAJOR;JavaScript;CODE_SMELL;{}
javascript:S1186;Functions should not be empty;CRITICAL;JavaScript;CODE_SMELL;{suspicious}
javascript:S2715;find should be used to select the children of an element known by id;MAJOR;JavaScript;CODE_SMELL;{jquery,performance,user-experience}
javascript:S3001;delete should be used only with object properties;MINOR;JavaScript;BUG;{}
javascript:ConstructorFunctionsForSideEffects;Objects should not be created to be dropped immediately without being used;MAJOR;JavaScript;BUG;{}
javascript:S2713;JQuery cache variables should comply with a convention name;MINOR;JavaScript;CODE_SMELL;{convention,jquery}
javascript:S2716;Universal selectors should not be used;MAJOR;JavaScript;CODE_SMELL;{jquery,performance,user-experience}
javascript:S2714;Element type selectors should not be used with class selectors;MAJOR;JavaScript;CODE_SMELL;{jquery,performance,user-experience}
javascript:S3800;Functions should always return the same type;MAJOR;JavaScript;CODE_SMELL;{confusing}
javascript:S3801;Functions should use return consistently;MAJOR;JavaScript;CODE_SMELL;{api-design,confusing}
javascript:S2392;Variables should be defined in the blocks where they are used;MAJOR;JavaScript;CODE_SMELL;{pitfall}
javascript:MultilineStringLiterals;Multiline string literals should not be used;MINOR;JavaScript;CODE_SMELL;{bad-practice}
javascript:S3699;The output of functions that don't return anything should not be used;MAJOR;JavaScript;BUG;{}
javascript:S3579;Array indexes should be numeric;MAJOR;JavaScript;CODE_SMELL;{bad-practice}
javascript:NamedFunctionExpression;Named function expressions should not be used;MINOR;JavaScript;BUG;{cross-browser,user-experience}
javascript:TrailingComment;Comments should not be located at the end of lines of code;MINOR;JavaScript;CODE_SMELL;{convention}
javascript:S1154;Results of operations on strings should not be ignored;MAJOR;JavaScript;BUG;{cert}
javascript:FunctionComplexity;Functions should not be too complex;CRITICAL;JavaScript;CODE_SMELL;{brain-overload}
javascript:CommentRegularExpression;Track comments matching a regular expression;MAJOR;JavaScript;CODE_SMELL;{}
javascript:S2137;Special identifiers should not be bound or assigned;MAJOR;JavaScript;BUG;{pitfall}
javascript:S2138;undefined should not be assigned;MINOR;JavaScript;CODE_SMELL;{suspicious}
javascript:S2259;Properties of variables with null or undefined values should not be accessed;MAJOR;JavaScript;BUG;{cert,cwe}
javascript:S2376;Property getters and setters should come in pairs;MAJOR;JavaScript;CODE_SMELL;{pitfall}
javascript:S2814;Variables and functions should not be redeclared;MAJOR;JavaScript;CODE_SMELL;{confusing}
javascript:NestedIfDepth;Control flow statements if, for, while, switch and try should not be nested too deeply;CRITICAL;JavaScript;CODE_SMELL;{brain-overload}
javascript:S2251;A for loop update clause should move the counter in the right direction;MAJOR;JavaScript;BUG;{cert}
javascript:S138;Functions should not have too many lines;MAJOR;JavaScript;CODE_SMELL;{brain-overload}
javascript:S2189;Loops should not be infinite;BLOCKER;JavaScript;BUG;{cert}
javascript:S2508;The names of model properties should not contain spaces;MINOR;JavaScript;BUG;{backbone}
javascript:ParsingError;JavaScript parser failure;MAJOR;JavaScript;CODE_SMELL;{suspicious}
javascript:LineLength;Lines should not be too long;MAJOR;JavaScript;CODE_SMELL;{convention}
javascript:S1656;Variables should not be self-assigned;MAJOR;JavaScript;BUG;{cert}
javascript:TooManyBreakOrContinueInLoop;Loops should not contain more than a single break or continue statement;MINOR;JavaScript;CODE_SMELL;{brain-overload}
javascript:S3834;Symbol should not be used as a constructor;CRITICAL;JavaScript;BUG;{es2015}
javascript:S104;Files should not have too many lines;MAJOR;JavaScript;CODE_SMELL;{brain-overload}
javascript:S2873;Calls should not be made to non-callable values;MAJOR;JavaScript;BUG;{}
javascript:S2870;delete should not be used on arrays;MAJOR;JavaScript;CODE_SMELL;{}
javascript:S2757;Non-existent operators '=+', '=-' and '=!' should not be used;MAJOR;JavaScript;BUG;{}
javascript:S2990;The global this object should not be used;MINOR;JavaScript;CODE_SMELL;{confusing}
javascript:S2999;new operators should be used with functions;MAJOR;JavaScript;BUG;{}
javascript:S2123;Values should not be uselessly incremented;MAJOR;JavaScript;BUG;{unused}
javascript:StrictMode;strict mode should be used with caution;CRITICAL;JavaScript;CODE_SMELL;{cross-browser,user-experience}
javascript:S3723;Trailing commas should be used;MINOR;JavaScript;CODE_SMELL;{convention}
javascript:S1788;Function parameters with default values should be last;MAJOR;JavaScript;CODE_SMELL;{es2015}
javascript:S1994;for loop increment clauses should modify the loops' counters;CRITICAL;JavaScript;CODE_SMELL;{confusing}
javascript:S1751;Jump statements should not be used unconditionally;MAJOR;JavaScript;CODE_SMELL;{}
javascript:S3499;Shorthand object properties should be grouped at the beginning or end of an object declaration;MINOR;JavaScript;CODE_SMELL;{convention,es2015}
javascript:S3498;Object literal shorthand syntax should be used;MINOR;JavaScript;CODE_SMELL;{convention,es2015}
javascript:CollapsibleIfStatements;Collapsible if statements should be merged;MAJOR;JavaScript;CODE_SMELL;{clumsy}
javascript:S3812;Results of in and instanceof should be negated rather than operands;CRITICAL;JavaScript;BUG;{}
javascript:S1192;String literals should not be duplicated;CRITICAL;JavaScript;CODE_SMELL;{design}
javascript:FutureReservedWords;future reserved words should not be used as identifiers;BLOCKER;JavaScript;CODE_SMELL;{lock-in,pitfall}
javascript:S1764;Identical expressions should not be used on both sides of a binary operator;MAJOR;JavaScript;BUG;{cert}
javascript:S101;Class names should comply with a naming convention;MINOR;JavaScript;CODE_SMELL;{convention}
javascript:S100;Function and method names should comply with a naming convention;MINOR;JavaScript;CODE_SMELL;{convention}
javascript:S3828;yield expressions should not be used outside generators;BLOCKER;JavaScript;BUG;{es2015}
javascript:S3827;Non-existent variables should not be referenced;BLOCKER;JavaScript;BUG;{}
javascript:S3512;Template strings should be used instead of concatenation;MINOR;JavaScript;CODE_SMELL;{clumsy,es2015}
javascript:TabCharacter;Tabulation characters should not be used;MINOR;JavaScript;CODE_SMELL;{convention}
javascript:S1697;Short-circuit logic should be used to prevent null pointer dereferences in conditionals;MAJOR;JavaScript;BUG;{}
javascript:S2424;Built-in objects should not be overridden;MAJOR;JavaScript;BUG;{confusing}
javascript:S3513;arguments should not be accessed directly;MAJOR;JavaScript;CODE_SMELL;{api-design,es2015}
javascript:S1451;Track lack of copyright and license headers;BLOCKER;JavaScript;CODE_SMELL;{}
javascript:S2427;The base should be provided to parseInt;MINOR;JavaScript;BUG;{user-experience}
javascript:S3516;Function returns should not be invariant;BLOCKER;JavaScript;CODE_SMELL;{}
javascript:S3758;Values not convertible to numbers should not be used in numeric comparisons;MAJOR;JavaScript;CODE_SMELL;{}
javascript:S2428;Object literal syntax should be used;MINOR;JavaScript;CODE_SMELL;{clumsy}
javascript:S3759;Non-existent properties should not be read;MAJOR;JavaScript;BUG;{}
javascript:S2549;The changed property should not be manipulated directly;CRITICAL;JavaScript;BUG;{backbone}
javascript:S3514;Destructuring syntax should be used for assignments;MINOR;JavaScript;CODE_SMELL;{clumsy,es2015}
javascript:Semicolon;Statements should end with semicolons;MINOR;JavaScript;CODE_SMELL;{convention}
javascript:S3757;Arithmetic operations should not result in NaN;MAJOR;JavaScript;CODE_SMELL;{}
javascript:S4043;Array-mutating methods should not be used misleadingly;MAJOR;JavaScript;BUG;{}
javascript:S4165;Assignments should not be redundant;MAJOR;JavaScript;CODE_SMELL;{redundant}
javascript:UnusedVariable;Unused local variables and functions should be removed;MINOR;JavaScript;CODE_SMELL;{unused}
javascript:S3403;Strict equality operators should not be used with dissimilar types;MAJOR;JavaScript;BUG;{}
javascript:S3524;Braces and parentheses should be used consistently with arrow functions;MINOR;JavaScript;CODE_SMELL;{convention,es2015}
javascript:ArrayAndObjectConstructors;Array constructors should not be used;MINOR;JavaScript;CODE_SMELL;{suspicious}
javascript:S2310;Loop counters should not be assigned to from within the loop body;CRITICAL;JavaScript;CODE_SMELL;{}
javascript:S3760;Arithmetic operators should only have numbers as operands;MAJOR;JavaScript;CODE_SMELL;{confusing}
javascript:S2550;defaults should be a function when objects or arrays are used;MAJOR;JavaScript;BUG;{backbone}
javascript:OneStatementPerLine;Statements should be on separate lines;MAJOR;JavaScript;CODE_SMELL;{style}
javascript:S3525;Class methods should be used instead of prototype assignments;CRITICAL;JavaScript;CODE_SMELL;{es2015}
javascript:S1105;An open curly brace should be located at the end of a line;MINOR;JavaScript;CODE_SMELL;{convention}
javascript:S3854;super() should be invoked appropriately;CRITICAL;JavaScript;BUG;{}
javascript:S3972;Conditionals should start on new lines;CRITICAL;JavaScript;CODE_SMELL;{suspicious}
javascript:S2762;Selections should be stored;MAJOR;JavaScript;CODE_SMELL;{jquery,performance,user-experience}
javascript:S3973;A conditionally executed single line should be denoted by indentation;CRITICAL;JavaScript;CODE_SMELL;{confusing,suspicious}
javascript:S4144;Functions should not have identical implementations;MAJOR;JavaScript;CODE_SMELL;{confusing,duplicate,suspicious}
javascript:S2769;Selection results should be tested with length;MAJOR;JavaScript;BUG;{jquery}
squid:S2253;Track uses of disallowed methods;MAJOR;Java;CODE_SMELL;{}
javascript:S2432;Setters should not return values;MAJOR;JavaScript;BUG;{}
javascript:S3616;Comma and logical OR operators should not be used in switch cases;MAJOR;JavaScript;BUG;{}
javascript:S3735;void should not be used;CRITICAL;JavaScript;CODE_SMELL;{confusing}
javascript:WithStatement;with statements should not be used;MINOR;JavaScript;BUG;{}
javascript:ConditionalOperator;The ternary operator should not be used;MAJOR;JavaScript;CODE_SMELL;{brain-overload}
javascript:S4143;Collection elements should not be replaced unconditionally;MAJOR;JavaScript;BUG;{suspicious}
javascript:BitwiseOperators;Bitwise operators should not be used in boolean contexts;MAJOR;JavaScript;BUG;{}
javascript:S3500;Attempts should not be made to update const variables;MAJOR;JavaScript;BUG;{es2015}
javascript:S3863;Imports from the same modules should be merged;MINOR;JavaScript;CODE_SMELL;{es2015}
javascript:S3981;Collection sizes and array length comparisons should make sense;MAJOR;JavaScript;BUG;{}
javascript:S2770;Deprecated jQuery methods should not be used;MAJOR;JavaScript;CODE_SMELL;{jquery,obsolete}
javascript:TrailingWhitespace;Lines should not end with trailing whitespaces;MINOR;JavaScript;CODE_SMELL;{convention}
javascript:S3509;Default parameters should not cause side effects;BLOCKER;JavaScript;CODE_SMELL;{es2015,pitfall}
javascript:S2898;[type=...] should be used to select elements by type;MAJOR;JavaScript;CODE_SMELL;{jquery,performance}
javascript:S3504;Variables should be declared with let or const;CRITICAL;JavaScript;CODE_SMELL;{bad-practice,es2015}
javascript:FunctionDefinitionInsideLoop;Functions should not be defined inside loops;MAJOR;JavaScript;CODE_SMELL;{suspicious}
javascript:S4030;Collection and array contents should be used;MAJOR;JavaScript;CODE_SMELL;{suspicious,unused}
tsql:S1451;Track lack of copyright and license headers;BLOCKER;T-SQL;CODE_SMELL;{}
tsql:S1614;A primary key should be specified during table creation;BLOCKER;T-SQL;CODE_SMELL;{suspicious}
tsql:S4801;SELECT statements used as argument of EXISTS statements should be selective;CRITICAL;T-SQL;CODE_SMELL;{}
tsql:S104;Files should not have too many lines of code;MAJOR;T-SQL;CODE_SMELL;{brain-overload}
tsql:S1940;Boolean checks should not be inverted;MINOR;T-SQL;CODE_SMELL;{pitfall}
tsql:S1067;Expressions should not be too complex;CRITICAL;T-SQL;CODE_SMELL;{brain-overload}
tsql:S4819;NOCOUNT should be activated on PROCEDURE and TRIGGER definitions;CRITICAL;T-SQL;CODE_SMELL;{performance}
tsql:S3923;All branches in a conditional structure should not have exactly the same implementation;MAJOR;T-SQL;BUG;{}
tsql:S4820;Track lack of SQL Server session configuration;MAJOR;T-SQL;CODE_SMELL;{}
tsql:S4104;COALESCE, IIF, and CASE input expressions should not contain subqueries;MAJOR;T-SQL;CODE_SMELL;{unpredictable}
tsql:S1751;Loops with at most one iteration should be refactored;MAJOR;T-SQL;BUG;{}
tsql:S1871;Two branches in a conditional structure should not have exactly the same implementation;MAJOR;T-SQL;CODE_SMELL;{design,suspicious}
tsql:S1764;Identical expressions should not be used on both sides of a binary operator;MAJOR;T-SQL;BUG;{cert}
tsql:S3626;Jump statements should not be redundant;MINOR;T-SQL;CODE_SMELL;{clumsy,redundant}
swift:S2758;The ternary operator should not return the same value regardless of the condition;MAJOR;Swift;BUG;{}
swift:S1751;Jump statements should not be used unconditionally;MAJOR;Swift;CODE_SMELL;{}
swift:S2278;Neither DES (Data Encryption Standard) nor DESede (3DES) should be used;BLOCKER;Swift;VULNERABILITY;{cert,cwe,owasp-a6,sans-top25-porous}
swift:S3083;Precedence and associativity of standard operators should not be changed;MAJOR;Swift;BUG;{pitfall}
swift:S1313;Using hardcoded IP addresses is security-sensitive;MINOR;Swift;VULNERABILITY;{cert}
swift:S125;Sections of code should not be commented out;MAJOR;Swift;CODE_SMELL;{misra,unused}
vbnet:S1940;Boolean checks should not be inverted;MINOR;VB.NET;CODE_SMELL;{pitfall}
vbnet:S2757;=+ should not be used instead of +=;MAJOR;VB.NET;BUG;{}
vbnet:S1821;switch statements should not be nested;CRITICAL;VB.NET;CODE_SMELL;{pitfall}
vbnet:S3449;Right operands of shift operators should be integers;CRITICAL;VB.NET;BUG;{}
vbnet:S3603;Methods with Pure attribute should return a value;MAJOR;VB.NET;BUG;{}
vbnet:S1479;Select Case statements should not have too many Case clauses;MAJOR;VB.NET;CODE_SMELL;{brain-overload}
vbnet:S1481;Unused local variables should be removed;MINOR;VB.NET;CODE_SMELL;{unused}
vbnet:S3358;If operators should not be nested;MAJOR;VB.NET;CODE_SMELL;{confusing}
vbnet:S3598;One-way OperationContract methods should have void return type;MAJOR;VB.NET;BUG;{}
vbnet:S1451;Track lack of copyright and license headers;BLOCKER;VB.NET;CODE_SMELL;{}
vbnet:S1186;Methods should not be empty;CRITICAL;VB.NET;CODE_SMELL;{suspicious}
vbnet:S4210;Windows Forms entry points should be marked with STAThread;MAJOR;VB.NET;BUG;{pitfall,winforms}
vbnet:S3927;Serialization event handlers should be implemented correctly;MAJOR;VB.NET;BUG;{}
vbnet:S3926;Deserialization methods should be provided for OptionalField members;MAJOR;VB.NET;BUG;{serialization}
vbnet:S3923;All branches in a conditional structure should not have exactly the same implementation;MAJOR;VB.NET;BUG;{}
vbnet:S3889;Neither Thread.Resume nor Thread.Suspend should be used;BLOCKER;VB.NET;BUG;{multi-threading,unpredictable}
vbnet:S3453;Classes should not have only private constructors;MAJOR;VB.NET;BUG;{design}
vbnet:S2761;'Not' boolean operator should not be repeated;MAJOR;VB.NET;BUG;{}
vbnet:S3693;Exception constructors should not throw exceptions;BLOCKER;VB.NET;BUG;{}
vbnet:S4428;PartCreationPolicyAttribute should be used with ExportAttribute;MAJOR;VB.NET;BUG;{mef,pitfall}
vbnet:S2360;Optional parameters should not be used;CRITICAL;VB.NET;CODE_SMELL;{pitfall}
vbnet:S4143;Map values should not be replaced unconditionally;MAJOR;VB.NET;BUG;{suspicious}
vbnet:S4260;ConstructorArgument parameters should exist in constructors;MAJOR;VB.NET;BUG;{wpf,xaml}
vbnet:S4159;Classes should implement their ExportAttribute interfaces;BLOCKER;VB.NET;BUG;{mef,pitfall}
vbnet:S3466;Optional parameters should be passed to base calls;MAJOR;VB.NET;BUG;{}
vbnet:S3464;Type inheritance should not be recursive;BLOCKER;VB.NET;BUG;{}
vbnet:S4277;Shared parts should not be created with new;CRITICAL;VB.NET;BUG;{mef,pitfall}
vbnet:S3903;Types should be defined in named namespaces;MAJOR;VB.NET;BUG;{}
vbnet:S3869;SafeHandle.DangerousGetHandle should not be called;BLOCKER;VB.NET;BUG;{leak,unpredictable}
vbnet:S4275;Getters and setters should access the expected fields;CRITICAL;VB.NET;BUG;{pitfall}
typescript:S1940;Boolean checks should not be inverted;MINOR;TypeScript;CODE_SMELL;{pitfall}
typescript:S3516;Function returns should not be invariant;BLOCKER;TypeScript;CODE_SMELL;{}
typescript:S3402;Strings and non-strings should not be added;MINOR;TypeScript;CODE_SMELL;{confusing}
typescript:S1066;Collapsible if statements should be merged;MAJOR;TypeScript;CODE_SMELL;{clumsy}
typescript:S4782;Optional property declarations should use '?' syntax;MAJOR;TypeScript;CODE_SMELL;{proficiency}
plsql:UseFetchBulkCollectIntoCheck;FETCH ... BULK COLLECT INTO should be used;MAJOR;PL/SQL;CODE_SMELL;{performance}
objc:S1135;Track uses of TODO tags;INFO;Objective-C;CODE_SMELL;{cwe}
objc:S1134;Track uses of FIXME tags;MAJOR;Objective-C;CODE_SMELL;{cwe}
objc:S1133;Deprecated code should be removed;INFO;Objective-C;CODE_SMELL;{obsolete}
objc:S2343;Enumeration values should comply with a naming convention;MINOR;Objective-C;CODE_SMELL;{convention}
objc:S1131;Lines should not end with trailing whitespaces;MINOR;Objective-C;CODE_SMELL;{convention}
objc:S1259;typedef should be used for function pointers;CRITICAL;Objective-C;CODE_SMELL;{}
objc:S2234;Parameters should be passed in the correct order;MAJOR;Objective-C;CODE_SMELL;{}
objc:S3689;Declaration specifiers should not be redundant;MAJOR;Objective-C;BUG;{redundant}
objc:S3687;Atomic types should be used instead of volatile types;MAJOR;Objective-C;CODE_SMELL;{c11,cpp11,multi-threading}
objc:S1142;Functions should not contain too many return statements;MAJOR;Objective-C;CODE_SMELL;{brain-overload}
objc:S1264;A while loop should be used instead of a for loop;MINOR;Objective-C;CODE_SMELL;{clumsy}
objc:S3562;switch statements should cover all cases;MAJOR;Objective-C;CODE_SMELL;{suspicious}
objc:S1705;The prefix increment/decrement form should be used;MINOR;Objective-C;CODE_SMELL;{performance}
objc:S1821;switch statements should not be nested;CRITICAL;Objective-C;CODE_SMELL;{pitfall}
objc:S1820;Structures should not have too many fields;MAJOR;Objective-C;CODE_SMELL;{brain-overload}
objc:S1110;Redundant pairs of parentheses should be removed;MAJOR;Objective-C;CODE_SMELL;{confusing}
objc:S1479;switch statements should not have too many case clauses;MAJOR;Objective-C;CODE_SMELL;{brain-overload}
objc:S2681;Multiline blocks should be enclosed in curly braces;MAJOR;Objective-C;CODE_SMELL;{cert,cwe}
objc:S1123;Deprecated attributes should include explanations;MAJOR;Objective-C;CODE_SMELL;{bad-practice,obsolete}
objc:S3358;Conditional operators should not be nested;MAJOR;Objective-C;CODE_SMELL;{confusing}
objc:PPBackslashNotLastCharacter;Line continuation characters '\' should not be followed by trailing whitespace;MINOR;Objective-C;BUG;{}
objc:S3231;Forward declarations should not be redundant;MINOR;Objective-C;CODE_SMELL;{redundant,unused}
objc:PPMacroName;Macro names should comply with a naming convention;MINOR;Objective-C;CODE_SMELL;{convention,preprocessor}
objc:PPDirectiveIndentation;Preprocessor directives should not be indented;CRITICAL;Objective-C;CODE_SMELL;{pitfall,style}
objc:S1291;Track uses of NOSONAR comments;MAJOR;Objective-C;CODE_SMELL;{bad-practice}
objc:S1862;Related if/else if statements should not have the same condition;MAJOR;Objective-C;BUG;{cert,pitfall,unused}
objc:S1067;Expressions should not be too complex;CRITICAL;Objective-C;CODE_SMELL;{brain-overload}
objc:S1066;Collapsible if statements should be merged;MAJOR;Objective-C;CODE_SMELL;{clumsy}
objc:S3486;C declarations should not be made inside Objective-C structures;MINOR;Objective-C;BUG;{pitfall}
objc:S1186;Methods should not be empty;CRITICAL;Objective-C;CODE_SMELL;{suspicious}
objc:S3485;Keywords should be used before arguments;CRITICAL;Objective-C;CODE_SMELL;{api-design}
objc:S3806;#include paths should be portable;MAJOR;Objective-C;CODE_SMELL;{pitfall}
objc:CommentMixedStyles;Comment styles // and /* ... */ should not be mixed within a file;MINOR;Objective-C;CODE_SMELL;{cert,convention}
objc:NonReentrantFunction;Non-reentrant POSIX functions should be replaced with their reentrant versions;BLOCKER;Objective-C;CODE_SMELL;{multi-threading}
objc:S1986;Curly braces should not be used on interfaces without instance variables;MINOR;Objective-C;CODE_SMELL;{convention}
objc:S3458;Empty case clauses that fall through to the default should be omitted;MINOR;Objective-C;CODE_SMELL;{clumsy,finding}
objc:EmptyCompoundStatement;Nested blocks of code should not be left empty;MAJOR;Objective-C;CODE_SMELL;{suspicious}
objc:S2123;Values should not be uselessly incremented;MAJOR;Objective-C;BUG;{unused}
objc:S134;Control flow statements if, for, while, switch and try should not be nested too deeply;CRITICAL;Objective-C;CODE_SMELL;{brain-overload}
objc:S2806;Bit fields should not be used;BLOCKER;Objective-C;CODE_SMELL;{performance,pitfall}
objc:FunctionComplexity;Functions should not be too complex;CRITICAL;Objective-C;CODE_SMELL;{brain-overload}
objc:CommentRegularExpression;Track comments matching a regular expression;MAJOR;Objective-C;CODE_SMELL;{}
objc:S1707;Track TODO and FIXME comments that do not contain a reference to a person;MINOR;Objective-C;CODE_SMELL;{convention}
objc:S1151;switch case clauses should not have too many lines of code;MAJOR;Objective-C;CODE_SMELL;{brain-overload}
objc:S1163;Exceptions should not be thrown in finally blocks;CRITICAL;Objective-C;CODE_SMELL;{cert,error-handling,suspicious}
objc:SizeofSizeof;sizeof(sizeof(...)) should not be used;MAJOR;Objective-C;BUG;{}
objc:S138;Functions/methods should not have too many lines;MAJOR;Objective-C;CODE_SMELL;{brain-overload}
objc:S139;Comments should not be located at the end of lines of code;MINOR;Objective-C;CODE_SMELL;{convention}
objc:S1774;The ternary operator should not be used;MAJOR;Objective-C;CODE_SMELL;{brain-overload}
objc:S1772;Constants should come first in equality tests;MINOR;Objective-C;CODE_SMELL;{convention}
objc:S110;Inheritance tree of classes should not be too deep;MAJOR;Objective-C;CODE_SMELL;{design}
objc:ParsingError;Track parsing failures;MAJOR;Objective-C;CODE_SMELL;{suspicious}
objc:LineLength;Lines should not be too long;MAJOR;Objective-C;CODE_SMELL;{convention}
objc:S3715;GNU extensions should not be used;MINOR;Objective-C;CODE_SMELL;{gnu,lock-in,obsolete}
objc:S1656;Variables should not be self-assigned;MAJOR;Objective-C;BUG;{cert}
objc:S107;Functions should not have too many parameters;MAJOR;Objective-C;CODE_SMELL;{brain-overload}
objc:S2754;Declarations should not be empty;MINOR;Objective-C;CODE_SMELL;{cert,unused}
objc:S3729;Array indices should be placed between brackets;BLOCKER;Objective-C;CODE_SMELL;{pitfall}
objc:S3728;String literals should not be concatenated implicitly;MINOR;Objective-C;CODE_SMELL;{confusing}
objc:S2757;=+ should not be used instead of +=;MAJOR;Objective-C;BUG;{}
objc:ClassComplexity;Classes should not be too complex;CRITICAL;Objective-C;CODE_SMELL;{}
objc:S113;Files should contain an empty newline at the end;MINOR;Objective-C;CODE_SMELL;{convention}
objc:S116;Field names should comply with a naming convention;MINOR;Objective-C;CODE_SMELL;{convention}
objc:S117;Local variable and function parameter names should comply with a naming convention;MINOR;Objective-C;CODE_SMELL;{convention}
objc:S1874;Code annotated as deprecated should not be used;MINOR;Objective-C;CODE_SMELL;{cert,cwe,obsolete}
objc:S1199;Nested code blocks should not be used;MINOR;Objective-C;CODE_SMELL;{bad-practice}
objc:S1198;Deprecated K&R syntax should not be used for function definition;MAJOR;Objective-C;CODE_SMELL;{confusing,obsolete}
objc:S3936;case ranges should cover multiple values;BLOCKER;Objective-C;CODE_SMELL;{gnu,suspicious}
objc:S3935;case ranges should not be empty;MAJOR;Objective-C;BUG;{gnu}
objc:S3491;Redundant pointer operator sequences should be removed;BLOCKER;Objective-C;CODE_SMELL;{suspicious}
objc:S1762;#pragma warning (default: ...) should not be used;MINOR;Objective-C;CODE_SMELL;{cert}
objc:FileComplexity;Files should not be too complex;MAJOR;Objective-C;CODE_SMELL;{}
objc:S100;Function names should comply with a naming convention;MINOR;Objective-C;CODE_SMELL;{convention}
objc:S2738;General catch clauses should not be used;MINOR;Objective-C;CODE_SMELL;{error-handling}
objc:S1768;The sign of an unsigned variable should not be tested;CRITICAL;Objective-C;CODE_SMELL;{pitfall}
objc:TabCharacter;Tabulation characters should not be used;MINOR;Objective-C;CODE_SMELL;{convention}
objc:S1451;Track lack of copyright and license headers;BLOCKER;Objective-C;CODE_SMELL;{}
objc:S2665;The 'sizeof' and 'alignof' operators should not be used with operands of a 'void' type;MINOR;Objective-C;BUG;{lock-in}
objc:S2668;Increment should not be used to set boolean variables to 'true';MAJOR;Objective-C;CODE_SMELL;{confusing,obsolete}
objc:S1578;File names should comply with a naming convention;MINOR;Objective-C;CODE_SMELL;{cert,convention}
objc:S3400;Methods should not return constants;MINOR;Objective-C;CODE_SMELL;{confusing}
objc:OneStatementPerLine;Statements should be on separate lines;MAJOR;Objective-C;CODE_SMELL;{style}
objc:S3646;Types and variables should be declared in separate statements;MINOR;Objective-C;CODE_SMELL;{confusing}
objc:S1227;break statements should not be used except for switch cases;MINOR;Objective-C;CODE_SMELL;{}
objc:FileLoc;Files should not have too many lines of code;MAJOR;Objective-C;CODE_SMELL;{brain-overload}
objc:S3972;Conditionals should start on new lines;CRITICAL;Objective-C;CODE_SMELL;{suspicious}
objc:S3730;#include_next should not be used;MINOR;Objective-C;CODE_SMELL;{confusing,lock-in}
objc:S2761;Unary prefix operators should not be repeated;MAJOR;Objective-C;BUG;{}
objc:S4144;Methods should not have identical implementations;MAJOR;Objective-C;CODE_SMELL;{confusing,duplicate,suspicious}
objc:S4143;Array values should not be replaced unconditionally;MAJOR;Objective-C;BUG;{suspicious}
objc:S3744;Macros should not be redefined;MINOR;Objective-C;CODE_SMELL;{confusing}
objc:PPErrorDirectiveReached;Track instances of the #error preprocessor directive being reached;INFO;Objective-C;CODE_SMELL;{}
abap:S3633;WHERE clause conditions should not be contradictory;MAJOR;ABAP;BUG;{sql}
abap:S1499;Columns to be read with a SELECT statement should be clearly defined;MAJOR;ABAP;CODE_SMELL;{performance,sql}
abap:S1496;SQL UPDATE dbtab SET ... statements should have a WHERE clause;BLOCKER;ABAP;BUG;{sql}
abap:S1498;The LIKE operator should be used very carefully in SQL WHERE condition;MAJOR;ABAP;CODE_SMELL;{performance,sql}
abap:S1494;Subqueries and JOIN clauses should not be used;MAJOR;ABAP;CODE_SMELL;{performance,sql}
abap:S1739;SQL LIKE clauses should not start with wildcard characters;MAJOR;ABAP;CODE_SMELL;{performance,sql}
abap:S1656;Variables should not be self-assigned;MAJOR;ABAP;BUG;{cert}
abap:S1139;DELETE FROM dbtab statements should have a WHERE clause;BLOCKER;ABAP;BUG;{sql}
abap:S1138;SQL EXISTS subqueries should not be used;MAJOR;ABAP;CODE_SMELL;{performance,sql}
abap:S1492;SQL SELECT statements should have WHERE conditions;BLOCKER;ABAP;VULNERABILITY;{performance,sql}
abap:S103;Lines should not be too long;MAJOR;ABAP;CODE_SMELL;{convention}
abap:S1491;REFRESH itab should not be used;MAJOR;ABAP;CODE_SMELL;{}
abap:S105;Tabulation characters should not be used;MINOR;ABAP;CODE_SMELL;{convention}
abap:S104;Files should not have too many lines of code;MAJOR;ABAP;CODE_SMELL;{brain-overload}
abap:S109;Magic numbers should not be used;MAJOR;ABAP;CODE_SMELL;{brain-overload}
abap:S1544;Report names should comply with a naming convention;MINOR;ABAP;CODE_SMELL;{convention}
abap:S1500;SQL DISTINCT operator should not be used to prevent bypassing the SAP buffering;MAJOR;ABAP;CODE_SMELL;{performance,sql}
abap:S1862;Related if/else if statements should not have the same condition;MAJOR;ABAP;BUG;{cert,pitfall,unused}
abap:S2237;Empty driver tables should not be used in a SELECT/FOR ALL ENTRIES clause;MAJOR;ABAP;BUG;{sql}
abap:S1543;Macro names should comply with a naming convention;MINOR;ABAP;CODE_SMELL;{convention,preprocessor}
abap:S1542;Function names should comply with a naming convention;MAJOR;ABAP;CODE_SMELL;{convention}
abap:S3643;LIKE clauses should not be used without wildcards;CRITICAL;ABAP;CODE_SMELL;{sql}
abap:S1540;REFRESH itab FROM TABLE should not be used;MAJOR;ABAP;CODE_SMELL;{obsolete}
abap:S1541;Functions should not be too complex;CRITICAL;ABAP;CODE_SMELL;{brain-overload}
abap:S1067;Expressions should not be too complex;CRITICAL;ABAP;CODE_SMELL;{brain-overload}
abap:S1066;Collapsible if statements should be merged;MAJOR;ABAP;CODE_SMELL;{clumsy}
abap:S122;Statements should be on separate lines;MAJOR;ABAP;CODE_SMELL;{style}
abap:S1508;Internal source code processing statements should not be used;BLOCKER;ABAP;CODE_SMELL;{lock-in}
abap:S1507;System C functions should not be used;MAJOR;ABAP;CODE_SMELL;{lock-in}
abap:S1506;Native SQL should not be statically embedded;MAJOR;ABAP;CODE_SMELL;{performance,sql}
abap:S1505;SQL BYPASSING BUFFER clause should not be used;MINOR;ABAP;BUG;{sql}
abap:S1669;Keywords should not be used as variable names;BLOCKER;ABAP;CODE_SMELL;{pitfall}
abap:S1548;Functions should be documented;MAJOR;ABAP;CODE_SMELL;{}
abap:S1668;Operational statements should not be chained;MAJOR;ABAP;BUG;{}
abap:S1547;Forms should be documented;MAJOR;ABAP;CODE_SMELL;{}
abap:S1502;SQL aggregate functions should not be used to prevent bypassing the SAP buffer;MINOR;ABAP;CODE_SMELL;{performance,sql}
abap:S1546;Classes should be documented;MAJOR;ABAP;CODE_SMELL;{}
abap:S2239;Duplications in driver tables should deleted before the tables are used;MAJOR;ABAP;CODE_SMELL;{performance,sql}
abap:S1501;To SELECT, INSERT or DELETE several lines in databases, internal tables should be used in place of loop control structure;MAJOR;ABAP;CODE_SMELL;{performance,sql}
abap:S1545;DATA variable names should comply with a naming convention;MAJOR;ABAP;CODE_SMELL;{convention}
abap:S114;Interface names should comply with a naming convention;MINOR;ABAP;CODE_SMELL;{convention}
abap:S1676;Asterisks should be used for headers and to comment out code;MINOR;ABAP;CODE_SMELL;{convention}
abap:S1675;CX_ROOT should not be caught;CRITICAL;ABAP;CODE_SMELL;{error-handling}
abap:S1510;Form names should comply with a naming convention;MINOR;ABAP;CODE_SMELL;{convention}
abap:S1597;A SQL SELECT statement should not involve too many tables;MAJOR;ABAP;CODE_SMELL;{performance,sql}
abap:S1674;CATCH clauses should not be empty;MINOR;ABAP;VULNERABILITY;{}
abap:S1311;Classes should not be too complex;CRITICAL;ABAP;CODE_SMELL;{}
abap:S1673;An internal table should be sorted before duplicates are deleted;MAJOR;ABAP;BUG;{}
abap:S2243;JOIN should be used instead of nested SELECT statements;MAJOR;ABAP;CODE_SMELL;{performance,sql}
abap:S1672;Sort fields should be provided for an internal table sort;MAJOR;ABAP;BUG;{}
abap:S1110;Redundant pairs of parentheses should be removed;MAJOR;ABAP;CODE_SMELL;{confusing}
abap:S1671;Mass operations should be used with internal tables instead of loops;MAJOR;ABAP;CODE_SMELL;{performance}
abap:S1670;SORTED or HASHED internal tables should be accessed with a key;MAJOR;ABAP;CODE_SMELL;{performance}
abap:S1549;Macros should be documented;MAJOR;ABAP;CODE_SMELL;{preprocessor}
abap:S2241;Open SQL SELECT statements should have an ORDER BY clause;MINOR;ABAP;BUG;{sql,unpredictable}
abap:S134;Control flow statements IF, CASE, DO, LOOP, SELECT, WHILE and PROVIDE should not be nested too deeply;CRITICAL;ABAP;CODE_SMELL;{brain-overload}
abap:S2242;SELECT INTO TABLE should be used;MAJOR;ABAP;CODE_SMELL;{performance,sql}
abap:S133;Methods should not be too complex;CRITICAL;ABAP;CODE_SMELL;{}
abap:S1639;NOT IN should not be used;CRITICAL;ABAP;CODE_SMELL;{suspicious}
abap:S1715;Unnecessary chain syntax should not be used;MINOR;ABAP;CODE_SMELL;{}
abap:S1512;%_HINTS should not be used;MAJOR;ABAP;CODE_SMELL;{lock-in}
abap:S2240;EXIT and CHECK statements should not be used in SELECT loops;MAJOR;ABAP;CODE_SMELL;{performance,sql}
abap:S1192;String literals should not be duplicated;CRITICAL;ABAP;CODE_SMELL;{design}
abap:S1485;DATA BEGIN OF OCCURS should not be used;MAJOR;ABAP;CODE_SMELL;{}
abap:S101;Class names should comply with a naming convention;MINOR;ABAP;CODE_SMELL;{convention}
abap:S100;Method names should comply with a naming convention;MINOR;ABAP;CODE_SMELL;{convention}
abap:S1481;Unused local variables should be removed;MINOR;ABAP;CODE_SMELL;{unused}
abap:S135;Loops should not contain more than a single CONTINUE, EXIT, CHECK statement;MINOR;ABAP;CODE_SMELL;{brain-overload}
squid:S1258;Classes and enums with private members should have a constructor;MAJOR;Java;CODE_SMELL;{pitfall}
squid:S00115;Constant names should comply with a naming convention;CRITICAL;Java;CODE_SMELL;{convention}
squid:S2226;Servlets should not have mutable instance fields;MAJOR;Java;BUG;{cert,multi-threading,struts}
squid:S00116;Field names should comply with a naming convention;MINOR;Java;CODE_SMELL;{convention}
squid:S1135;Track uses of TODO tags;INFO;Java;CODE_SMELL;{cwe}
squid:S00113;Files should contain an empty newline at the end;MINOR;Java;CODE_SMELL;{convention}
squid:S1134;Track uses of FIXME tags;MAJOR;Java;CODE_SMELL;{cwe}
squid:S00114;Interface names should comply with a naming convention;MINOR;Java;CODE_SMELL;{convention}
squid:S1133;Deprecated code should be removed;INFO;Java;CODE_SMELL;{obsolete}
squid:S2221;Exception should not be caught when not required by called methods;MINOR;Java;CODE_SMELL;{cwe,error-handling}
squid:S00119;Type parameter names should comply with a naming convention;MINOR;Java;CODE_SMELL;{convention}
squid:S2222;Locks should be released;CRITICAL;Java;BUG;{cwe,multi-threading}
squid:S00117;Local variable and method parameter names should comply with a naming convention;MINOR;Java;CODE_SMELL;{convention}
squid:S1132;Strings literals should be placed on the left side when checking for equality;MINOR;Java;CODE_SMELL;{bad-practice}
squid:S00118;Abstract class names should comply with a naming convention;MINOR;Java;CODE_SMELL;{convention}
squid:S2229;Methods should not call same-class methods with incompatible @Transactional values;BLOCKER;Java;BUG;{spring}
squid:S2109;Reflection should not be used to check non-runtime annotations;MAJOR;Java;BUG;{}
squid:S3438;SingleConnectionFactory instances should be set to reconnectOnException;MAJOR;Java;BUG;{spring}
squid:S00122;Statements should be on separate lines;MAJOR;Java;CODE_SMELL;{style}
squid:S00120;Package names should comply with a naming convention;MINOR;Java;CODE_SMELL;{convention}
squid:S3688;Track uses of disallowed classes;INFO;Java;CODE_SMELL;{}
squid:S2236;Methods wait(...), notify() and notifyAll() should not be called on Thread instances;BLOCKER;Java;BUG;{multi-threading}
squid:S00104;Files should not have too many lines of code;MAJOR;Java;CODE_SMELL;{brain-overload}
squid:S2116;hashCode and toString should not be called on array instances;MAJOR;Java;BUG;{}
squid:S00105;Tabulation characters should not be used;MINOR;Java;CODE_SMELL;{convention}
squid:S1147;Exit methods should not be called;BLOCKER;Java;CODE_SMELL;{cert,cwe,suspicious}
squid:S2234;Parameters should be passed in the correct order;MAJOR;Java;CODE_SMELL;{}
squid:S2114;Collections should not be passed as arguments to their own methods;MAJOR;Java;BUG;{}
squid:S00103;Lines should not be too long;MAJOR;Java;CODE_SMELL;{convention}
squid:S2111;BigDecimal(double) should not be used;MAJOR;Java;BUG;{cert}
squid:S2232;ResultSet.isLast() should not be used;MAJOR;Java;CODE_SMELL;{performance,pitfall,sql}
squid:S00108;Nested blocks of code should not be left empty;MAJOR;Java;CODE_SMELL;{suspicious}
squid:S1264;A while loop should be used instead of a for loop;MINOR;Java;CODE_SMELL;{clumsy}
squid:S2112;URL.hashCode and URL.equals should be avoided;MAJOR;Java;CODE_SMELL;{performance}
squid:S2230;Non-public methods should not be @Transactional;MAJOR;Java;BUG;{spring}
squid:S1142;Methods should not have too many return statements;MAJOR;Java;CODE_SMELL;{brain-overload}
squid:S2110;Invalid Date values should not be used;MAJOR;Java;BUG;{}
squid:S2118;Non-serializable classes should not be written;MAJOR;Java;BUG;{serialization}
squid:S1149;Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used;MAJOR;Java;CODE_SMELL;{performance}
squid:S00112;Generic exceptions should never be thrown;MAJOR;Java;CODE_SMELL;{cert,cwe,error-handling}
squid:S2203;collect should be used with Streams instead of list::add;MINOR;Java;CODE_SMELL;{java8}
squid:S2445;Blocks should be synchronized on private final fields;MAJOR;Java;BUG;{cert,cwe,multi-threading}
squid:S2325;private methods that don't access instance data should be static;MINOR;Java;CODE_SMELL;{pitfall}
squid:S2446;notifyAll should be used;MAJOR;Java;BUG;{cert,multi-threading}
squid:S2204;.equals() should not be used to test the values of Atomic classes;MAJOR;Java;BUG;{multi-threading}
squid:S2444;Lazy initialization of static fields should be synchronized;CRITICAL;Java;CODE_SMELL;{multi-threading}
squid:S1596;Collections.EMPTY_LIST, EMPTY_MAP, and EMPTY_SET should not be used;MINOR;Java;CODE_SMELL;{obsolete,pitfall}
squid:S2441;Non-serializable objects should not be stored in HttpSession objects;MAJOR;Java;BUG;{cwe}
squid:S2442;Lock objects should not be synchronized;MAJOR;Java;CODE_SMELL;{cert,clumsy,multi-threading}
squid:S2200;compareTo results should not be checked for specific values;MINOR;Java;BUG;{unpredictable}
squid:S2681;Multiline blocks should be enclosed in curly braces;MAJOR;Java;CODE_SMELL;{cert,cwe}
squid:S2440;Classes with only static methods should not be instantiated;MAJOR;Java;CODE_SMELL;{clumsy}
squid:S3419;Group ids should follow a naming convention;MINOR;Java;CODE_SMELL;{convention,maven}
squid:S2209;static members should be accessed statically;MAJOR;Java;CODE_SMELL;{pitfall}
squid:S3417;Track uses of disallowed dependencies;MAJOR;Java;CODE_SMELL;{maven}
squid:S2208;Wildcard imports should not be used;CRITICAL;Java;CODE_SMELL;{pitfall}
squid:S3415;Assertion arguments should be passed in the correct order;MAJOR;Java;CODE_SMELL;{suspicious,tests}
squid:S2447;Null should not be returned from a Boolean method;CRITICAL;Java;CODE_SMELL;{cert,cwe,pitfall}
squid:S2326;Unused type parameters should be removed;MAJOR;Java;CODE_SMELL;{cert,unused}
squid:S1479;switch statements should not have too many case clauses;MAJOR;Java;CODE_SMELL;{brain-overload}
squid:UnusedPrivateMethod;Unused private methods should be removed;MAJOR;Java;CODE_SMELL;{unused}
squid:S2698;JUnit assertions should include messages;MINOR;Java;CODE_SMELL;{tests}
squid:UselessParenthesesCheck;Redundant pairs of parentheses should be removed;MAJOR;Java;CODE_SMELL;{confusing}
squid:S3546;Custom resources should be closed;BLOCKER;Java;BUG;{denial-of-service}
squid:S1125;Boolean literals should not be redundant;MINOR;Java;CODE_SMELL;{clumsy}
squid:S1488;Local variables should not be declared and then immediately returned or thrown;MINOR;Java;CODE_SMELL;{clumsy}
squid:S3422;Dependencies should not have system scope;CRITICAL;Java;BUG;{lock-in,maven}
squid:S4635;String offset-based methods should be preferred for finding substrings from offsets;CRITICAL;Java;CODE_SMELL;{performance}
squid:S2333;Redundant modifiers should not be used;MINOR;Java;CODE_SMELL;{clumsy,finding}
squid:S2696;Instance methods should not write to static fields;CRITICAL;Java;CODE_SMELL;{multi-threading}
squid:S3423;pom elements should be in the recommended order;MINOR;Java;CODE_SMELL;{convention,maven}
squid:S3420;Artifact ids should follow a naming convention;MINOR;Java;CODE_SMELL;{convention,maven}
squid:S2694;Inner classes which do not reference their owning classes should be static;MAJOR;Java;CODE_SMELL;{performance}
squid:S3421;Deprecated ${pom} properties should not be used;MINOR;Java;CODE_SMELL;{maven,obsolete}
squid:S2695;PreparedStatement and ResultSet methods should be called with valid indices;BLOCKER;Java;BUG;{sql}
squid:S2211;Types should be used in lambdas;MAJOR;Java;CODE_SMELL;{convention,java8}
squid:S2692;indexOf checks should not be for positive numbers;CRITICAL;Java;CODE_SMELL;{suspicious}
squid:S2693;Threads should not be started in constructors;BLOCKER;Java;CODE_SMELL;{cert,multi-threading,pitfall}
squid:S3305;Factory method injection should be used in @Configuration classes;CRITICAL;Java;CODE_SMELL;{performance,spring}
squid:S3306;Constructor injection should be used instead of field injection;MAJOR;Java;BUG;{design,jee,pitfall,spring}
squid:S1481;Unused local variables should be removed;MINOR;Java;CODE_SMELL;{unused}
squid:S3358;Ternary operators should not be nested;MAJOR;Java;CODE_SMELL;{confusing}
squid:S2148;Underscores should be used to make large numbers readable;MINOR;Java;CODE_SMELL;{convention}
squid:S2388;Inner class calls to super class methods should be unambiguous;MAJOR;Java;CODE_SMELL;{pitfall}
squid:S2147;Catches should be combined;MINOR;Java;CODE_SMELL;{clumsy}
squid:S3599;Double Brace Initialization should not be used;MINOR;Java;BUG;{leak}
squid:S2386;Mutable fields should not be public static;MINOR;Java;VULNERABILITY;{cert,cwe,unpredictable}
squid:S2387;Child class fields should not shadow parent class fields;BLOCKER;Java;CODE_SMELL;{confusing}
squid:S2384;Mutable members should not be stored or returned directly;MINOR;Java;VULNERABILITY;{cert,cwe,unpredictable}
squid:S1175;The signature of finalize() should match that of Object.finalize();CRITICAL;Java;BUG;{pitfall}
squid:S4201;Null checks should not be used with instanceof;MINOR;Java;CODE_SMELL;{redundant}
squid:S1174;Object.finalize() should remain protected (versus public) when overriding;CRITICAL;Java;CODE_SMELL;{cert,cwe}
squid:S2143;java.time classes should be used for dates and times;MAJOR;Java;CODE_SMELL;{java8,pitfall}
squid:S4449;Nullness of parameters should be guaranteed;MAJOR;Java;CODE_SMELL;{}
squid:ClassCyclomaticComplexity;Classes should not be too complex;CRITICAL;Java;CODE_SMELL;{}
squid:S2140;Methods of Random that return floating point values should not be used in random integer generation;MINOR;Java;CODE_SMELL;{clumsy}
squid:S2141;Classes that don't define hashCode() should not be used in hashes;MAJOR;Java;BUG;{}
squid:S1170;Public constants and fields initialized at declaration should be static final rather than merely final;MINOR;Java;CODE_SMELL;{convention}
squid:S1171;Only static class initializers should be used;MAJOR;Java;CODE_SMELL;{pitfall}
squid:S2159;Silly equality checks should not be made;MAJOR;Java;BUG;{cert,unused}
squid:S2039;Member variable visibility should be specified;MINOR;Java;VULNERABILITY;{}
squid:S2157;Cloneables should implement clone;CRITICAL;Java;CODE_SMELL;{api-design,convention}
squid:S1068;Unused private fields should be removed;MAJOR;Java;CODE_SMELL;{unused}
squid:S2276;wait(...) should be used instead of Thread.sleep(...) when a lock is held;BLOCKER;Java;BUG;{cert,multi-threading,performance}
squid:S1067;Expressions should not be too complex;CRITICAL;Java;CODE_SMELL;{brain-overload}
squid:S1188;Lambdas and anonymous classes should not have too many lines of code;MAJOR;Java;CODE_SMELL;{java8}
squid:S3366;this should not be exposed from constructors;MAJOR;Java;CODE_SMELL;{cert,multi-threading,suspicious}
squid:S2156;final classes should not have protected members;MINOR;Java;CODE_SMELL;{confusing}
squid:S1066;Collapsible if statements should be merged;MAJOR;Java;CODE_SMELL;{clumsy}
squid:S3242;Method parameters should be declared with base types;MINOR;Java;CODE_SMELL;{api-design}
squid:S2153;Boxing and unboxing should not be immediately reversed;MINOR;Java;BUG;{clumsy}
squid:S2274;Object.wait(...) and Condition.await(...) should be called inside a while loop;CRITICAL;Java;CODE_SMELL;{cert,multi-threading}
squid:S1186;Methods should not be empty;CRITICAL;Java;CODE_SMELL;{suspicious}
squid:S4454;equals method parameters should not be marked @Nonnull;CRITICAL;Java;CODE_SMELL;{}
squid:S2154;Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting;MAJOR;Java;BUG;{}
squid:S2275;Printf-style format strings should not lead to unexpected behavior at runtime;BLOCKER;Java;BUG;{cert,pitfall}
squid:S1185;Overriding methods should do more than simply call the same method in the super class;MINOR;Java;CODE_SMELL;{clumsy,redundant}
squid:S3008;Static non-final field names should comply with a naming convention;MINOR;Java;CODE_SMELL;{convention}
squid:S2151;runFinalizersOnExit should not be called;CRITICAL;Java;BUG;{cert}
squid:S2273;wait, notify and notifyAll should only be called when a lock is obviously held on an object;MAJOR;Java;BUG;{multi-threading}
squid:S1182;Classes that override clone should be Cloneable and call super.clone();MINOR;Java;CODE_SMELL;{cert,convention,cwe}
squid:S2391;JUnit framework methods should be declared properly;BLOCKER;Java;CODE_SMELL;{tests}
squid:S1181;Throwable and Error should not be caught;MAJOR;Java;CODE_SMELL;{bad-practice,cert,cwe,error-handling}
squid:S3578;Test methods should comply with a naming convention;MINOR;Java;CODE_SMELL;{convention,tests}
squid:S3457;Printf-style format strings should be used correctly;MAJOR;Java;CODE_SMELL;{cert,confusing}
squid:S2127;Double.longBitsToDouble should not be used for int;MAJOR;Java;BUG;{}
squid:S1158;Primitive wrappers should not be instantiated only for toString or compareTo calls;MINOR;Java;CODE_SMELL;{clumsy}
squid:S1157;Case insensitive string comparisons should be made without intermediate upper or lower casing;MINOR;Java;CODE_SMELL;{clumsy}
squid:S3577;Test classes should comply with a naming convention;MINOR;Java;CODE_SMELL;{convention,tests}
squid:S4425;Integer.toHexString should not be used to build hexadecimal strings;MAJOR;Java;CODE_SMELL;{cwe}
squid:S2122;ScheduledThreadPoolExecutor should not have 0 core threads;CRITICAL;Java;BUG;{}
squid:S1155;Collection.isEmpty() should be used to test for emptiness;MINOR;Java;CODE_SMELL;{clumsy}
squid:LabelsShouldNotBeUsedCheck;Labels should not be used;MAJOR;Java;CODE_SMELL;{confusing}
squid:S2123;Values should not be uselessly incremented;MAJOR;Java;BUG;{unused}
squid:S1153;String.valueOf() should not be appended to a String;MINOR;Java;CODE_SMELL;{clumsy}
squid:S1151;switch case clauses should not have too many lines of code;MAJOR;Java;CODE_SMELL;{brain-overload}
squid:S00100;Method names should comply with a naming convention;MINOR;Java;CODE_SMELL;{convention}
squid:S1150;Enumeration should not be implemented;MAJOR;Java;CODE_SMELL;{obsolete}
squid:S00101;Class names should comply with a naming convention;MINOR;Java;CODE_SMELL;{convention}
squid:S2259;Null pointers should not be dereferenced;MAJOR;Java;BUG;{cert,cwe}
squid:S1168;Empty arrays and collections should be returned instead of null;MAJOR;Java;CODE_SMELL;{cert}
squid:S3346;Expressions used in assert should not produce side effects;MAJOR;Java;BUG;{cert}
squid:S2133;Objects should not be created only to getClass;MAJOR;Java;CODE_SMELL;{performance}
squid:S2134;Classes extending java.lang.Thread should override the run method;MAJOR;Java;BUG;{multi-threading,pitfall}
squid:S1165;Exception classes should be immutable;MINOR;Java;CODE_SMELL;{error-handling}
squid:S2131;Primitives should not be boxed just for String conversion;MAJOR;Java;CODE_SMELL;{performance}
squid:S2252;Loop conditions should be true at least once;MAJOR;Java;BUG;{}
squid:LeftCurlyBraceEndLineCheck;An open curly brace should be located at the end of a line;MINOR;Java;CODE_SMELL;{convention}
squid:S1163;Exceptions should not be thrown in finally blocks;CRITICAL;Java;CODE_SMELL;{cert,error-handling,suspicious}
squid:S2250;Collection methods with O(n) performance should be used carefully;MINOR;Java;CODE_SMELL;{performance}
squid:S1162;Checked exceptions should not be thrown;MAJOR;Java;CODE_SMELL;{error-handling}
squid:S3340;Annotation arguments should appear in the order in which they were declared;MINOR;Java;CODE_SMELL;{convention}
squid:S2130;Parsing should be used to convert Strings to primitives;MINOR;Java;CODE_SMELL;{performance}
squid:S2251;A for loop update clause should move the counter in the right direction;MAJOR;Java;BUG;{cert}
squid:S1160;Public methods should throw at most one checked exception;MAJOR;Java;CODE_SMELL;{error-handling}
squid:S2864;entrySet() should be iterated when both the key and value are needed;MAJOR;Java;CODE_SMELL;{performance}
squid:S3958;Intermediate Stream methods should not be left unused;MAJOR;Java;BUG;{java8}
squid:ObjectFinalizeCheck;The Object.finalize() method should not be called;MAJOR;Java;BUG;{cert,cwe}
squid:S3959;Consumed Stream pipelines should not be reused;MAJOR;Java;BUG;{java8}
squid:ParsingError;Java parser failure;MAJOR;Java;CODE_SMELL;{suspicious}
squid:S1656;Variables should not be self-assigned;MAJOR;Java;BUG;{cert}
squid:S1309;Track uses of @SuppressWarnings annotations;INFO;Java;CODE_SMELL;{}
squid:S2757;=+ should not be used instead of +=;MAJOR;Java;BUG;{}
squid:S3725;Java 8's Files.exists should not be used;MAJOR;Java;CODE_SMELL;{java8,performance}
squid:S2637;@NonNull values should not be set to null;MINOR;Java;BUG;{cert,cwe}
squid:S1994;for loop increment clauses should modify the loops' counters;CRITICAL;Java;CODE_SMELL;{confusing}
squid:S1871;Two branches in a conditional structure should not have exactly the same implementation;MAJOR;Java;CODE_SMELL;{design,suspicious}
squid:S1872;Classes should not be compared by name;MAJOR;Java;BUG;{cert,cwe}
squid:S3937;Number patterns should be regular;CRITICAL;Java;CODE_SMELL;{suspicious}
squid:S1996;Files should contain only one top-level class or interface each;MAJOR;Java;CODE_SMELL;{brain-overload}
squid:S2973;Escaped Unicode characters should not be used;MAJOR;Java;CODE_SMELL;{confusing}
squid:S1764;Identical expressions should not be used on both sides of a binary operator;MAJOR;Java;BUG;{cert}
squid:S1643;Strings should not be concatenated using '+' in a loop;MINOR;Java;CODE_SMELL;{performance}
squid:S1641;Sets with elements that are enum values should be replaced with EnumSet;MINOR;Java;CODE_SMELL;{performance}
squid:S2974;Classes without public constructors should be final;MINOR;Java;CODE_SMELL;{design}
squid:S2972;Inner classes should not have too many lines of code;MAJOR;Java;CODE_SMELL;{brain-overload}
squid:S2970;Assertions should be complete;BLOCKER;Java;CODE_SMELL;{tests}
squid:S2975;clone should not be overridden;BLOCKER;Java;CODE_SMELL;{suspicious}
squid:S3824;Map.get and value test should be replaced with single method call;MAJOR;Java;CODE_SMELL;{java8}
squid:EmptyFile;Files should not be empty;MINOR;Java;CODE_SMELL;{unused}
squid:ObjectFinalizeOverridenCallsSuperFinalizeCheck;super.finalize() should be called at the end of Object.finalize() implementations;CRITICAL;Java;BUG;{cert,cwe}
squid:S2786;Nested enums should not be declared static;MINOR;Java;CODE_SMELL;{clumsy}
squid:S1214;Constants should not be defined in interfaces;CRITICAL;Java;CODE_SMELL;{bad-practice}
squid:S1697;Short-circuit logic should be used to prevent null pointer dereferences in conditionals;MAJOR;Java;BUG;{}
squid:S1213;The members of an interface or class declaration should appear in a pre-defined order;MINOR;Java;CODE_SMELL;{convention}
squid:S4602;@SpringBootApplication and @ComponentScan should not be used in the default package;BLOCKER;Java;BUG;{spring}
squid:S3631;Arrays.stream should be used for primitive arrays;MAJOR;Java;CODE_SMELL;{performance}
squid:S1696;NullPointerException should not be caught;MAJOR;Java;CODE_SMELL;{cert,cwe,error-handling}
squid:S3753;@Controller classes that use @SessionAttributes must call setComplete on their SessionStatus objects;BLOCKER;Java;BUG;{spring}
squid:S2301;Public methods should not contain selector arguments;MAJOR;Java;CODE_SMELL;{design}
squid:S3750;Spring @Controller classes should not use @Scope;MAJOR;Java;BUG;{spring}
squid:S1694;An abstract class should have both abstract and concrete methods;MINOR;Java;CODE_SMELL;{convention}
squid:S1452;Generic wildcard types should not be used in return parameters;CRITICAL;Java;CODE_SMELL;{pitfall}
squid:S1210;equals(Object obj) should be overridden along with the compareTo(T obj) method;MINOR;Java;CODE_SMELL;{}
squid:S1451;Track lack of copyright and license headers;BLOCKER;Java;CODE_SMELL;{}
squid:S3518;Zero should not be a possible denominator;CRITICAL;Java;BUG;{cert,cwe,denial-of-service}
squid:S4604;@EnableAutoConfiguration should be fine-tuned;MAJOR;Java;CODE_SMELL;{performance,spring}
squid:S3516;Methods returns should not be invariant;BLOCKER;Java;CODE_SMELL;{}
squid:S4603;@Imports should be preferred to @ComponentScans;MAJOR;Java;CODE_SMELL;{performance,spring}
squid:S4605;Spring beans should be considered by @ComponentScan;CRITICAL;Java;CODE_SMELL;{pitfall,spring}
squid:S1699;Constructors should only call non-overridable methods;CRITICAL;Java;CODE_SMELL;{cert,pitfall}
squid:S2789;null should not be used with Optional;MAJOR;Java;BUG;{java8}
objc:SideEffectInSizeOf;sizeof should not be used on expressions that contain side effects;MAJOR;Objective-C;BUG;{misra-c++2008}
squid:S1215;Execution of the Garbage Collector should be triggered only by the JVM;CRITICAL;Java;CODE_SMELL;{bad-practice,unpredictable}
squid:S2676;Neither Math.abs nor negation should be used on numbers that could be MIN_VALUE;MINOR;Java;BUG;{}
squid:S2677;read and readLine return values should be used;MAJOR;Java;BUG;{}
squid:S2674;The value returned from a stream read should be checked;MINOR;Java;BUG;{cert}
squid:S3400;Methods should not return constants;MINOR;Java;CODE_SMELL;{confusing}
squid:S1223;Non-constructor methods should not have the same name as the enclosing class;MAJOR;Java;CODE_SMELL;{pitfall}
squid:S2675;readObject should not be synchronized;MAJOR;Java;CODE_SMELL;{confusing}
squid:S1221;Methods should not be named tostring, hashcode or equal;MAJOR;Java;BUG;{pitfall}
squid:S1220;The default unnamed package should not be used;MINOR;Java;CODE_SMELL;{convention}
squid:S2438;Threads should not be used where Runnables are expected;MAJOR;Java;CODE_SMELL;{multi-threading,pitfall}
squid:S1228;Packages should have a javadoc file 'package-info.java';MINOR;Java;CODE_SMELL;{convention}
squid:S2437;Silly bit operations should not be performed;BLOCKER;Java;CODE_SMELL;{suspicious}
squid:ObjectFinalizeOverridenCheck;The Object.finalize() method should not be overriden;CRITICAL;Java;CODE_SMELL;{cert,unpredictable}
squid:S2885;Non-thread-safe fields should not be static;MAJOR;Java;BUG;{multi-threading}
squid:S1312;Loggers should be private static final and should share a naming convention;MINOR;Java;CODE_SMELL;{convention}
squid:S2886;Getters and setters should be synchronized in pairs;MAJOR;Java;BUG;{cert,multi-threading}
squid:S3972;Conditionals should start on new lines;CRITICAL;Java;CODE_SMELL;{suspicious}
squid:S1310;Track uses of NOPMD suppression comments;MINOR;Java;CODE_SMELL;{bad-practice}
squid:S2761;Unary prefix operators should not be repeated;MAJOR;Java;BUG;{}
squid:S1319;Declarations should use Java collection interfaces such as List rather than specific implementation classes such as LinkedLis;MINOR;Java;CODE_SMELL;{bad-practice}
squid:S1315;Track uses of CHECKSTYLE:OFF suppression comments;MINOR;Java;CODE_SMELL;{bad-practice}
squid:S1317;StringBuilder and StringBuffer should not be instantiated with a character;MAJOR;Java;BUG;{pitfall}
squid:MaximumInheritanceDepth;Inheritance tree of classes should not be too deep;MAJOR;Java;CODE_SMELL;{design}
squid:S3985;Unused private classes should be removed;MAJOR;Java;CODE_SMELL;{unused}
squid:S1444;public static fields should be constant;MINOR;Java;VULNERABILITY;{cert,cwe}
objc:TrigraphUsage;Trigraphs should not be used;BLOCKER;Objective-C;CODE_SMELL;{based-on-misra,cert,obsolete,suspicious}
squid:S3986;Week Year (YYYY) should not be used for date formatting;MAJOR;Java;BUG;{suspicious}
squid:S1201;equals method overrides should accept Object parameters;MAJOR;Java;BUG;{suspicious}
squid:S1200;Classes should not be coupled to too many other classes (Single Responsibility Principle);MAJOR;Java;CODE_SMELL;{brain-overload}
squid:IndentationCheck;Source code should be indented consistently;MINOR;Java;CODE_SMELL;{style}
squid:S3981;Collection sizes and array length comparisons should make sense;MAJOR;Java;BUG;{}
squid:S1449;Locale should be used in String operations;MINOR;Java;CODE_SMELL;{cert,unpredictable}
squid:S3626;Jump statements should not be redundant;MINOR;Java;CODE_SMELL;{clumsy,redundant}
squid:S1206;equals(Object obj) and hashCode() should be overridden in pairs;MINOR;Java;BUG;{cert,cwe}
squid:S1448;Classes should not have too many methods;MAJOR;Java;CODE_SMELL;{brain-overload}
squid:S4087;close() calls should not be redundant;MINOR;Java;CODE_SMELL;{redundant}
squid:RightCurlyBraceStartLineCheck;A close curly brace should be located at the beginning of a line;MINOR;Java;CODE_SMELL;{convention}
squid:S1940;Boolean checks should not be inverted;MINOR;Java;CODE_SMELL;{pitfall}
squid:S1943;Classes and methods that rely on the default system encoding should not be used;MINOR;Java;CODE_SMELL;{cert,i18n,unpredictable}
squid:S2912;indexOf checks should use a start position;MINOR;Java;CODE_SMELL;{confusing}
squid:S1821;switch statements should not be nested;CRITICAL;Java;CODE_SMELL;{pitfall}
squid:S1700;A field should not duplicate the name of its containing class;MAJOR;Java;CODE_SMELL;{brain-overload}
squid:S1942;Simple class names should be used;MINOR;Java;CODE_SMELL;{confusing,redundant}
squid:S1820;Classes should not have too many fields;MAJOR;Java;CODE_SMELL;{brain-overload}
squid:S1939;Extensions and implementations should not be redundant;MINOR;Java;CODE_SMELL;{clumsy}
squid:S1941;Variables should not be declared before they are relevant;MINOR;Java;CODE_SMELL;{brain-overload}
squid:S1905;Redundant casts should not be used;MINOR;Java;CODE_SMELL;{clumsy,redundant}
squid:S4065;ThreadLocal.withInitial should be preferred;MINOR;Java;CODE_SMELL;{java8}
squid:RightCurlyBraceSameLineAsNextBlockCheck;Close curly brace and the next else, catch and finally keywords should be located on the same line;MINOR;Java;CODE_SMELL;{convention}
squid:CallToDeprecatedMethod;@Deprecated code should not be used;MINOR;Java;CODE_SMELL;{cert,cwe,obsolete}
squid:CallToFileDeleteOnExitMethod;deleteOnExit should not be used;MAJOR;Java;CODE_SMELL;{performance}
squid:S1610;Abstract classes without fields should be converted to interfaces;MINOR;Java;CODE_SMELL;{java8}
squid:S1850;instanceof operators that always return true or false should be removed;MAJOR;Java;BUG;{}
squid:S1858;toString() should never be called on a String object;MINOR;Java;CODE_SMELL;{clumsy,finding}
squid:S1854;Dead stores should be removed;MAJOR;Java;CODE_SMELL;{cert,cwe,unused}
squid:S1612;Lambdas should be replaced with method references;MINOR;Java;CODE_SMELL;{java8}
squid:S2701;Literal boolean values should not be used in assertions;CRITICAL;Java;CODE_SMELL;{junit,tests}
squid:S1611;Parentheses should be removed from a single lambda input parameter when its type is inferred;MINOR;Java;CODE_SMELL;{java8}
squid:S1609;@FunctionalInterface annotation should be used to flag Single Abstract Method interfaces;CRITICAL;Java;CODE_SMELL;{}
squid:S1862;Related if/else if statements should not have the same condition;MAJOR;Java;BUG;{cert,pitfall,unused}
squid:S1860;Synchronization should not be based on Strings or boxed primitives;MAJOR;Java;BUG;{cert,multi-threading}
squid:S2959;Unnecessary semicolons should be omitted;MINOR;Java;CODE_SMELL;{convention}
squid:S2718;DateUtils.truncate from Apache Commons Lang library should not be used;MAJOR;Java;CODE_SMELL;{java8,performance}
squid:S3923;All branches in a conditional structure should not have exactly the same implementation;MAJOR;Java;BUG;{}
squid:S134;Control flow statements if, for, while, switch and try should not be nested too deeply;CRITICAL;Java;CODE_SMELL;{brain-overload}
squid:S2925;Thread.sleep should not be used in tests;MAJOR;Java;CODE_SMELL;{bad-practice,tests}
squid:S1711;Standard functional interfaces should not be redefined;MAJOR;Java;CODE_SMELL;{java8}
squid:S124;Track comments matching a regular expression;MAJOR;Java;CODE_SMELL;{}
squid:S1710;Annotation repetitions should not be wrapped;MINOR;Java;CODE_SMELL;{java8}
squid:MethodCyclomaticComplexity;Methods should not be too complex;CRITICAL;Java;CODE_SMELL;{brain-overload}
squid:S1607;Tests should not be ignored;MAJOR;Java;CODE_SMELL;{suspicious,tests}
squid:S1849;Iterator.hasNext() should not call Iterator.next();MAJOR;Java;BUG;{}
squid:S1604;Anonymous inner classes containing only one method should become lambdas;MAJOR;Java;CODE_SMELL;{java8}
squid:S1845;Methods and field names should not be the same or differ only by capitalization;BLOCKER;Java;CODE_SMELL;{confusing}
squid:S1844;Object.wait(...) should never be called on objects that implement java.util.concurrent.locks.Condition;MAJOR;Java;CODE_SMELL;{suspicious}
squid:MissingDeprecatedCheck;Deprecated elements should have both the annotation and the Javadoc tag;MAJOR;Java;CODE_SMELL;{bad-practice,obsolete}
squid:S135;Loops should not contain more than a single break or continue statement;MINOR;Java;CODE_SMELL;{brain-overload}
squid:S138;Methods should not have too many lines;MAJOR;Java;CODE_SMELL;{brain-overload}
squid:S4248;Regex patterns should not be created needlessly;MAJOR;Java;CODE_SMELL;{performance,regex}
squid:S3038;Abstract methods should not be redundant;MINOR;Java;CODE_SMELL;{confusing}
squid:S2188;JUnit test cases should call super methods;BLOCKER;Java;CODE_SMELL;{tests}
squid:S3398;private methods called only by inner classes should be moved to those classes;MINOR;Java;CODE_SMELL;{confusing}
squid:S2189;Loops should not be infinite;BLOCKER;Java;BUG;{cert}
squid:S2186;JUnit assertions should not be used in run methods;CRITICAL;Java;CODE_SMELL;{tests}
squid:S4488;Composed @RequestMapping variants should be preferred;MINOR;Java;CODE_SMELL;{spring}
squid:S2065;Fields in non-serializable classes should not be transient;MINOR;Java;CODE_SMELL;{serialization,unused}
squid:S3034;Raw byte values should not be used in bitwise operations in combination with shifts;MAJOR;Java;BUG;{cert}
squid:S2066;Serializable inner classes of non-serializable classes should be static;MINOR;Java;BUG;{cert,serialization}
squid:S2063;Comparators should be Serializable;CRITICAL;Java;CODE_SMELL;{pitfall,serialization}
squid:S2185;Silly math should not be performed;MAJOR;Java;CODE_SMELL;{clumsy}
squid:S2061;Custom serialization method signatures should meet requirements;MAJOR;Java;BUG;{cert}
squid:S2062;readResolve methods should be inheritable;CRITICAL;Java;CODE_SMELL;{pitfall}
squid:S3030;Classes should not have too many static imports;MAJOR;Java;CODE_SMELL;{brain-overload}
squid:S106;Standard outputs should not be used directly to log anything;MAJOR;Java;CODE_SMELL;{bad-practice,cert}
squid:S2060;Externalizable classes should have no-arguments constructors;MAJOR;Java;BUG;{}
squid:S109;Magic numbers should not be used;MAJOR;Java;CODE_SMELL;{brain-overload}
squid:S3046;wait should not be called when multiple locks are held;BLOCKER;Java;BUG;{deadlock,multi-threading}
squid:S3047;Multiple loops over the same set should be combined;MINOR;Java;CODE_SMELL;{performance}
squid:S2197;Modulus results should not be checked for direct equality;CRITICAL;Java;CODE_SMELL;{cert,suspicious}
squid:S2196;Switches should be used for sequences of simple String tests;MINOR;Java;CODE_SMELL;{clumsy}
squid:S3042;writeObject should not be the only synchronized code in a class;MAJOR;Java;CODE_SMELL;{confusing}
squid:S3282;EJB interceptor exclusions should be declared as annotations;BLOCKER;Java;CODE_SMELL;{pitfall}
squid:S4011;Track uses of disallowed constructors;MAJOR;Java;CODE_SMELL;{}
squid:S4349;write(byte[],int,int) should be overridden;MINOR;Java;CODE_SMELL;{performance}
squid:S2187;TestCases should contain tests;BLOCKER;Java;CODE_SMELL;{confusing,tests,unused}
squid:S2047;The names of methods with boolean return values should start with is or has;MAJOR;Java;CODE_SMELL;{convention}
squid:S4348;iterator should not return this;MAJOR;Java;BUG;{pitfall}
squid:S1199;Nested code blocks should not be used;MINOR;Java;CODE_SMELL;{bad-practice}
squid:S2167;compareTo should not return Integer.MIN_VALUE;MINOR;Java;BUG;{}
squid:S3374;Struts validation forms should have unique names;BLOCKER;Java;VULNERABILITY;{cwe,struts}
squid:S2164;Math should not be performed on floats;MINOR;Java;BUG;{cert}
squid:S1197;Array designators [] should be on the type, not the variable;MINOR;Java;CODE_SMELL;{convention}
squid:S3254;Default annotation parameter values should not be passed as arguments;MINOR;Java;CODE_SMELL;{clumsy,finding}
squid:S1075;URIs should not be hardcoded;MINOR;Java;CODE_SMELL;{android,cert}
squid:S2165;finalize should not set fields to null;MINOR;Java;CODE_SMELL;{clumsy,performance}
squid:S2162;equals methods should be symmetric and work for subclasses;MINOR;Java;BUG;{cert}
squid:S1195;Array designators [] should be located after the type in method signatures;MINOR;Java;CODE_SMELL;{convention}
squid:S3373;action mappings should not have too many forward entries;MINOR;Java;CODE_SMELL;{brain-overload,struts}
squid:S1194;java.lang.Error should not be extended;MAJOR;Java;CODE_SMELL;{error-handling}
squid:S3010;Static fields should not be updated in constructors;MAJOR;Java;CODE_SMELL;{}
squid:S1193;Exception types should not be tested using instanceof in catch blocks;MAJOR;Java;CODE_SMELL;{cert,clumsy,error-handling}
squid:S2160;Subclasses that add fields should override equals;MINOR;Java;CODE_SMELL;{suspicious}
squid:S1192;String literals should not be duplicated;CRITICAL;Java;CODE_SMELL;{design}
squid:S1191;Classes from sun.* packages should not be used;MAJOR;Java;CODE_SMELL;{lock-in,pitfall}
squid:S1190;Future keywords should not be used as names;BLOCKER;Java;CODE_SMELL;{obsolete,pitfall}
squid:S2059;Serializable inner classes of Serializable classes should be static;MINOR;Java;CODE_SMELL;{cert,pitfall,serialization}
squid:S3027;String function use should be optimized for single characters;MAJOR;Java;CODE_SMELL;{clumsy,performance}
squid:S2177;Child class methods named for parent class methods should be overrides;MAJOR;Java;BUG;{pitfall}
squid:S2178;Short-circuit logic should be used in boolean contexts;BLOCKER;Java;CODE_SMELL;{cert}
squid:S2176;Class names should not shadow interfaces or superclasses;CRITICAL;Java;CODE_SMELL;{pitfall}
squid:RightCurlyBraceDifferentLineAsNextBlockCheck;Close curly brace and the next else, catch and finally keywords should be on two different lines;MINOR;Java;CODE_SMELL;{convention}
squid:S2055;The non-serializable super class of a Serializable class should have a no-argument constructor;MINOR;Java;BUG;{serialization}
squid:ClassVariableVisibilityCheck;Class variable fields should not have public accessibility;MINOR;Java;VULNERABILITY;{cwe}
squid:LeftCurlyBraceStartLineCheck;An open curly brace should be located at the beginning of a line;MINOR;Java;CODE_SMELL;{convention}
squid:S3020;toArray should be passed an array of the proper type;MINOR;Java;BUG;{}
squid:S2293;The diamond operator (<>) should be used;MINOR;Java;CODE_SMELL;{clumsy}
squid:S4351;compareTo should not be overloaded;MAJOR;Java;BUG;{pitfall}
squid:S4165;Assignments should not be redundant;MAJOR;Java;CODE_SMELL;{redundant}
squid:S4288;Spring components should use constructor injection;MAJOR;Java;CODE_SMELL;{design,spring}
squid:TrailingCommentCheck;Comments should not be located at the end of lines of code;MINOR;Java;CODE_SMELL;{convention}
squid:S4042;java.nio.Files#delete should be preferred;MAJOR;Java;CODE_SMELL;{api-design,error-handling}
squid:S4174;Local constants should follow naming conventions for constants;MINOR;Java;CODE_SMELL;{convention}
squid:S4144;Methods should not have identical implementations;MAJOR;Java;CODE_SMELL;{confusing,duplicate,suspicious}
squid:S3052;Fields should not be initialized to default values;MINOR;Java;CODE_SMELL;{convention,finding}
squid:S4143;Map values should not be replaced unconditionally;MAJOR;Java;BUG;{suspicious}
squid:S4142;Duplicate values should not be passed as arguments;MAJOR;Java;CODE_SMELL;{}
squid:ModifiersOrderCheck;Modifiers should be declared in the correct order;MINOR;Java;CODE_SMELL;{convention}
squid:S3066;enum fields should not be publicly mutable;MINOR;Java;VULNERABILITY;{bad-practice}
squid:S3067;getClass should not be used for synchronization;MAJOR;Java;BUG;{cert,multi-threading}
squid:S4032;Packages containing only package-info.java should be removed;MINOR;Java;CODE_SMELL;{unused}
squid:S2096;main should not throw anything;BLOCKER;Java;CODE_SMELL;{error-handling}
squid:S2097;equals(Object obj) should test argument type;MINOR;Java;BUG;{}
squid:S2094;Classes should not be empty;MINOR;Java;CODE_SMELL;{clumsy}
squid:S4275;Getters and setters should access the expected fields;CRITICAL;Java;BUG;{pitfall}
squid:S4274;Asserts should not be used to check the parameters of a public method;MAJOR;Java;CODE_SMELL;{pitfall}
squid:S2095;Resources should be closed;BLOCKER;Java;BUG;{cert,cwe,denial-of-service,leak}
squid:S2093;Try-with-resources should be used;CRITICAL;Java;CODE_SMELL;{cert,java8,pitfall}
common-web:InsufficientLineCoverage;Lines should have sufficient coverage by tests;MAJOR;HTML;CODE_SMELL;{bad-practice}
common-web:InsufficientBranchCoverage;Branches should have sufficient coverage by tests;MAJOR;HTML;CODE_SMELL;{bad-practice}
common-tsql:FailedUnitTests;Failed unit tests should be fixed;MAJOR;T-SQL;BUG;{}
common-tsql:SkippedUnitTests;Skipped unit tests should be either removed or fixed;MAJOR;T-SQL;CODE_SMELL;{pitfall}
common-tsql:DuplicatedBlocks;Source files should not have any duplicated blocks;MAJOR;T-SQL;CODE_SMELL;{pitfall}
common-tsql:InsufficientCommentDensity;Source files should have a sufficient density of comment lines;MAJOR;T-SQL;CODE_SMELL;{convention}
common-tsql:InsufficientLineCoverage;Lines should have sufficient coverage by tests;MAJOR;T-SQL;CODE_SMELL;{bad-practice}
common-tsql:InsufficientBranchCoverage;Branches should have sufficient coverage by tests;MAJOR;T-SQL;CODE_SMELL;{bad-practice}
php:S1135;Track uses of TODO tags;INFO;PHP;CODE_SMELL;{cwe}
php:S1134;Track uses of FIXME tags;MAJOR;PHP;CODE_SMELL;{cwe}
php:S112;Generic exceptions ErrorException, RuntimeException and Exception should not be thrown;MAJOR;PHP;CODE_SMELL;{cert,cwe,error-handling}
php:S1131;Lines should not end with trailing whitespaces;MINOR;PHP;CODE_SMELL;{convention,psr2}
php:S1536;Function argument names should be unique;MAJOR;PHP;BUG;{}
php:S1779;Only LF character (Unix-like) should be used to end lines;MINOR;PHP;CODE_SMELL;{convention,psr2}
php:S1656;Variables should not be self-assigned;MAJOR;PHP;BUG;{cert}
php:S905;Non-empty statements should change control flow or have at least one side-effect;MAJOR;PHP;BUG;{cwe,misra,unused}
php:S907;goto statement should not be used;MAJOR;PHP;CODE_SMELL;{brain-overload,misra}
php:S103;Lines should not be too long;MAJOR;PHP;CODE_SMELL;{convention}
php:S1808;Source code should comply with formatting standards;MINOR;PHP;CODE_SMELL;{psr2,style}
php:S105;Tabulation characters should not be used;MINOR;PHP;CODE_SMELL;{convention,psr2}
php:S104;Files should not have too many lines of code;MAJOR;PHP;CODE_SMELL;{brain-overload}
php:S107;Functions should not have too many parameters;MAJOR;PHP;CODE_SMELL;{brain-overload}
php:S108;Nested blocks of code should not be left empty;MAJOR;PHP;CODE_SMELL;{suspicious}
php:S1301;switch statements should have at least 3 case clauses;MINOR;PHP;CODE_SMELL;{bad-practice,misra}
php:S1784;Method visibility should be explicitly declared;MINOR;PHP;BUG;{convention,psr2}
php:S1541;Functions should not be too complex;CRITICAL;PHP;CODE_SMELL;{brain-overload}
php:S1144;Unused private methods should be removed;MAJOR;PHP;CODE_SMELL;{unused}
php:S1145;Useless if(true) {...} and if(false){...} blocks should be removed;MAJOR;PHP;BUG;{cwe,misra}
objc:S982;setjmp and longjmp should not be used;CRITICAL;Objective-C;CODE_SMELL;{based-on-misra,cert,pitfall}
php:S121;Control structures should use curly braces;CRITICAL;PHP;CODE_SMELL;{cert,misra,pitfall}
php:S1781;PHP keywords and constants true, false, null should be lower case;MINOR;PHP;CODE_SMELL;{convention,psr2}
php:S1264;A while loop should be used instead of a for loop;MINOR;PHP;CODE_SMELL;{clumsy}
php:S1780;Closing tag ?> should be omitted on files containing only PHP;MINOR;PHP;CODE_SMELL;{bad-practice,psr2}
php:S1142;Functions should not contain too many return statements;MAJOR;PHP;CODE_SMELL;{brain-overload}
php:S881;Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression;MAJOR;PHP;CODE_SMELL;{cert,misra}
php:S122;Statements should be on separate lines;MAJOR;PHP;CODE_SMELL;{psr2,style}
php:S2757;=+ should not be used instead of +=;MAJOR;PHP;BUG;{}
php:S1788;Method arguments with default values should be last;MAJOR;PHP;CODE_SMELL;{psr2}
php:S1820;Classes should not have too many fields;MAJOR;PHP;CODE_SMELL;{brain-overload}
php:S113;Files should contain an empty newline at the end;MINOR;PHP;CODE_SMELL;{convention}
php:S114;Interface names should comply with a naming convention;MINOR;PHP;CODE_SMELL;{convention}
php:S116;Field names should comply with a naming convention;MINOR;PHP;CODE_SMELL;{convention}
php:S115;Constant names should comply with a naming convention;CRITICAL;PHP;CODE_SMELL;{convention}
php:S117;Local variable and function parameter names should comply with a naming convention;MINOR;PHP;CODE_SMELL;{convention}
php:S1599;Variable variables should not be used;BLOCKER;PHP;CODE_SMELL;{brain-overload}
php:S3776;Cognitive Complexity of functions should not be too high;CRITICAL;PHP;CODE_SMELL;{brain-overload}
php:S2047;The names of methods with boolean return values should start with is or has;MAJOR;PHP;CODE_SMELL;{convention}
php:S2201;Return values from functions without side effects should not be ignored;MAJOR;PHP;BUG;{cert,misra}
php:S1110;Redundant pairs of parentheses should be removed;MAJOR;PHP;CODE_SMELL;{confusing}
php:S1990;final should not be used redundantly;MINOR;PHP;CODE_SMELL;{convention}
php:S2046;Perl-style comments should not be used;MINOR;PHP;CODE_SMELL;{convention}
php:S2043;Superglobals should not be accessed directly;MINOR;PHP;CODE_SMELL;{bad-practice}
php:S2681;Multiline blocks should be enclosed in curly braces;MAJOR;PHP;CODE_SMELL;{cert,cwe}
php:S1075;URIs should not be hardcoded;MINOR;PHP;CODE_SMELL;{cert}
php:NoSonar;Track uses of NOSONAR comments;MAJOR;PHP;CODE_SMELL;{bad-practice}
php:S2044;php_sapi_name() should not be used;MAJOR;PHP;CODE_SMELL;{performance}
php:S1757;<?php and <?= tags should be used;MINOR;PHP;CODE_SMELL;{convention,psr1}
php:S1998;References should not be passed to function calls;CRITICAL;PHP;CODE_SMELL;{cwe,obsolete,performance,pitfall}
php:S1997;Files should not contain inline HTML;MAJOR;PHP;CODE_SMELL;{brain-overload,convention}
php:S2964;sleep should not be called;MINOR;PHP;VULNERABILITY;{denial-of-service,owasp-a6}
php:S1117;Local variables should not have the same name as class fields;MAJOR;PHP;CODE_SMELL;{cert,pitfall}
php:S1996;Files should contain only one top-level class or interface each;MAJOR;PHP;CODE_SMELL;{brain-overload}
php:S1116;Empty statements should be removed;MINOR;PHP;CODE_SMELL;{cert,misra,unused}
php:S1479;switch statements should not have too many case clauses;MAJOR;PHP;CODE_SMELL;{brain-overload}
php:S2041;Parentheses should not be used for calls to echo;CRITICAL;PHP;CODE_SMELL;{pitfall}
php:S1192;String literals should not be duplicated;CRITICAL;PHP;CODE_SMELL;{design}
php:S2042;Classes should not have too many lines of code;MAJOR;PHP;CODE_SMELL;{brain-overload}
php:S1126;Return of boolean expressions should not be wrapped into an if-then-else statement;MINOR;PHP;CODE_SMELL;{clumsy}
php:S1763;Jump statements should not be followed by dead code;MAJOR;PHP;BUG;{cert,cwe,misra,unused}
php:S1125;Boolean literals should not be redundant;MINOR;PHP;CODE_SMELL;{clumsy}
php:S1488;Local variables should not be declared and then immediately returned or thrown;MINOR;PHP;CODE_SMELL;{clumsy}
php:S1124;Modifiers should be declared in the correct order;MINOR;PHP;CODE_SMELL;{convention,psr2}
php:S1121;Assignments should not be made from within sub-expressions;MAJOR;PHP;CODE_SMELL;{cert,cwe,misra,suspicious}
php:S101;Class names should comply with a naming convention;MINOR;PHP;CODE_SMELL;{convention}
php:S100;Method and function names should comply with a naming convention;MINOR;PHP;CODE_SMELL;{convention}
php:S1766;More than one property should not be declared per statement;MINOR;PHP;CODE_SMELL;{convention,psr2}
php:S1765;The var keyword should not be used;MINOR;PHP;CODE_SMELL;{convention,psr2}
php:S1481;Unused local variables should be removed;MINOR;PHP;CODE_SMELL;{unused}
php:S2050;Alias functions should not be used;MINOR;PHP;CODE_SMELL;{obsolete}
php:S3358;Ternary operators should not be nested;MAJOR;PHP;CODE_SMELL;{confusing}
php:S1697;Short-circuit logic should be used to prevent null pointer dereferences in conditionals;MAJOR;PHP;BUG;{}
php:S1451;Track lack of copyright and license headers;BLOCKER;PHP;CODE_SMELL;{}
php:S1578;File names should comply with a naming convention;MINOR;PHP;CODE_SMELL;{cert,convention}
php:S1172;Unused function parameters should be removed;MAJOR;PHP;CODE_SMELL;{cert,misra,unused}
php:S2260;PHP parser failure;MAJOR;PHP;CODE_SMELL;{suspicious}
php:S2038;Colors should be defined in upper case;MINOR;PHP;CODE_SMELL;{convention}
php:S2830;Class constructors should not create other objects;MAJOR;PHP;CODE_SMELL;{design}
php:S1862;Related if/else if statements and cases in a switch should not have the same condition;MAJOR;PHP;BUG;{cert,pitfall,unused}
php:S2036;Files that define symbols should not cause side-effects;MAJOR;PHP;BUG;{psr1,user-experience}
php:S2037;Static members should be referenced with static::;MINOR;PHP;BUG;{pitfall}
php:S1068;Unused private fields should be removed;MAJOR;PHP;CODE_SMELL;{unused}
php:S1067;Expressions should not be too complex;CRITICAL;PHP;CODE_SMELL;{brain-overload}
php:S1066;Collapsible if statements should be merged;MAJOR;PHP;CODE_SMELL;{clumsy}
php:S1185;Overriding methods should do more than simply call the same method in the super class;MINOR;PHP;CODE_SMELL;{clumsy,redundant}
php:S1109;A close curly brace should be located at the beginning of a line;MINOR;PHP;CODE_SMELL;{convention}
php:S3923;All branches in a conditional structure should not have exactly the same implementation;MAJOR;PHP;BUG;{}
php:S1106;An open curly brace should be located at the beginning of a line;MINOR;PHP;CODE_SMELL;{convention}
php:S3801;Functions should use return consistently;MAJOR;PHP;CODE_SMELL;{api-design,confusing}
php:S1105;An open curly brace should be located at the end of a line;MINOR;PHP;CODE_SMELL;{convention}
php:S836;Variables should be initialized before use;MAJOR;PHP;BUG;{cwe,misra}
php:S3336;session.use_trans_sid should not be enabled;BLOCKER;PHP;VULNERABILITY;{owasp-a6,php-ini}
php:S3699;The output of functions that don't return anything should not be used;MAJOR;PHP;BUG;{}
php:S2005;String literals should not be concatenated;MINOR;PHP;CODE_SMELL;{clumsy}
php:S3337;enable_dl should be disabled;BLOCKER;PHP;VULNERABILITY;{cwe,owasp-a6,php-ini}
php:S3972;Conditionals should start on new lines;CRITICAL;PHP;CODE_SMELL;{suspicious}
php:S2003;require_once and include_once should be used instead of require and include;MINOR;PHP;BUG;{}
php:S1311;Classes should not be too complex;CRITICAL;PHP;CODE_SMELL;{}
php:S2004;Functions should not be nested too deeply;CRITICAL;PHP;CODE_SMELL;{brain-overload}
php:S3335;cgi.force_redirect should be enabled;MAJOR;PHP;VULNERABILITY;{cwe,owasp-a6,php-ini}
php:S3332;Session-management cookies should not be persistent;CRITICAL;PHP;VULNERABILITY;{owasp-a7,php-ini}
php:S1793;elseif keyword should be used in place of else if keywords;MINOR;PHP;CODE_SMELL;{convention,psr2}
objc:S985;errno should not be used;CRITICAL;Objective-C;CODE_SMELL;{based-on-misra,suspicious}
php:S3333;open_basedir should limit file access;BLOCKER;PHP;VULNERABILITY;{cwe,owasp-a6,php-ini}
php:S4144;Methods should not have identical implementations;MAJOR;PHP;CODE_SMELL;{confusing,duplicate,suspicious}
php:S2123;Values should not be uselessly incremented;MAJOR;PHP;BUG;{unused}
php:S2002;Errors should not be silenced;MINOR;PHP;BUG;{pitfall}
php:S134;Control flow statements if, for, while, switch and try should not be nested too deeply;CRITICAL;PHP;CODE_SMELL;{brain-overload}
php:S2000;Files should not contain characters before <?php;MINOR;PHP;BUG;{user-experience}
php:S2007;Functions and variables should not be defined outside of classes;BLOCKER;PHP;CODE_SMELL;{design}
php:S1799;exit(...) and die(...) statements should not be used;BLOCKER;PHP;BUG;{}
php:S2918;Configuration should not be changed dynamically;MAJOR;PHP;CODE_SMELL;{suspicious}
php:S1151;switch case clauses should not have too many lines of code;MAJOR;PHP;CODE_SMELL;{brain-overload}
php:S127;for loop stop conditions should be invariant;MAJOR;PHP;CODE_SMELL;{misra,pitfall}
php:S4142;Duplicate values should not be passed as arguments;MAJOR;PHP;CODE_SMELL;{}
php:S126;if ... else if constructs should end with else clauses;CRITICAL;PHP;CODE_SMELL;{cert,misra}
php:S128;Switch cases should end with an unconditional break statement;BLOCKER;PHP;CODE_SMELL;{cert,cwe,misra,suspicious}
php:S2014;$this should not be used in a static context;BLOCKER;PHP;BUG;{}
php:S1200;Classes should not be coupled to too many other classes (Single Responsibility Principle);MAJOR;PHP;CODE_SMELL;{brain-overload}
php:S3981;Array or Countable object count comparisons should make sense;MAJOR;PHP;BUG;{}
php:S2010;&& and || should be used;MINOR;PHP;CODE_SMELL;{suspicious}
php:S2011;global should not be used;CRITICAL;PHP;CODE_SMELL;{convention}
php:S1605;__construct functions should not make PHP 4-style calls to parent constructors;MAJOR;PHP;CODE_SMELL;{convention}
php:S1848;Objects should not be created to be dropped immediately without being used;MAJOR;PHP;BUG;{}
php:S1603;PHP 4 constructor declarations should not be used;MAJOR;PHP;CODE_SMELL;{pitfall}
php:S1448;Classes should not have too many methods;MAJOR;PHP;CODE_SMELL;{brain-overload}
php:S1600;Deprecated predefined variables should not be used;MAJOR;PHP;CODE_SMELL;{pitfall}
php:S2251;A for loop update clause should move the counter in the right direction;MAJOR;PHP;BUG;{cert}
php:S138;Functions should not have too many lines of code;MAJOR;PHP;CODE_SMELL;{brain-overload}
php:S139;Comments should not be located at the end of lines of code;MINOR;PHP;CODE_SMELL;{convention}
Web:IllegalNamespaceCheck;Track uses of disallowed namespaces in XHTML documents;MAJOR;HTML;CODE_SMELL;{}
Web:PageWithoutTitleCheck;<title> should be present in all pages;MAJOR;HTML;BUG;{user-experience}
Web:FrameWithoutTitleCheck;<frames> should have a title attribute;MINOR;HTML;BUG;{accessibility}
Web:MaxLineLengthCheck;Lines should not be too long;MAJOR;HTML;CODE_SMELL;{convention}
Web:UnclosedTagCheck;All HTML tags should be closed;MINOR;HTML;BUG;{}
Web:RequiredAttributeCheck;Track lack of required attributes;MAJOR;HTML;CODE_SMELL;{}
Web:AvoidHtmlCommentCheck;HTML comments should not be used;MINOR;HTML;VULNERABILITY;{cwe,jsp-jsf,owasp-a3}
Web:ChildElementRequiredCheck;Track lack of required child elements;MAJOR;HTML;CODE_SMELL;{}
Web:IllegalElementCheck;Track uses of disallowed elements;MAJOR;HTML;CODE_SMELL;{}
Web:ServerSideImageMapsCheck;Server-side image maps (ismap attribute) should not be used;MINOR;HTML;BUG;{accessibility}
Web:DoctypePresenceCheck;<!DOCTYPE> declarations should appear before <html> tags;MAJOR;HTML;BUG;{user-experience}
Web:DoubleQuotesCheck;Attributes should be quoted using double quotes rather than single ones;MINOR;HTML;CODE_SMELL;{convention}
Web:WhiteSpaceAroundCheck;White space should be used in JSP/JSF tags;MINOR;HTML;CODE_SMELL;{convention,jsp-jsf}
Web:UnsupportedTagsInHtml5Check;Elements deprecated in HTML5 should not be used;MAJOR;HTML;BUG;{html5,obsolete,user-experience}
Web:TableWithoutCaptionCheck;<table> tags should contain a <caption>;MINOR;HTML;BUG;{accessibility}
Web:FileLengthCheck;Files should not have too many lines;MAJOR;HTML;CODE_SMELL;{brain-overload}
Web:S1827;Attributes deprecated  in HTML5 should not be used;MAJOR;HTML;CODE_SMELL;{html5,obsolete}
Web:IllegalTagLibsCheck;Disallowed taglibs should not be used;BLOCKER;HTML;CODE_SMELL;{}
Web:ParentElementRequiredCheck;Track lack of required parent elements;MAJOR;HTML;CODE_SMELL;{}
Web:DynamicJspIncludeCheck;Dynamic includes should not be used;MAJOR;HTML;CODE_SMELL;{jsp-jsf,performance}
Web:MetaRefreshCheck;Meta tags should not be used to refresh or redirect;MAJOR;HTML;CODE_SMELL;{user-experience}
Web:MouseEventWithoutKeyboardEquivalentCheck;Mouse events should have corresponding keyboard events;MINOR;HTML;BUG;{accessibility}
Web:HeaderCheck;Track lack of copyright and license headers;BLOCKER;HTML;CODE_SMELL;{}
Web:LinkToNothingCheck;Links should not target # or javascript:void(0);MAJOR;HTML;CODE_SMELL;{user-experience}
Web:S1436;Track lack of required an element with the required id;MAJOR;HTML;CODE_SMELL;{convention}
Web:TableHeaderHasIdOrScopeCheck;<th> tags should have id or scope attributes;MAJOR;HTML;CODE_SMELL;{accessibility}
Web:ChildElementIllegalCheck;Track uses of disallowed child elements;MAJOR;HTML;CODE_SMELL;{}
Web:NonConsecutiveHeadingCheck;Heading tags should be used consecutively from H1 to H6;MINOR;HTML;CODE_SMELL;{accessibility}
Web:ImgWithoutAltCheck;Images tags and buttons should have an alt attribute;MINOR;HTML;BUG;{accessibility}
Web:InlineStyleCheck;The style attribute should not be used;MAJOR;HTML;CODE_SMELL;{}
Web:S1829;Web pages should not contain absolute URIs;MAJOR;HTML;CODE_SMELL;{}
Web:ComplexityCheck;Files should not be too complex;MAJOR;HTML;CODE_SMELL;{}
Web:MultiplePageDirectivesCheck;Multiple page directives should not be used;MINOR;HTML;CODE_SMELL;{convention,jsp-jsf}
Web:LinksIdenticalTextsDifferentTargetsCheck;Links with identical texts should have identical targets;MAJOR;HTML;CODE_SMELL;{accessibility}
Web:LongJavaScriptCheck;Javascript scriptlets should not have too many lines of code;MAJOR;HTML;CODE_SMELL;{brain-overload}
Web:FlashUsesBothObjectAndEmbedCheck;Flash animations should be embedded using both <object> and <embed>;MINOR;HTML;BUG;{cross-browser}
Web:InputWithoutLabelCheck;input, select and textarea tags should be labeled;MAJOR;HTML;BUG;{accessibility}
Web:ImgWithoutWidthOrHeightCheck;Buttons and image tags should have width and height attributes;MAJOR;HTML;BUG;{user-experience}
Web:JspScriptletCheck;JSP expressions should not be used;MAJOR;HTML;CODE_SMELL;{jsp-jsf,obsolete}
Web:IllegalTabCheck;Tabulation characters should not be used;MINOR;HTML;CODE_SMELL;{convention}
Web:IllegalAttributeCheck;Track uses of disallowed attributes;MAJOR;HTML;CODE_SMELL;{}
Web:WmodeIsWindowCheck;Flash animations should be embedded using the window mode;MINOR;HTML;BUG;{accessibility}
Web:LibraryDependencyCheck;Some Java packages or classes should not be used in JSP files;BLOCKER;HTML;CODE_SMELL;{jsp-jsf}
Web:LinkToImageCheck;Links should not directly target images;MAJOR;HTML;CODE_SMELL;{accessibility,user-experience}
Web:ItemTagNotWithinContainerTagCheck;<li> and <dt> item tags should be in <ul>, <ol> or <dl> container tags;MINOR;HTML;BUG;{}
Web:FieldsetWithoutLegendCheck;<fieldset> tags should contain a <legend>;MINOR;HTML;BUG;{accessibility}
Web:PageWithoutFaviconCheck;Favicons should be used in all pages;MAJOR;HTML;CODE_SMELL;{user-experience}
Web:InternationalizationCheck;Labels should be defined in the resource bundle;MAJOR;HTML;BUG;{user-experience}
Web:UnifiedExpressionCheck;JSF expressions should be syntactically valid;MAJOR;HTML;BUG;{}
common-cobol:InsufficientLineCoverage;Lines should have sufficient coverage by tests;MAJOR;COBOL;CODE_SMELL;{bad-practice}
common-cobol:InsufficientBranchCoverage;Branches should have sufficient coverage by tests;MAJOR;COBOL;CODE_SMELL;{bad-practice}
cobol:COBOL.DataItemInitialValueCheck;Data items should be initialized with data of the correct type;BLOCKER;COBOL;BUG;{}
cobol:COBOL.TransformStatementCheck;The OS/VS TRANSFORM statement should not be used;MAJOR;COBOL;CODE_SMELL;{lock-in}
cobol:S3671;BINARY variables should be used to declare variable-length table sizes;MAJOR;COBOL;CODE_SMELL;{performance}
cobol:S2583;Conditions should not unconditionally evaluate to TRUE or to FALSE;MAJOR;COBOL;BUG;{cert,cwe,misra,pitfall,unused}
cobol:SQL.CursorOpenedMustBeClosedCheck;Explicitly opened cursors should be closed;MINOR;COBOL;BUG;{cwe,sql}
cobol:COBOL.LogicalFileNamingCheck;Logical files should follow a naming convention;MINOR;COBOL;CODE_SMELL;{convention}
cobol:S1656;Variables should not be self-assigned;MAJOR;COBOL;BUG;{cert}
cobol:S1138;SQL EXISTS subqueries should not be used;MAJOR;COBOL;CODE_SMELL;{performance,sql}
cobol:COBOL.ParsingErrorCheck;Track parsing failures;MAJOR;COBOL;CODE_SMELL;{suspicious}
cobol:SQL.GroupByUsageCheck;GROUP BY should not be used in SQL SELECT statements;MAJOR;COBOL;CODE_SMELL;{brain-overload,performance,sql}
cobol:COBOL.ProgramNameCheck;Program names should comply with a naming convention;MINOR;COBOL;CODE_SMELL;{convention}
cobol:CICS.LinkOrXctlWithoutLengthClauseCheck;COMMAREA length should be specified in CICS Link and CICS Xctl commands;CRITICAL;COBOL;CODE_SMELL;{bad-practice}
cobol:COBOL.MergeStatementUsageCheck;MERGE should not be used;MAJOR;COBOL;CODE_SMELL;{performance}
cobol:S3394;ACCEPT should not be used;CRITICAL;COBOL;VULNERABILITY;{owasp-a1}
cobol:COBOL.IdentifierCharacterCheck;Disallowed characters should not be used in identifiers;MINOR;COBOL;CODE_SMELL;{lock-in}
cobol:S105;Tabulation characters should not be used;MINOR;COBOL;CODE_SMELL;{convention}
cobol:COBOL.ExhibitStatementUsageCheck;OS/VS EXHIBIT should not be used;MINOR;COBOL;CODE_SMELL;{lock-in}
cobol:S864;Limited dependence should be placed on operator precedence;MAJOR;COBOL;CODE_SMELL;{cert,cwe,misra}
cobol:COBOL.PerformThruExitParagraphCheck;The last paragraph of a PERFORM THRU should only contain an EXIT statement;MAJOR;COBOL;CODE_SMELL;{pitfall}
cobol:CICS.StatementWithUntestedReturnCodeCheck;The return codes of CICS commands with RESP or NOHANDLE conditions should be tested;CRITICAL;COBOL;CODE_SMELL;{error-handling}
cobol:S1302;Sections should not be too complex;CRITICAL;COBOL;CODE_SMELL;{brain-overload}
cobol:SQL.LockTableStatementCheck;LOCK TABLE should not be used;BLOCKER;COBOL;CODE_SMELL;{bad-practice,sql}
cobol:COBOL.NoSonarCheck;Track uses of NOSONAR comments;MAJOR;COBOL;CODE_SMELL;{bad-practice}
cobol:S122;Statements should be on separate lines;MAJOR;COBOL;CODE_SMELL;{style}
cobol:COBOL.IfStatementFormattingCheck;Ending words should be aligned with what they close;MAJOR;COBOL;CODE_SMELL;{convention}
cobol:S1308;GO TO should not be used;CRITICAL;COBOL;CODE_SMELL;{brain-overload}
cobol:S1307;Sections should end with an empty paragraph;MINOR;COBOL;CODE_SMELL;{convention}
cobol:S3606;Programs should begin with titles;MINOR;COBOL;CODE_SMELL;{convention}
cobol:S1306;PERFORM calls should not be nested too deeply;MAJOR;COBOL;CODE_SMELL;{brain-overload}
cobol:SQL.DistinctUsageCheck;DISTINCT should not be used in SQL SELECT statements;MAJOR;COBOL;CODE_SMELL;{bad-practice,performance,sql}
cobol:S1305;Sections should be documented;MAJOR;COBOL;CODE_SMELL;{convention}
cobol:S1303;Sections should not be empty;MAJOR;COBOL;CODE_SMELL;{unused}
cobol:COBOL.InitializeStatementUsageCheck;INITIALIZE should not be used;MINOR;COBOL;CODE_SMELL;{suspicious}
cobol:COBOL.ParagraphUncommentedCheck;Paragraphs should be documented;MAJOR;COBOL;CODE_SMELL;{convention}
cobol:COBOL.ClosableStatementCheck;Closable statements with nested statements should be closed;MAJOR;COBOL;CODE_SMELL;{confusing}
cobol:S1476;GOBACK should be used instead of STOP RUN;CRITICAL;COBOL;BUG;{}
cobol:S1631;SQL statements should not join too many tables;MAJOR;COBOL;CODE_SMELL;{brain-overload,performance,sql}
cobol:COBOL.FileDataItemSizeCheck;File data items should not exceed 63,488 characters;BLOCKER;COBOL;BUG;{microfocus}
cobol:S1474;The number of PERFORM statements in a procedure, section, or paragraph should be limited;CRITICAL;COBOL;CODE_SMELL;{brain-overload}
cobol:S1473;Sections and paragraphs should not perform more than one SQL operation;MAJOR;COBOL;CODE_SMELL;{brain-overload,sql}
cobol:S1110;Redundant pairs of parentheses should be removed;MAJOR;COBOL;CODE_SMELL;{confusing}
cobol:S3891;0 RECORDS should be specified for BLOCK CONTAINS;CRITICAL;COBOL;CODE_SMELL;{clumsy,suspicious}
cobol:S3892;COPY SUPPRESS should not be used;CRITICAL;COBOL;CODE_SMELL;{confusing}
cobol:S3938;Track uses of forbidden statements;INFO;COBOL;CODE_SMELL;{}
cobol:S3939;OCCURS DEPENDING ON should not be used;MAJOR;COBOL;CODE_SMELL;{confusing}
cobol:COBOL.PerformThruParagraphMandatoryCheck;PERFORM PARAGRAPH should not be used;MAJOR;COBOL;CODE_SMELL;{pitfall}
cobol:COBOL.FirstLevelDataItemNamingCheck;First level data items should follow a naming convention;MINOR;COBOL;CODE_SMELL;{convention}
cobol:COBOL.UnusedParagraphOrSectionLabelCheck;Unused paragraphs should be removed;MAJOR;COBOL;CODE_SMELL;{unused}
cobol:COBOL.AlterStatementUsageCheck;ALTER should not be used;BLOCKER;COBOL;CODE_SMELL;{brain-overload}
cobol:SQL.CursorOpenedInsideLoopCheck;Cursors should not be opened inside loops;CRITICAL;COBOL;CODE_SMELL;{leak,performance,sql}
cobol:COBOL.EvaluateStatementUsageCheck;EVALUATE structures should end with WHEN OTHERS clauses;CRITICAL;COBOL;CODE_SMELL;{cert,cwe,misra}
cobol:COBOL.IdentationCheck;Paragraphs and statements should be indented consistently;MINOR;COBOL;CODE_SMELL;{style}
cobol:COBOL.SectionUsageCheck;SECTION should not be used in a PROCEDURE DIVISION;CRITICAL;COBOL;CODE_SMELL;{brain-overload}
cobol:COBOL.PerformThruProcedureNamingConventionCheck;Procedures used in PERFORM ... THRU ... should share a naming convention;MAJOR;COBOL;CODE_SMELL;{convention}
cobol:S1590;DELETE and UPDATE statements should contain WHERE clauses;BLOCKER;COBOL;BUG;{sql}
cobol:S3890;SQLCODE or SQLSTATE should be tested after each SQL statement;MINOR;COBOL;CODE_SMELL;{error-handling,sql}
cobol:COBOL.ParagraphUsageCheck;Paragraphs should not be used;MAJOR;COBOL;CODE_SMELL;{pitfall}
cobol:S1192;String literals should not be duplicated;CRITICAL;COBOL;CODE_SMELL;{design}
cobol:COBOL.SortStatementUsageCheck;SORT should not be used;MAJOR;COBOL;CODE_SMELL;{performance}
cobol:COBOL.MagicNumberCheck;Magic numbers should not be used;MAJOR;COBOL;CODE_SMELL;{brain-overload}
cobol:COBOL.COMPUsageCheck;The COMPUTATIONAL data value clause should not be used;MAJOR;COBOL;CODE_SMELL;{lock-in}
cobol:SQL.CursorClosedInsideLoopCheck;Cursors should not be closed inside loops;CRITICAL;COBOL;CODE_SMELL;{performance,pitfall,sql}
cobol:COBOL.ExamineStatementUsageCheck;EXAMINE should not be used;MAJOR;COBOL;CODE_SMELL;{lock-in}
cobol:COBOL.FileCodeNamingCheck;File-Codes should comply with a naming convention;MINOR;COBOL;CODE_SMELL;{convention}
cobol:COBOL.LinkageSectionUsageCheck;Data used in a LINKAGE should be defined in a COPYBOOK;CRITICAL;COBOL;CODE_SMELL;{pitfall}
cobol:COBOL.ProgramComplexityCheck;The cyclomatic complexity of a program should not be too high;CRITICAL;COBOL;CODE_SMELL;{}
cobol:S3633;WHERE clause conditions should not be contradictory;MAJOR;COBOL;BUG;{sql}
cobol:S1731;READ statements should have an AT END or an INVALID KEY clause if FILE-STATUS is not defined;MAJOR;COBOL;CODE_SMELL;{suspicious}
cobol:S3632;Binary variables should be used for table subscript access;MAJOR;COBOL;CODE_SMELL;{performance}
cobol:COBOL.TypedefUsageCheck;New types should be defined in copybooks;MAJOR;COBOL;CODE_SMELL;{bad-practice}
cobol:S1693;The number of subprograms called in a program should be limited;MAJOR;COBOL;CODE_SMELL;{brain-overload}
cobol:SQL.SelectWithNoWhereClauseCheck;SQL SELECT statements should have WHERE conditions;BLOCKER;COBOL;VULNERABILITY;{performance,sql}
cobol:S1692;Files should not contain too many paragraphs;MAJOR;COBOL;CODE_SMELL;{brain-overload}
cobol:S3595;Binary search should be used for large tables;MINOR;COBOL;CODE_SMELL;{performance}
cobol:S1691;The number of COPY directives in a program should be limited;MAJOR;COBOL;CODE_SMELL;{brain-overload}
cobol:S1739;SQL LIKE clauses should not start with wildcard characters;MAJOR;COBOL;CODE_SMELL;{performance,sql}
cobol:S1738;SQL OR clauses testing equality on the same identifier should be replaced by an IN clause;MAJOR;COBOL;CODE_SMELL;{convention,sql}
cobol:S1737;A SQL BETWEEN clause should be used instead of X>=Y AND X<=Z;MAJOR;COBOL;CODE_SMELL;{convention,sql}
cobol:COBOL.ConditionComplexityCheck;Conditions should not use too many distinct data items;MAJOR;COBOL;CODE_SMELL;{brain-overload}
cobol:S1735;Column names should be used in a SQL ORDER BY clause;MAJOR;COBOL;CODE_SMELL;{sql}
cobol:COBOL.PerformThruSectionMandatoryCheck;PERFORM SECTION should not be used;MAJOR;COBOL;CODE_SMELL;{pitfall}
cobol:COBOL.FileUnusedCheck;Declared files should be used;MAJOR;COBOL;CODE_SMELL;{unused}
cobol:S1732;FOR READ ONLY or FOR UPDATE should be specified for DB2 cursors;MAJOR;COBOL;CODE_SMELL;{performance,sql}
cobol:S3515;SQL UPDATE statements should not impact columns included in partitioning indexes;MINOR;COBOL;CODE_SMELL;{performance,sql}
cobol:SQL.CursorDeclaredInsideProcedureDivisionCheck;CURSORs should not be declared inside procedure divisions;MINOR;COBOL;CODE_SMELL;{sql}
cobol:COBOL.ParagraphComplexityCheck;Paragraphs should not be too complex;CRITICAL;COBOL;CODE_SMELL;{brain-overload}
cobol:COBOL.RecursivePerformCheck;PERFORM calls should not be recursive;CRITICAL;COBOL;CODE_SMELL;{bad-practice,misra,pitfall,unpredictable}
cobol:S1729;Data items should never be accessed using more than one OF clause;MINOR;COBOL;CODE_SMELL;{convention}
cobol:S3592;Condition names should be named for their conditional variables;MAJOR;COBOL;CODE_SMELL;{confusing}
cobol:SQL.SelectStatementsNestedCheck;Nested SQL SELECT statements should not be used;MAJOR;COBOL;CODE_SMELL;{brain-overload,performance,sql}
cobol:COBOL.ParagraphEmptyCheck;Paragraphs should not be empty;MAJOR;COBOL;CODE_SMELL;{unused}
cobol:SQL.SelectStarUsageCheck;Columns to be read with a SELECT statement should be clearly defined;MAJOR;COBOL;CODE_SMELL;{performance,sql}
cobol:COBOL.GotoTransferControlOutsideCurrentModuleCheck;GO TO statements should not transfer control outside their modules;MAJOR;COBOL;BUG;{unpredictable}
cobol:S1742;SQL WHERE clauses should use ANSI standard operators;MINOR;COBOL;CODE_SMELL;{lock-in,sql}
cobol:S1741;SQL tables should be joined with the JOIN keyword;MINOR;COBOL;CODE_SMELL;{obsolete,sql}
cobol:S1069;DDL statements should not be used;BLOCKER;COBOL;CODE_SMELL;{bad-practice,sql}
cobol:S1862;Conditions in related IF/ELSE IF statements and WHEN clauses in EVALUATE statements should not have the same condition;MAJOR;COBOL;BUG;{cert,pitfall,unused}
cobol:S1740;Arithmetic expressions and scalar functions should not be used in WHERE conditions;MINOR;COBOL;CODE_SMELL;{performance,sql}
cobol:S3004;SQL UPDATE statements should not change primary key values;CRITICAL;COBOL;BUG;{sql}
cobol:S3643;LIKE clauses should not be used without wildcards;CRITICAL;COBOL;CODE_SMELL;{sql}
cobol:S1066;Collapsible IF statements should be merged;MAJOR;COBOL;CODE_SMELL;{clumsy}
cobol:COBOL.CopyInsideProcedureDivisionCheck;Copybooks should be used to share data structures, not procedural logic;CRITICAL;COBOL;CODE_SMELL;{pitfall}
cobol:COBOL.ProgramLinesOfCodeCheck;Programs should not have too many lines of code;MAJOR;COBOL;CODE_SMELL;{brain-overload}
cobol:S1461;Unused sections should be removed;MAJOR;COBOL;CODE_SMELL;{unused}
cobol:S1747;Level 77 should not be used;MINOR;COBOL;CODE_SMELL;{convention}
cobol:COBOL.EvaluateWhenBlockWithConditionalLogicCheck;EVALUATE ... WHEN statements should not contain conditional logic;CRITICAL;COBOL;CODE_SMELL;{brain-overload}
cobol:S3921;Strings should only be moved to variables large enough to hold them without truncation;MAJOR;COBOL;BUG;{cwe}
cobol:S1619;Packed numeric fields should be defined with odd length;MAJOR;COBOL;CODE_SMELL;{}
cobol:SQL.CursorDeclaredInsideLoopCheck;Cursors should not be declared inside loops;CRITICAL;COBOL;CODE_SMELL;{performance,sql}
cobol:S3482;INSERT statements should not set the values of identity columns;CRITICAL;COBOL;BUG;{sql}
cobol:COBOL.CommentedOutCodeCheck;Sections of code should not be commented out;MAJOR;COBOL;CODE_SMELL;{misra,unused}
cobol:COBOL.OnStatementUsageCheck;The OS/VS ON statement should not be used;MAJOR;COBOL;CODE_SMELL;{lock-in}
cobol:S3483;SELECT statements should not lead to full table scans;MAJOR;COBOL;CODE_SMELL;{performance,sql}
cobol:S3481;UPDATE and DELETE statements should not impact multiple rows;BLOCKER;COBOL;CODE_SMELL;{sql,suspicious}
cobol:SQL.UnionUsageCheck;UNION should not be used in SELECT statements;MAJOR;COBOL;CODE_SMELL;{performance,sql}
cobol:COBOL.ExitProgramUsageCheck;EXIT PROGRAM should be the last statement of a sequence;MAJOR;COBOL;BUG;{unused}
cobol:S3573;CALL programs should be specified dynamically;MAJOR;COBOL;CODE_SMELL;{bad-practice}
cobol:S3618;Inserts should include values for non-null columns;BLOCKER;COBOL;BUG;{sql}
cobol:S1713;PERFORM ... THRU ... should not be used;CRITICAL;COBOL;CODE_SMELL;{pitfall}
cobol:COBOL.UnusedDataItem;Unused data item blocks should be removed;MAJOR;COBOL;CODE_SMELL;{unused}
cobol:S2527;NULL should not be compared directly;MAJOR;COBOL;BUG;{sql}
cobol:COBOL.ProgramIdAndFileNameCheck;PROGRAM-IDs should match their file names;CRITICAL;COBOL;BUG;{pitfall}
cobol:S3613;Fetches should use all of the columns selected in their cursors;MINOR;COBOL;CODE_SMELL;{confusing,sql}
cobol:S3614;Fetches should not select more columns than their cursors;MAJOR;COBOL;BUG;{sql}
cobol:COBOL.ParagraphNamingCheck;Paragraphs should follow a naming convention;MAJOR;COBOL;CODE_SMELL;{convention}
cobol:COBOL.PerformThruParagraphOrderCheck;The second procedure of a PERFORM THRU statement should be defined after the first procedure;CRITICAL;COBOL;BUG;{}
cobol:SQL.CursorDeclaredWithNoOrderByClauseCheck;ORDER BY should be specified for cursors;MAJOR;COBOL;BUG;{sql}
cobol:COBOL.FileStatusUsageCheck;FILE STATUS should be checked after IO operations when it is available;CRITICAL;COBOL;CODE_SMELL;{error-handling}
cobol:COBOL.RedefineUsageCheck;REDEFINES should not be used;CRITICAL;COBOL;CODE_SMELL;{pitfall}
cobol:COBOL.SqlUsageCheck;Track uses of SQL;MAJOR;COBOL;CODE_SMELL;{sql}
cobol:S1686;When calling a subprogram, the data item containing the name of the subprogram to be called should not be programmatically updat;CRITICAL;COBOL;VULNERABILITY;{pitfall}
cobol:S1685;WITH DEBUGGING MODE should not be used;MINOR;COBOL;VULNERABILITY;{cwe,debug,owasp-a3}
cobol:S3620;Default column values should not be set explicitly in inserts;MINOR;COBOL;CODE_SMELL;{clumsy,sql}
cobol:COBOL.DisplayStatementUsageCheck;DISPLAY should not be used;MINOR;COBOL;VULNERABILITY;{cwe}
cobol:COBOL.NextSentenceUsageCheck;NEXT SENTENCE should not be used;MAJOR;COBOL;CODE_SMELL;{pitfall}
cobol:S3621;Selects should include null indicators for nullable columns;MAJOR;COBOL;BUG;{sql}
cobol:SQL.LikeUsageCheck;The LIKE operator should be used very carefully in SQL WHERE condition;MAJOR;COBOL;CODE_SMELL;{performance,sql}
cobol:S1683;Copybooks should not contain keywords relating to the nature or structure of a program;CRITICAL;COBOL;CODE_SMELL;{bad-practice}
cobol:COBOL.HeaderCheck;Track lack of copyright and license headers;BLOCKER;COBOL;CODE_SMELL;{}
cobol:COBOL.ProgramNamingCheck;File names should comply with a naming convention;MINOR;COBOL;CODE_SMELL;{cert,convention}
cobol:S1682;OCCURS 1 should not be used on data items;MINOR;COBOL;CODE_SMELL;{clumsy,performance}
cobol:S1728;Data item declarations should be aligned;MINOR;COBOL;CODE_SMELL;{convention}
cobol:S1969;Section names should be unique within a program;BLOCKER;COBOL;CODE_SMELL;{suspicious,unused}
cobol:COBOL.IfStatementNestedUsageCheck;Control flow statements should not be nested too deeply;CRITICAL;COBOL;CODE_SMELL;{brain-overload}
cobol:S1726;TO keywords should be aligned in a sequence of MOVE statements;MINOR;COBOL;CODE_SMELL;{convention}
cobol:S1967;Numbers should only be moved to variables large enough to hold them without truncation;BLOCKER;COBOL;BUG;{cwe}
cobol:S1725;Open files should be closed explicitly;CRITICAL;COBOL;CODE_SMELL;{bad-practice,cwe}
cobol:S1723;Paragraphs should not be redefined;MAJOR;COBOL;BUG;{pitfall}
cobol:CICS.StatementWithoutRespOptionCheck;Either RESP or NOHANDLE should be used with CICS commands;CRITICAL;COBOL;CODE_SMELL;{error-handling}
cobol:COBOL.ModuleLinesOfCodeCheck;Modules should not have too many lines;MAJOR;COBOL;CODE_SMELL;{brain-overload}
cobol:S3625;Unused TABLE declarations should be removed;MINOR;COBOL;CODE_SMELL;{sql,unused}
cobol:COBOL.CallParameterInitializationCheck;CALL statement parameters should be initialized;MAJOR;COBOL;BUG;{}
cobol:COBOL.NoteStatementUsageCheck;The OS/VS NOTE statement should not be used;MINOR;COBOL;CODE_SMELL;{lock-in}
cobol:COBOL.CorrespondingClauseUsageCheck;CORRESPONDING should not be used in ADD, SUBTRACT, and MOVE statements;MINOR;COBOL;BUG;{pitfall}
cobol:COBOL.DataValueClauseLinkageSectionCheck;Data value clauses should not be used in linkage sections;CRITICAL;COBOL;BUG;{}
cobol:COBOL.OpenStatementInLoopUsageCheck;OPEN should not be used inside a loop;MAJOR;COBOL;CODE_SMELL;{performance}
cobol:S3581;Variables of different numeric formats should not be compared;MAJOR;COBOL;CODE_SMELL;{performance}
cobol:S3582;Conditional variables should not be compared with literals;MAJOR;COBOL;CODE_SMELL;{clumsy}
cobol:S3580;Math should only be performed on computational variables;MAJOR;COBOL;CODE_SMELL;{performance}
common-objc:InsufficientLineCoverage;Lines should have sufficient coverage by tests;MAJOR;Objective-C;CODE_SMELL;{bad-practice}
common-objc:InsufficientBranchCoverage;Branches should have sufficient coverage by tests;MAJOR;Objective-C;CODE_SMELL;{bad-practice}
vb:S1653;Loop invariants should not be calculated inside the loop;MAJOR;Vb;CODE_SMELL;{}
vb:S1652;Asc[W] should not be called on string constants;MAJOR;Vb;CODE_SMELL;{performance}
vb:S1650;'$' should not be used in string variable names;MINOR;Vb;CODE_SMELL;{clumsy}
vb:S1651;Chr[W]$() should not be used for certain characters;MAJOR;Vb;CODE_SMELL;{performance}
vb:S1131;Lines should not end with trailing whitespaces;MINOR;Vb;CODE_SMELL;{convention}
vb:S1658;Error handlers should not declare their own error handlers;MAJOR;Vb;BUG;{}
vb:S1657;Option Base should not be used;BLOCKER;Vb;CODE_SMELL;{pitfall}
vb:S1479;Select Case statements should not have too many Case clauses;MAJOR;Vb;CODE_SMELL;{brain-overload}
vb:S103;Lines should not be too long;MAJOR;Vb;CODE_SMELL;{convention}
vb:S1151;Case clauses should not have too many lines;MAJOR;Vb;CODE_SMELL;{brain-overload}
vb:S109;Magic numbers should not be used;MAJOR;Vb;CODE_SMELL;{brain-overload}
vb:S1126;Return of boolean expressions should not be wrapped into an if-then-else statement;MINOR;Vb;CODE_SMELL;{clumsy}
vb:S1125;Boolean literals should not be redundant;MINOR;Vb;CODE_SMELL;{clumsy}
vb:S1542;Sub and function names should comply with a naming convention;MAJOR;Vb;CODE_SMELL;{convention}
vb:S1068;Unused private variables should be removed;MAJOR;Vb;CODE_SMELL;{unused}
vb:S1541;Subs and functions should not be too complex;CRITICAL;Vb;CODE_SMELL;{brain-overload}
vb:ParseError;Track parsing failures;MAJOR;Vb;CODE_SMELL;{suspicious}
vb:S1067;Expressions should not be too complex;CRITICAL;Vb;CODE_SMELL;{brain-overload}
vb:S1660;The bang (!) operator should not be used;MAJOR;Vb;CODE_SMELL;{performance}
vb:S1120;Source code should be indented consistently;MINOR;Vb;CODE_SMELL;{style}
vb:S122;Statements should be on separate lines;MAJOR;Vb;CODE_SMELL;{style}
vb:S1649;String-specific functions should be used;MAJOR;Vb;CODE_SMELL;{performance}
vb:S1648;Strings should not be set to empty string;MAJOR;Vb;CODE_SMELL;{performance}
vb:S1702;Variable data types should be declared explicitly;MAJOR;Vb;CODE_SMELL;{performance}
vb:S1647;Strings should not be compared with empty string;MAJOR;Vb;CODE_SMELL;{performance}
vb:S1645;The & operator should be used to concatenate strings;CRITICAL;Vb;CODE_SMELL;{suspicious}
vb:S138;Subs and functions should not have too many lines;MAJOR;Vb;CODE_SMELL;{brain-overload}
vb:S115;Constant names should comply with a naming convention;CRITICAL;Vb;CODE_SMELL;{convention}
vb:S139;Comments should not be located at the end of lines of code;MINOR;Vb;CODE_SMELL;{convention}
tsql:S3633;WHERE clause conditions should not be contradictory;MAJOR;T-SQL;BUG;{sql}
tsql:S1499;Columns to be read with a SELECT statement should be clearly defined;MAJOR;T-SQL;CODE_SMELL;{performance,sql}
tsql:S1135;Track uses of TODO tags;INFO;T-SQL;CODE_SMELL;{cwe}
tsql:S1134;Track uses of FIXME tags;MAJOR;T-SQL;CODE_SMELL;{cwe}
tsql:S1739;LIKE clauses should not start with wildcard characters;MAJOR;T-SQL;CODE_SMELL;{performance,sql}
tsql:S1735;Column names should be used in an ORDER BY clause;MAJOR;T-SQL;CODE_SMELL;{sql}
tsql:S1656;Variables should not be self-assigned;MAJOR;T-SQL;BUG;{cert}
tsql:S103;Lines should not be too long;MAJOR;T-SQL;CODE_SMELL;{convention}
tsql:S105;Tabulation characters should not be used;MINOR;T-SQL;CODE_SMELL;{convention}
tsql:S2260;Track parsing failures;MAJOR;T-SQL;CODE_SMELL;{suspicious}
tsql:S107;Functions and procedures should not have too many parameters;MAJOR;T-SQL;CODE_SMELL;{brain-overload}
tsql:S4413;Reserved keywords should not be used as identifiers or object names;MINOR;T-SQL;CODE_SMELL;{}
tsql:S1742;Non-standard comparison operators should not be used;MINOR;T-SQL;CODE_SMELL;{lock-in,sql}
tsql:S1862;Related IF/ELSE IF statements and WHEN clauses in a CASE should not have the same condition;MAJOR;T-SQL;BUG;{cert,pitfall,unused}
tsql:S1542;Function and procedure names should comply with a naming convention;MAJOR;T-SQL;CODE_SMELL;{convention}
tsql:S3643;LIKE clauses should not be used without wildcards;MINOR;T-SQL;CODE_SMELL;{sql}
tsql:S1066;Collapsible if statements should be merged;MAJOR;T-SQL;CODE_SMELL;{clumsy}
tsql:S122;Statements should be on separate lines;MAJOR;T-SQL;CODE_SMELL;{style}
tsql:S1745;INSERT statements should explicitly list the columns to be set;CRITICAL;T-SQL;CODE_SMELL;{sql}
tsql:S4094;CASE input expressions should be invariant;CRITICAL;T-SQL;BUG;{unpredictable}
tsql:S117;Local variable and parameter names should comply with a naming convention;MINOR;T-SQL;CODE_SMELL;{convention}
tsql:S4149;Column references should not have more than two-parts;MINOR;T-SQL;CODE_SMELL;{obsolete}
tsql:S1631;Queries should not join too many tables;MAJOR;T-SQL;CODE_SMELL;{brain-overload,performance,sql}
tsql:S3972;Conditionals should start on new lines;CRITICAL;T-SQL;CODE_SMELL;{suspicious}
tsql:S3973;Conditionally executed code should be denoted by either indentation or BEGIN...END block;CRITICAL;T-SQL;CODE_SMELL;{confusing,suspicious}
tsql:S2761;Unary prefix operators should not be repeated;MAJOR;T-SQL;BUG;{}
tsql:S1110;Redundant pairs of parentheses should be removed;MAJOR;T-SQL;CODE_SMELL;{confusing}
tsql:S134;Control flow statements IF, WHILE and TRY should not be nested too deeply;CRITICAL;T-SQL;CODE_SMELL;{brain-overload}
tsql:S4103;The number of variables in a FETCH statement should match the number of columns in the cursor;CRITICAL;T-SQL;BUG;{}
tsql:S2681;Multiline blocks should be enclosed in BEGIN...END blocks;MAJOR;T-SQL;CODE_SMELL;{cert,cwe}
tsql:S4102;CHECK or NOCHECK should be specified explicitly when constraints are activated;MAJOR;T-SQL;CODE_SMELL;{pitfall}
tsql:NoSonar;Track uses of NOSONAR comments;MAJOR;T-SQL;CODE_SMELL;{bad-practice}
tsql:S4109;Triggers should not PRINT, SELECT, or FETCH;MINOR;T-SQL;CODE_SMELL;{unused}
tsql:S2527;NULL should not be compared directly;MAJOR;T-SQL;BUG;{sql}
tsql:S4108;@@IDENTITY should not be used;MAJOR;T-SQL;CODE_SMELL;{suspicious,unpredictable}
tsql:S1479;CASE expressions should not have too many WHEN clauses;MAJOR;T-SQL;CODE_SMELL;{brain-overload}
tsql:S1151;WHEN clauses should not have too many lines of code;MAJOR;T-SQL;CODE_SMELL;{brain-overload}
tsql:S1192;String literals should not be duplicated;CRITICAL;T-SQL;CODE_SMELL;{design}
tsql:S4142;Duplicate values should not be passed as arguments;MAJOR;T-SQL;CODE_SMELL;{}
tsql:S4078;Size should be specified for varchar variables and parameters;CRITICAL;T-SQL;CODE_SMELL;{suspicious}
tsql:S4155;Deprecated system tables and views should not be used;MAJOR;T-SQL;CODE_SMELL;{obsolete}
tsql:S1481;Unused local variables should be removed;MINOR;T-SQL;CODE_SMELL;{unused}
tsql:S4196;Output parameters should be assigned;MAJOR;T-SQL;BUG;{pitfall}
tsql:S138;Functions and stored procedure should not have too many lines of code;MAJOR;T-SQL;CODE_SMELL;{brain-overload}
tsql:S4154;ANSI_NULLS, ANSI_PADDING and CONCAT_NULL_YIELDS_NULL should not be configured;MAJOR;T-SQL;CODE_SMELL;{obsolete}
tsql:S4075;Deprecated features should not be used;MAJOR;T-SQL;CODE_SMELL;{obsolete}
pli:S1499;Columns to be read with a SELECT statement should be clearly defined;MAJOR;PL/I;CODE_SMELL;{performance,sql}
pli:S3982;Parentheses should be used in factored variable declarations;MAJOR;PL/I;BUG;{}
pli:ProcedureName;Procedure names should comply with a naming convention;MAJOR;PL/I;CODE_SMELL;{convention}
pli:OneStatementPerLine;Statements should be on separate lines;MAJOR;PL/I;CODE_SMELL;{style}
pli:SelectWithoutOtherwise;SELECT statements should end with OTHERWISE statements;BLOCKER;PL/I;CODE_SMELL;{cert,cwe,misra}
pli:S4208;INONLY or NONASSIGNABLE parameters should not be written to;MAJOR;PL/I;CODE_SMELL;{}
pli:LineLength;Lines should not be too long;MAJOR;PL/I;CODE_SMELL;{convention}
pli:NestedIfDepth;if statements should not be nested too deeply;CRITICAL;PL/I;CODE_SMELL;{brain-overload}
pli:CommentRegularExpression;Track comments matching a regular expression;MAJOR;PL/I;CODE_SMELL;{}
pli:Dcl;The DCL abbreviation should not be used;MINOR;PL/I;CODE_SMELL;{convention}
pli:LanguageKeywordUsage;Keywords should not be used as variable names;BLOCKER;PL/I;CODE_SMELL;{pitfall}
pli:Filename;File names should comply with a naming convention;MINOR;PL/I;CODE_SMELL;{cert,convention}
pli:DoEndUsageWithIfElse;IF / ELSE statements should use DO ... END structures;CRITICAL;PL/I;CODE_SMELL;{cert,misra,pitfall}
pli:VariableName;Variable names should comply with a naming convention;MAJOR;PL/I;CODE_SMELL;{convention}
pli:S1619;FIXED DECIMAL declarations should be defined with odd length;MAJOR;PL/I;CODE_SMELL;{}
pli:Goto;GO TO statements should not be used;MAJOR;PL/I;CODE_SMELL;{brain-overload,misra}
pli:MultiLineString;String constants should not span multiple lines;MINOR;PL/I;CODE_SMELL;{bad-practice}
pli:XPath;Track breaches of an XPath rule;MAJOR;PL/I;CODE_SMELL;{}
pli:ProcedureParameterCount;Procedures should not have too many parameters;MAJOR;PL/I;CODE_SMELL;{brain-overload}
pli:EndAlignment;END statements should have the same indentation level as their matching PROCEDURE, SELECT, and DO statements;MAJOR;PL/I;CODE_SMELL;{convention}
rpg:S1895;The *srcstmt header option should be used;MAJOR;RPG;CODE_SMELL;{confusing,error-reporting}
rpg:S1499;Columns to be read with a SELECT statement should be clearly defined;MAJOR;RPG;CODE_SMELL;{performance,sql}
rpg:S2025;/COPY statements should include specification letters;MINOR;RPG;CODE_SMELL;{convention}
rpg:S1451;Track lack of copyright and license headers;BLOCKER;RPG;CODE_SMELL;{}
rpg:S1816;Unused subprocedures should be removed;MAJOR;RPG;CODE_SMELL;{unused}
rpg:S1618;E should be found in F-spec lines;MAJOR;RPG;CODE_SMELL;{}
rpg:S1617;Error handling should be defined in F specs;CRITICAL;RPG;CODE_SMELL;{error-handling}
rpg:S1899;Variables used in only one subprocedure should not be global;MAJOR;RPG;CODE_SMELL;{pitfall}
rpg:S1656;Variables should not be self-assigned;MAJOR;RPG;BUG;{cert}
rpg:S907;GOTO statements should not be used;MAJOR;RPG;CODE_SMELL;{brain-overload,misra}
rpg:S1608;Standard figurative constants *ON, *OFF and *BLANK should be used in place of '1', '0' and ' ';MAJOR;RPG;CODE_SMELL;{}
rpg:S104;Files should not have too many lines;MAJOR;RPG;CODE_SMELL;{brain-overload}
rpg:S108;Nested blocks of code should not be left empty;MAJOR;RPG;CODE_SMELL;{suspicious}
rpg:S1621;IF statements should not be conditioned on Indicators;MAJOR;RPG;CODE_SMELL;{}
rpg:S1620;LIKE keyword should be used to define work fields;MAJOR;RPG;CODE_SMELL;{}
rpg:S1862;Related IF/ELSEIF statements and WHEN clauses in a SELECT should not have the same condition;MAJOR;RPG;BUG;{cert,pitfall,unused}
rpg:S2798;Compile-time arrays should not be used;MAJOR;RPG;CODE_SMELL;{confusing}
rpg:S2795;Optional operation codes should be omitted;MINOR;RPG;CODE_SMELL;{clumsy}
rpg:S1068;Unused variables should be removed;MAJOR;RPG;CODE_SMELL;{unused}
rpg:S1541;Subroutines should not be too complex;CRITICAL;RPG;CODE_SMELL;{brain-overload}
rpg:S2793;QUALIFIED data structures should be used;MAJOR;RPG;CODE_SMELL;{clumsy}
rpg:S1067;Expressions should not be too complex;CRITICAL;RPG;CODE_SMELL;{brain-overload}
rpg:S1629;The correct ENDxx statement should be used;MAJOR;RPG;CODE_SMELL;{}
rpg:S1628;Debugging statements DEBUG(*YES) and DUMP should not be used;MINOR;RPG;VULNERABILITY;{cwe,owasp-a3}
rpg:S1902;Subprocedures should not reference global variables;CRITICAL;RPG;CODE_SMELL;{brain-overload}
rpg:S1627;Line count data should be retrieved from the file information data structure;MAJOR;RPG;BUG;{}
rpg:S1901;/EJECT should be used after F, D and C specification sections;MINOR;RPG;CODE_SMELL;{convention}
rpg:S1900;CONST should be used for parameters that are not modified;MINOR;RPG;CODE_SMELL;{}
rpg:S1548;Subroutines should be documented;MAJOR;RPG;CODE_SMELL;{}
rpg:S1625;Indicators should be used on CHAIN statements;MINOR;RPG;CODE_SMELL;{error-handling}
rpg:S1624;The first parameter of a CHAIN/READx statement should be a KLIST;MAJOR;RPG;CODE_SMELL;{}
rpg:S1622;The parameters of a CALL or CALLB statement should be defined as a PLIST;MAJOR;RPG;CODE_SMELL;{}
rpg:S1619;Numeric fields should be defined as odd length packed fields;MAJOR;RPG;CODE_SMELL;{}
rpg:S2031;Comment lines should not be too long;MINOR;RPG;CODE_SMELL;{convention}
rpg:S1753;IF blocks should not have too many lines;MAJOR;RPG;CODE_SMELL;{brain-overload}
rpg:S1632;/COPY should be avoided;MAJOR;RPG;CODE_SMELL;{}
rpg:S1631;SQL statements should not join too many tables;MAJOR;RPG;CODE_SMELL;{brain-overload,performance,sql}
rpg:S1752;DO blocks should not have too many lines;MAJOR;RPG;CODE_SMELL;{brain-overload}
rpg:S1630;All opened USROPN files should be explicitly closed;CRITICAL;RPG;BUG;{cwe}
rpg:S2202;Prototypes should be used;MAJOR;RPG;CODE_SMELL;{convention,obsolete}
rpg:S1871;Two branches in a conditional structure should not have exactly the same implementation;MAJOR;RPG;CODE_SMELL;{design,suspicious}
rpg:S134;Control flow statements IF, FOR, DO, ... should not be nested too deeply;CRITICAL;RPG;CODE_SMELL;{brain-overload}
rpg:S2803;Multiple occurrence data structures should not be used;MAJOR;RPG;CODE_SMELL;{performance}
rpg:S1634;Non-input files should be accessed with the no lock option;MINOR;RPG;BUG;{}
rpg:S1633;The data area structure for IN should be defined in D spec lines.;MAJOR;RPG;CODE_SMELL;{}
rpg:S1626;Track uses of disallowed operation codes;MAJOR;RPG;CODE_SMELL;{}
rpg:S1151;SELECT WHEN clauses should not have too many lines;MAJOR;RPG;CODE_SMELL;{brain-overload}
rpg:S125;Sections of code should not be commented out;MAJOR;RPG;CODE_SMELL;{misra,unused}
rpg:S1192;String literals should not be duplicated;CRITICAL;RPG;CODE_SMELL;{design}
rpg:S126;IF ... ELSEIF constructs should end with ELSE clauses;CRITICAL;RPG;CODE_SMELL;{cert,misra}
rpg:S2016;Subprocedures should be used instead of subroutines;CRITICAL;RPG;CODE_SMELL;{obsolete}
rpg:S1764;Identical expressions should not be used on both sides of a binary operator;MAJOR;RPG;BUG;{cert}
rpg:S1880;Record formats  should be cleared before each use;CRITICAL;RPG;BUG;{}
rpg:S100;Subroutine names should comply with a naming convention;MINOR;RPG;CODE_SMELL;{convention}
rpg:S1601;Unused subroutines should be removed;MINOR;RPG;CODE_SMELL;{unused}
rpg:S138;Subroutines should not have too manylines;MAJOR;RPG;CODE_SMELL;{brain-overload}
common-flex:InsufficientLineCoverage;Lines should have sufficient coverage by tests;MAJOR;Flex;CODE_SMELL;{bad-practice}
common-flex:InsufficientBranchCoverage;Branches should have sufficient coverage by tests;MAJOR;Flex;CODE_SMELL;{bad-practice}
c:S1135;Track uses of TODO tags;INFO;C;CODE_SMELL;{cwe}
c:S1134;Track uses of FIXME tags;MAJOR;C;CODE_SMELL;{cwe}
c:S1133;Deprecated code should be removed;INFO;C;CODE_SMELL;{obsolete}
c:S1131;Lines should not end with trailing whitespaces;MINOR;C;CODE_SMELL;{convention}
c:S2343;Enumeration values should comply with a naming convention;MINOR;C;CODE_SMELL;{convention}
c:S1259;typedef should be used for function pointers;CRITICAL;C;CODE_SMELL;{}
c:S3689;Declaration specifiers should not be redundant;MAJOR;C;BUG;{redundant}
c:S2234;Parameters should be passed in the correct order;MAJOR;C;CODE_SMELL;{}
c:S1264;A while loop should be used instead of a for loop;MINOR;C;CODE_SMELL;{clumsy}
c:S3687;Atomic types should be used instead of volatile types;MAJOR;C;CODE_SMELL;{c11,cpp11,multi-threading}
c:S1142;Functions should not contain too many return statements;MAJOR;C;CODE_SMELL;{brain-overload}
c:S3562;switch statements should cover all cases;MAJOR;C;CODE_SMELL;{suspicious}
c:S1705;The prefix increment/decrement form should be used;MINOR;C;CODE_SMELL;{performance}
c:S1821;switch statements should not be nested;CRITICAL;C;CODE_SMELL;{pitfall}
c:S1820;Structures should not have too many fields;MAJOR;C;CODE_SMELL;{brain-overload}
c:S1110;Redundant pairs of parentheses should be removed;MAJOR;C;CODE_SMELL;{confusing}
c:S2681;Multiline blocks should be enclosed in curly braces;MAJOR;C;CODE_SMELL;{cert,cwe}
c:S1479;switch statements should not have too many case clauses;MAJOR;C;CODE_SMELL;{brain-overload}
c:S1123;Deprecated attributes should include explanations;MAJOR;C;CODE_SMELL;{bad-practice,obsolete}
c:S3358;Conditional operators should not be nested;MAJOR;C;CODE_SMELL;{confusing}
c:PPBackslashNotLastCharacter;Line continuation characters '\' should not be followed by trailing whitespace;MINOR;C;BUG;{}
c:S3231;Forward declarations should not be redundant;MINOR;C;CODE_SMELL;{redundant,unused}
c:PPMacroName;Macro names should comply with a naming convention;MINOR;C;CODE_SMELL;{convention,preprocessor}
c:PPDirectiveIndentation;Preprocessor directives should not be indented;CRITICAL;C;CODE_SMELL;{pitfall,style}
c:S1291;Track uses of NOSONAR comments;MAJOR;C;CODE_SMELL;{bad-practice}
c:S1862;Related if/else if statements should not have the same condition;MAJOR;C;BUG;{cert,pitfall,unused}
c:S1066;Collapsible if statements should be merged;MAJOR;C;CODE_SMELL;{clumsy}
c:S1067;Expressions should not be too complex;CRITICAL;C;CODE_SMELL;{brain-overload}
c:S3806;#include paths should be portable;MAJOR;C;CODE_SMELL;{pitfall}
c:NonReentrantFunction;Non-reentrant POSIX functions should be replaced with their reentrant versions;BLOCKER;C;CODE_SMELL;{multi-threading}
c:CommentMixedStyles;Comment styles // and /* ... */ should not be mixed within a file;MINOR;C;CODE_SMELL;{cert,convention}
c:S3807;Parameter values should be appropriate;CRITICAL;C;BUG;{}
c:S3805;#import should not be used;MAJOR;C;CODE_SMELL;{}
c:S3458;Empty case clauses that fall through to the default should be omitted;MINOR;C;CODE_SMELL;{clumsy,finding}
c:EmptyCompoundStatement;Nested blocks of code should not be left empty;MAJOR;C;CODE_SMELL;{suspicious}
c:S2123;Values should not be uselessly incremented;MAJOR;C;BUG;{unused}
c:S134;Control flow statements if, for, while, switch and try should not be nested too deeply;CRITICAL;C;CODE_SMELL;{brain-overload}
c:S2806;Bit fields should not be used;BLOCKER;C;CODE_SMELL;{performance,pitfall}
c:FunctionComplexity;Functions should not be too complex;CRITICAL;C;CODE_SMELL;{brain-overload}
c:CommentRegularExpression;Track comments matching a regular expression;MAJOR;C;CODE_SMELL;{}
c:S1707;Track TODO and FIXME comments that do not contain a reference to a person;MINOR;C;CODE_SMELL;{convention}
c:S1151;switch case clauses should not have too many lines of code;MAJOR;C;CODE_SMELL;{brain-overload}
c:S2259;Null pointers should not be dereferenced;MAJOR;C;BUG;{cert,cwe}
c:S3588;Closed resources should not be accessed;BLOCKER;C;BUG;{cert}
c:S3584;Dynamically allocated memory should be released;BLOCKER;C;BUG;{cert,cwe,denial-of-service,leak}
c:SizeofSizeof;sizeof(sizeof(...)) should not be used;MAJOR;C;BUG;{}
c:S138;Functions/methods should not have too many lines;MAJOR;C;CODE_SMELL;{brain-overload}
c:S139;Comments should not be located at the end of lines of code;MINOR;C;CODE_SMELL;{convention}
c:S1774;The ternary operator should not be used;MAJOR;C;CODE_SMELL;{brain-overload}
c:S1772;Constants should come first in equality tests;MINOR;C;CODE_SMELL;{convention}
c:ParsingError;Track parsing failures;MAJOR;C;CODE_SMELL;{suspicious}
c:LineLength;Lines should not be too long;MAJOR;C;CODE_SMELL;{convention}
c:S3715;GNU extensions should not be used;MINOR;C;CODE_SMELL;{gnu,lock-in,obsolete}
c:S1656;Variables should not be self-assigned;MAJOR;C;BUG;{cert}
c:S107;Functions should not have too many parameters;MAJOR;C;CODE_SMELL;{brain-overload}
c:S2754;Declarations should not be empty;MINOR;C;CODE_SMELL;{cert,unused}
c:S3728;String literals should not be concatenated implicitly;MINOR;C;CODE_SMELL;{confusing}
c:S3729;Array indices should be placed between brackets;BLOCKER;C;CODE_SMELL;{pitfall}
c:S2757;=+ should not be used instead of +=;MAJOR;C;BUG;{}
c:S2637;nonnull pointers should not be set to null;MINOR;C;BUG;{cert,cwe}
c:S113;Files should contain an empty newline at the end;MINOR;C;CODE_SMELL;{convention}
c:S116;Field names should comply with a naming convention;MINOR;C;CODE_SMELL;{convention}
c:S117;Local variable and function parameter names should comply with a naming convention;MINOR;C;CODE_SMELL;{convention}
c:S1874;Code annotated as deprecated should not be used;MINOR;C;CODE_SMELL;{cert,cwe,obsolete}
c:S1199;Nested code blocks should not be used;MINOR;C;CODE_SMELL;{bad-practice}
c:S1198;Deprecated K&R syntax should not be used for function definition;MAJOR;C;CODE_SMELL;{confusing,obsolete}
c:S3936;case ranges should cover multiple values;BLOCKER;C;CODE_SMELL;{gnu,suspicious}
c:S3935;case ranges should not be empty;MAJOR;C;BUG;{gnu}
c:S3491;Redundant pointer operator sequences should be removed;BLOCKER;C;CODE_SMELL;{suspicious}
c:S1762;#pragma warning (default: ...) should not be used;MINOR;C;CODE_SMELL;{cert}
c:FileComplexity;Files should not be too complex;MAJOR;C;CODE_SMELL;{}
c:S100;Function names should comply with a naming convention;MINOR;C;CODE_SMELL;{convention}
c:S1768;The sign of an unsigned variable should not be tested;CRITICAL;C;CODE_SMELL;{pitfall}
c:TabCharacter;Tabulation characters should not be used;MINOR;C;CODE_SMELL;{convention}
c:S1451;Track lack of copyright and license headers;BLOCKER;C;CODE_SMELL;{}
c:S2665;The 'sizeof' and 'alignof' operators should not be used with operands of a 'void' type;MINOR;C;BUG;{lock-in}
c:S3518;Zero should not be a possible denominator;CRITICAL;C;BUG;{cert,cwe,denial-of-service}
c:S3519;Memory access should be explicitly bounded to prevent buffer overflows;BLOCKER;C;BUG;{cert,cwe}
c:S3516;Methods returns should not be invariant;MAJOR;C;CODE_SMELL;{}
c:S2668;Increment should not be used to set boolean variables to 'true';MAJOR;C;CODE_SMELL;{confusing,obsolete}
c:S1578;File names should comply with a naming convention;MINOR;C;CODE_SMELL;{cert,convention}
c:S3400;Methods should not return constants;MINOR;C;CODE_SMELL;{confusing}
c:S3520;Memory locations should not be released more than once;BLOCKER;C;BUG;{cwe}
c:S3529;Freed memory should not be used;BLOCKER;C;BUG;{cert,cwe}
c:OneStatementPerLine;Statements should be on separate lines;MAJOR;C;CODE_SMELL;{style}
c:S3646;Types and variables should be declared in separate statements;MINOR;C;CODE_SMELL;{confusing}
c:S1227;break statements should not be used except for switch cases;MINOR;C;CODE_SMELL;{}
c:FileLoc;Files should not have too many lines of code;MAJOR;C;CODE_SMELL;{brain-overload}
c:S3972;Conditionals should start on new lines;CRITICAL;C;CODE_SMELL;{suspicious}
c:S3730;#include_next should not be used;MINOR;C;CODE_SMELL;{confusing,lock-in}
c:S2761;Unary prefix operators should not be repeated;MAJOR;C;BUG;{}
c:S4143;Array values should not be replaced unconditionally;MAJOR;C;BUG;{suspicious}
c:S4263;Include directives should not rely on non-portable search strategy;MAJOR;C;CODE_SMELL;{pitfall}
c:S3626;Jump statements should not be redundant;MINOR;C;CODE_SMELL;{clumsy,redundant}
c:S3744;Macros should not be redefined;MINOR;C;CODE_SMELL;{confusing}
c:PPErrorDirectiveReached;Track instances of the #error preprocessor directive being reached;INFO;C;CODE_SMELL;{}
c:S2095;Resources should be closed;BLOCKER;C;BUG;{cert,cwe,denial-of-service,leak}
cpp:S1135;Track uses of TODO tags;INFO;C++;CODE_SMELL;{cwe}
cpp:S1134;Track uses of FIXME tags;MAJOR;C++;CODE_SMELL;{cwe}
cpp:S1133;Deprecated code should be removed;INFO;C++;CODE_SMELL;{obsolete}
cpp:S3432;Destructors should not be called explicitly;CRITICAL;C++;CODE_SMELL;{unpredictable}
cpp:S2343;Enumeration values should comply with a naming convention;MINOR;C++;CODE_SMELL;{convention}
cpp:S1131;Lines should not end with trailing whitespaces;MINOR;C++;CODE_SMELL;{convention}
cpp:S1259;typedef should be used for function pointers;CRITICAL;C++;CODE_SMELL;{}
cpp:S1250;operator= should check for assignment to self;MINOR;C++;BUG;{}
cpp:S2234;Parameters should be passed in the correct order;MAJOR;C++;CODE_SMELL;{}
cpp:S3689;Declaration specifiers should not be redundant;MAJOR;C++;BUG;{redundant}
cpp:S3687;Atomic types should be used instead of volatile types;MAJOR;C++;CODE_SMELL;{c11,cpp11,multi-threading}
cpp:S1265;operator delete should be written along with operator new;CRITICAL;C++;BUG;{cert,denial-of-service}
cpp:S3685;String literals should not be immediately followed by macros;MAJOR;C++;CODE_SMELL;{cpp11,lock-in}
cpp:S1264;A while loop should be used instead of a for loop;MINOR;C++;CODE_SMELL;{clumsy}
cpp:S1142;Functions should not contain too many return statements;MAJOR;C++;CODE_SMELL;{brain-overload}
cpp:S3562;switch statements should cover all cases;MAJOR;C++;CODE_SMELL;{suspicious}
cpp:S1705;The prefix increment/decrement form should be used;MINOR;C++;CODE_SMELL;{performance}
cpp:S1704;Rvalue references should not be used;MAJOR;C++;CODE_SMELL;{}
cpp:S1821;switch statements should not be nested;CRITICAL;C++;CODE_SMELL;{pitfall}
cpp:S1820;Structures should not have too many fields;MAJOR;C++;CODE_SMELL;{brain-overload}
cpp:S1236;operator= should return a reference to this;MAJOR;C++;CODE_SMELL;{}
cpp:S1235;Polymorphic base class destructor should be either public virtual or protected non-virtual;MAJOR;C++;CODE_SMELL;{cert,denial-of-service}
cpp:S1232;Appropriate memory de-allocation should be used;BLOCKER;C++;BUG;{cert,denial-of-service}
cpp:S1110;Redundant pairs of parentheses should be removed;MAJOR;C++;CODE_SMELL;{confusing}
cpp:S2681;Multiline blocks should be enclosed in curly braces;MAJOR;C++;CODE_SMELL;{cert,cwe}
cpp:S2209;static members should be accessed statically;MAJOR;C++;CODE_SMELL;{pitfall}
cpp:S3659;Alternative operators should not be used;MAJOR;C++;CODE_SMELL;{pitfall}
cpp:S3539;Access specifiers should not be redundant;MINOR;C++;CODE_SMELL;{clumsy,redundant}
cpp:S3657;Assignment operators should not be virtual;BLOCKER;C++;CODE_SMELL;{pitfall}
cpp:S1479;switch statements should not have too many case clauses;MAJOR;C++;CODE_SMELL;{brain-overload}
cpp:S3543;Standard groupings should be used with digit separators;CRITICAL;C++;CODE_SMELL;{cpp14,pitfall}
cpp:S1123;Deprecated attributes should include explanations;MAJOR;C++;CODE_SMELL;{bad-practice,obsolete}
cpp:S3541;Allocation and deallocation functions should not be explicitly declared static;MINOR;C++;CODE_SMELL;{clumsy,redundant}
objc:S864;Limited dependence should be placed on operator precedence;MAJOR;Objective-C;CODE_SMELL;{based-on-misra,cert,cwe}
cpp:S3542;Digit separators should be used;MINOR;C++;CODE_SMELL;{clumsy,cpp14}
cpp:S3540;Base class access specifiers should not be redundant;MINOR;C++;CODE_SMELL;{clumsy,redundant}
cpp:S3549;inline should not be used redundantly;MINOR;C++;CODE_SMELL;{clumsy,redundant}
cpp:S3358;Conditional operators should not be nested;MAJOR;C++;CODE_SMELL;{confusing}
cpp:PPBackslashNotLastCharacter;Line continuation characters '\' should not be followed by trailing whitespace;MINOR;C++;BUG;{}
cpp:S2387;Child class fields should not shadow parent class fields;BLOCKER;C++;CODE_SMELL;{confusing}
cpp:PPMacroName;Macro names should comply with a naming convention;MINOR;C++;CODE_SMELL;{convention,preprocessor}
cpp:S3231;Forward declarations should not be redundant;MINOR;C++;CODE_SMELL;{redundant,unused}
cpp:PPNonStandardInclude;Standard C++ headers should be used;MAJOR;C++;CODE_SMELL;{obsolete}
cpp:PPDirectiveIndentation;Preprocessor directives should not be indented;CRITICAL;C++;CODE_SMELL;{pitfall,style}
cpp:S3471;override or final should be used instead of virtual;MINOR;C++;CODE_SMELL;{api-design,cpp11}
cpp:S1291;Track uses of NOSONAR comments;MAJOR;C++;CODE_SMELL;{bad-practice}
cpp:S1068;Unused private fields should be removed;MAJOR;C++;CODE_SMELL;{unused}
cpp:S1862;Related if/else if statements should not have the same condition;MAJOR;C++;BUG;{cert,pitfall,unused}
cpp:S1188;Lambdas should not have too many lines;MAJOR;C++;CODE_SMELL;{}
cpp:S1067;Expressions should not be too complex;CRITICAL;C++;CODE_SMELL;{brain-overload}
cpp:S1066;Collapsible if statements should be merged;MAJOR;C++;CODE_SMELL;{clumsy}
cpp:S4334;auto should not be used to deduce raw pointers;MINOR;C++;CODE_SMELL;{confusing}
cpp:S1185;Overriding methods should do more than simply call the same method in the super class;MINOR;C++;CODE_SMELL;{clumsy,redundant}
cpp:S1186;Methods should not be empty;CRITICAL;C++;CODE_SMELL;{suspicious}
cpp:S3806;#include paths should be portable;MAJOR;C++;CODE_SMELL;{pitfall}
cpp:CommentMixedStyles;Comment styles // and /* ... */ should not be mixed within a file;MINOR;C++;CODE_SMELL;{cert,convention}
cpp:NonReentrantFunction;Non-reentrant POSIX functions should be replaced with their reentrant versions;BLOCKER;C++;CODE_SMELL;{multi-threading}
cpp:S3807;Parameter values should be appropriate;CRITICAL;C++;BUG;{}
cpp:S3805;#import should not be used;MAJOR;C++;CODE_SMELL;{}
cpp:S1181;Generic exceptions should not be caught;MAJOR;C++;CODE_SMELL;{bad-practice,cert,cwe,error-handling}
cpp:EmptyCompoundStatement;Nested blocks of code should not be left empty;MAJOR;C++;CODE_SMELL;{suspicious}
cpp:S3458;Empty case clauses that fall through to the default should be omitted;MINOR;C++;CODE_SMELL;{clumsy,finding}
cpp:S3576;final classes should not have virtual functions;MINOR;C++;CODE_SMELL;{confusing,cpp11}
cpp:S3698;Non-exception types should not be caught;MAJOR;C++;CODE_SMELL;{error-handling}
cpp:S3574;Lambda return types should be implicit;MINOR;C++;CODE_SMELL;{bad-practice,cpp11}
cpp:S2123;Values should not be uselessly incremented;MAJOR;C++;BUG;{unused}
cpp:S134;Control flow statements if, for, while, switch and try should not be nested too deeply;CRITICAL;C++;CODE_SMELL;{brain-overload}
cpp:S1712;Default parameters should not be defined;MAJOR;C++;CODE_SMELL;{}
cpp:S2806;Bit fields should not be used;BLOCKER;C++;CODE_SMELL;{performance,pitfall}
cpp:FunctionComplexity;Functions should not be too complex;CRITICAL;C++;CODE_SMELL;{brain-overload}
cpp:CommentRegularExpression;Track comments matching a regular expression;MAJOR;C++;CODE_SMELL;{}
cpp:S1707;Track TODO and FIXME comments that do not contain a reference to a person;MINOR;C++;CODE_SMELL;{convention}
cpp:S1708;C++ comments should be used;MINOR;C++;CODE_SMELL;{convention}
cpp:S1151;switch case clauses should not have too many lines of code;MAJOR;C++;CODE_SMELL;{brain-overload}
cpp:S3691;Partial specialization syntax should not be used for function templates;MINOR;C++;CODE_SMELL;{lock-in}
cpp:S3692;Comparison operators should not be virtual;BLOCKER;C++;CODE_SMELL;{pitfall}
cpp:S1270;Functions without parameters should not use (void);MINOR;C++;CODE_SMELL;{convention}
cpp:S1271;:: operator should be used to access global variables and functions;MAJOR;C++;CODE_SMELL;{pitfall}
cpp:S2259;Null pointers should not be dereferenced;MAJOR;C++;BUG;{cert,cwe}
cpp:S3469;Inheritance should be public;MINOR;C++;CODE_SMELL;{api-design}
cpp:S3588;Closed resources should not be accessed;BLOCKER;C++;BUG;{cert}
cpp:S3584;Dynamically allocated memory should be released;BLOCKER;C++;BUG;{cert,cwe,denial-of-service,leak}
cpp:SizeofSizeof;sizeof(sizeof(...)) should not be used;MAJOR;C++;BUG;{}
cpp:S2815;this should not be compared with null;MAJOR;C++;CODE_SMELL;{}
cpp:S2813;const references to numbers should not be made;MAJOR;C++;BUG;{clumsy}
cpp:S3229;Members should be initialized in the order they are declared;MINOR;C++;CODE_SMELL;{cert,suspicious}
cpp:S2807;Binary operators should be overloaded as friend functions;MAJOR;C++;CODE_SMELL;{api-design}
cpp:S2808;The delete operator should only be used for pointers;MAJOR;C++;BUG;{}
cpp:S138;Functions/methods should not have too many lines;MAJOR;C++;CODE_SMELL;{brain-overload}
cpp:S139;Comments should not be located at the end of lines of code;MINOR;C++;CODE_SMELL;{convention}
cpp:S1774;The ternary operator should not be used;MAJOR;C++;CODE_SMELL;{brain-overload}
cpp:S1773;public, protected and private sections of a class should be declared in that order;MINOR;C++;CODE_SMELL;{convention}
cpp:S1772;Constants should come first in equality tests;MINOR;C++;CODE_SMELL;{convention}
cpp:S110;Inheritance tree of classes should not be too deep;MAJOR;C++;CODE_SMELL;{design}
cpp:S112;Generic exceptions should never be thrown;MAJOR;C++;CODE_SMELL;{cert,cwe,error-handling}
cpp:S3719;Virtual functions should not have default arguments;CRITICAL;C++;CODE_SMELL;{api-design,pitfall}
cpp:ParsingError;Track parsing failures;MAJOR;C++;CODE_SMELL;{suspicious}
cpp:LineLength;Lines should not be too long;MAJOR;C++;CODE_SMELL;{convention}
cpp:S3715;GNU extensions should not be used;MINOR;C++;CODE_SMELL;{gnu,lock-in,obsolete}
cpp:S1656;Variables should not be self-assigned;MAJOR;C++;BUG;{cert}
cpp:S107;Functions should not have too many parameters;MAJOR;C++;CODE_SMELL;{brain-overload}
cpp:S106;Standard outputs should not be used directly to log anything;MAJOR;C++;CODE_SMELL;{bad-practice,cert}
cpp:S2754;Declarations should not be empty;MINOR;C++;CODE_SMELL;{cert,unused}
cpp:S3608;Default capture should not be used;CRITICAL;C++;CODE_SMELL;{cpp11,suspicious}
cpp:S3609;static should not be used in unnamed namespaces;MINOR;C++;CODE_SMELL;{clumsy,cpp11,redundant}
cpp:S3729;Array indices should be placed between brackets;BLOCKER;C++;CODE_SMELL;{pitfall}
cpp:S3728;String literals should not be concatenated implicitly;MINOR;C++;CODE_SMELL;{confusing}
cpp:S2757;=+ should not be used instead of +=;MAJOR;C++;BUG;{}
cpp:S2637;nonnull pointers should not be set to null;MINOR;C++;BUG;{cert,cwe}
cpp:S3726;extern shouldn't be used on member definitions;MAJOR;C++;BUG;{unused}
cpp:ClassComplexity;Classes should not be too complex;CRITICAL;C++;CODE_SMELL;{}
cpp:S113;Files should contain an empty newline at the end;MINOR;C++;CODE_SMELL;{convention}
cpp:S116;Field names should comply with a naming convention;MINOR;C++;CODE_SMELL;{convention}
cpp:S117;Local variable and function parameter names should comply with a naming convention;MINOR;C++;CODE_SMELL;{convention}
cpp:S1874;Code annotated as deprecated should not be used;MINOR;C++;CODE_SMELL;{cert,cwe,obsolete}
cpp:S1750;Lambdas should not be used;CRITICAL;C++;CODE_SMELL;{}
cpp:S1199;Nested code blocks should not be used;MINOR;C++;CODE_SMELL;{bad-practice}
cpp:S1990;final should not be used redundantly;MINOR;C++;CODE_SMELL;{convention,cpp11}
cpp:S3936;case ranges should cover multiple values;BLOCKER;C++;CODE_SMELL;{gnu,suspicious}
cpp:S3935;case ranges should not be empty;MAJOR;C++;BUG;{gnu}
cpp:S3490;default should be used for special member functions;CRITICAL;C++;CODE_SMELL;{clumsy,cpp11,performance}
cpp:S1762;#pragma warning (default: ...) should not be used;MINOR;C++;CODE_SMELL;{cert}
cpp:FileComplexity;Files should not be too complex;MAJOR;C++;CODE_SMELL;{}
cpp:S100;Function names should comply with a naming convention;MINOR;C++;CODE_SMELL;{convention}
cpp:S3708;Reference types should not be qualified with const or volatile;MINOR;C++;CODE_SMELL;{cert,lock-in,unused}
cpp:S2738;General catch clauses should not be used;MINOR;C++;CODE_SMELL;{error-handling}
cpp:S1768;The sign of an unsigned variable should not be tested;CRITICAL;C++;CODE_SMELL;{pitfall}
cpp:TabCharacter;Tabulation characters should not be used;MINOR;C++;CODE_SMELL;{convention}
cpp:S2665;The 'sizeof' and 'alignof' operators should not be used with operands of a 'void' type;MINOR;C++;BUG;{lock-in}
cpp:S3630;reinterpret_cast should not be used;MAJOR;C++;CODE_SMELL;{pitfall}
cpp:S1451;Track lack of copyright and license headers;BLOCKER;C++;CODE_SMELL;{}
cpp:S3518;Zero should not be a possible denominator;CRITICAL;C++;BUG;{cert,cwe,denial-of-service}
cpp:S3519;Memory access should be explicitly bounded to prevent buffer overflows;BLOCKER;C++;BUG;{cert,cwe}
cpp:S2668;Increment should not be used to set boolean variables to 'true';MAJOR;C++;CODE_SMELL;{confusing,obsolete}
cpp:S3516;Methods returns should not be invariant;MAJOR;C++;CODE_SMELL;{}
cpp:S1578;File names should comply with a naming convention;MINOR;C++;CODE_SMELL;{cert,convention}
cpp:S3636;const and volatile should not be used in enum declarations;MINOR;C++;CODE_SMELL;{clumsy,cpp11,redundant}
cpp:S3642;Scoped enumerations should be used;MINOR;C++;CODE_SMELL;{cpp11,pitfall}
cpp:S3400;Methods should not return constants;MINOR;C++;CODE_SMELL;{confusing}
cpp:S3520;Memory locations should not be released more than once;BLOCKER;C++;BUG;{cwe}
cpp:S3522;The register storage class specifier should not be used;MINOR;C++;CODE_SMELL;{obsolete}
cpp:S3529;Freed memory should not be used;BLOCKER;C++;BUG;{cert,cwe}
cpp:OneStatementPerLine;Statements should be on separate lines;MAJOR;C++;CODE_SMELL;{style}
cpp:S3646;Types and variables should be declared in separate statements;MINOR;C++;CODE_SMELL;{confusing}
cpp:S1227;break statements should not be used except for switch cases;MINOR;C++;CODE_SMELL;{}
cpp:S3261;Namespaces should not be empty;MINOR;C++;CODE_SMELL;{unused}
cpp:FileLoc;Files should not have too many lines of code;MAJOR;C++;CODE_SMELL;{brain-overload}
cpp:S3732;'extern C' should not be used with namespaces;MINOR;C++;CODE_SMELL;{confusing}
cpp:S3730;#include_next should not be used;MINOR;C++;CODE_SMELL;{confusing,lock-in}
cpp:S3972;Conditionals should start on new lines;CRITICAL;C++;CODE_SMELL;{suspicious}
cpp:S3731;auto should not be used as a storage class specifier;MINOR;C++;CODE_SMELL;{cpp11,lock-in}
cpp:S2761;Unary prefix operators should not be repeated;MAJOR;C++;BUG;{}
cpp:S4144;Methods should not have identical implementations;MAJOR;C++;CODE_SMELL;{confusing,duplicate,suspicious}
cpp:S1679;The original exception object should be rethrown;MAJOR;C++;BUG;{}
cpp:S4143;Array values should not be replaced unconditionally;MAJOR;C++;BUG;{suspicious}
cpp:S4263;Include directives should not rely on non-portable search strategy;MAJOR;C++;CODE_SMELL;{pitfall}
cpp:S3743;Exceptions should not be thrown in noexcept functions;CRITICAL;C++;CODE_SMELL;{error-handling}
cpp:S3744;Macros should not be redefined;MINOR;C++;CODE_SMELL;{confusing}
cpp:S3628;Raw string literals should be used;MINOR;C++;CODE_SMELL;{cpp11}
cpp:S3626;Jump statements should not be redundant;MINOR;C++;CODE_SMELL;{clumsy,redundant}
cpp:S1448;Classes should not have too many methods;MAJOR;C++;CODE_SMELL;{brain-overload}
cpp:PPErrorDirectiveReached;Track instances of the #error preprocessor directive being reached;INFO;C++;CODE_SMELL;{}
cpp:S2095;Resources should be closed;BLOCKER;C++;BUG;{cert,cwe,denial-of-service,leak}
common-vb:FailedUnitTests;Failed unit tests should be fixed;MAJOR;Vb;BUG;{}
common-vb:SkippedUnitTests;Skipped unit tests should be either removed or fixed;MAJOR;Vb;CODE_SMELL;{pitfall}
common-vb:DuplicatedBlocks;Source files should not have any duplicated blocks;MAJOR;Vb;CODE_SMELL;{pitfall}
common-vb:InsufficientCommentDensity;Source files should have a sufficient density of comment lines;MAJOR;Vb;CODE_SMELL;{convention}
common-vb:InsufficientLineCoverage;Lines should have sufficient coverage by tests;MAJOR;Vb;CODE_SMELL;{bad-practice}
common-vb:InsufficientBranchCoverage;Branches should have sufficient coverage by tests;MAJOR;Vb;CODE_SMELL;{bad-practice}
swift:S1134;Track uses of FIXME tags;MAJOR;Swift;CODE_SMELL;{cwe}
swift:S1135;Track uses of TODO tags;INFO;Swift;CODE_SMELL;{cwe}
swift:S2342;Enumeration types should comply with a naming convention;MINOR;Swift;CODE_SMELL;{convention}
swift:S1133;Deprecated code should be removed;INFO;Swift;CODE_SMELL;{obsolete}
swift:S2343;Enumeration members should comply with a naming convention;MINOR;Swift;CODE_SMELL;{convention}
swift:S1131;Lines should not end with trailing whitespaces;MINOR;Swift;CODE_SMELL;{convention}
swift:S2108;Fields and variables that are never updated should be constant;MINOR;Swift;CODE_SMELL;{pitfall}
swift:S103;Lines should not be too long;MAJOR;Swift;CODE_SMELL;{convention}
swift:S105;Tabulation characters should not be used;MINOR;Swift;CODE_SMELL;{convention}
swift:S104;Files should not have too many lines of code;MAJOR;Swift;CODE_SMELL;{brain-overload}
swift:S107;Functions should not have too many parameters;MAJOR;Swift;CODE_SMELL;{brain-overload}
swift:S108;Nested blocks of code should not be left empty;MAJOR;Swift;CODE_SMELL;{suspicious}
swift:S1301;switch statements should have at least 3 case clauses;MINOR;Swift;CODE_SMELL;{bad-practice,misra}
swift:S1940;Boolean checks should not be inverted;MINOR;Swift;CODE_SMELL;{pitfall}
swift:S1541;Functions should not be too complex;CRITICAL;Swift;CODE_SMELL;{brain-overload}
swift:S1145;Useless if true {...} and if false {...} blocks should be removed;MAJOR;Swift;BUG;{cwe,misra}
swift:S1144;Unused private functions should be removed;MAJOR;Swift;CODE_SMELL;{unused}
swift:S1142;Functions should not contain too many return statements;MAJOR;Swift;CODE_SMELL;{brain-overload}
swift:S2197;Modulus results should not be checked for direct equality;CRITICAL;Swift;CODE_SMELL;{cert,suspicious}
swift:S122;Statements should be on separate lines;MAJOR;Swift;CODE_SMELL;{style}
swift:S881;Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression;MAJOR;Swift;CODE_SMELL;{cert,misra}
swift:S1821;switch statements should not be nested;CRITICAL;Swift;CODE_SMELL;{pitfall}
swift:S1700;A field should not duplicate the name of its containing class;MAJOR;Swift;CODE_SMELL;{brain-overload}
swift:S2635;Trailing closures should not begin on new lines;MINOR;Swift;CODE_SMELL;{convention}
swift:S114;Protocol names should comply with a naming convention;MINOR;Swift;CODE_SMELL;{convention}
swift:S113;Files should contain an empty newline at the end;MINOR;Swift;CODE_SMELL;{convention}
swift:S116;Field names should comply with a naming convention;MINOR;Swift;CODE_SMELL;{convention}
swift:S115;Constant names should comply with a naming convention;MINOR;Swift;CODE_SMELL;{convention}
swift:S117;Local variable and function parameter names should comply with a naming convention;MINOR;Swift;CODE_SMELL;{convention}
swift:S119;Type parameter names should comply with a naming convention;MINOR;Swift;CODE_SMELL;{convention}
swift:S2962;get should be omitted in read-only computed properties and subscripts;MINOR;Swift;CODE_SMELL;{clumsy}
swift:S3776;Cognitive Complexity of functions should not be too high;CRITICAL;Swift;CODE_SMELL;{brain-overload}
swift:S2963;self should only be used when required;MINOR;Swift;CODE_SMELL;{clumsy}
swift:S2201;Return values from functions without side effects should not be ignored;MAJOR;Swift;BUG;{cert,misra}
swift:S2960;Operators should be surrounded by whitespace in function definitions;MAJOR;Swift;CODE_SMELL;{confusing}
swift:S1871;Two branches in a conditional structure should not have exactly the same implementation;MAJOR;Swift;CODE_SMELL;{design,suspicious}
swift:S2961;Backticks should not be used around symbol names;MAJOR;Swift;CODE_SMELL;{pitfall}
swift:S1110;Redundant pairs of parentheses should be removed;MAJOR;Swift;CODE_SMELL;{confusing}
swift:S4188;Tuples should not be too large;MINOR;Swift;CODE_SMELL;{confusing}
swift:S1075;URIs should not be hardcoded;MINOR;Swift;CODE_SMELL;{cert}
swift:S2968;Function type parameters should come at the end of the parameter list;MAJOR;Swift;CODE_SMELL;{api-design}
swift:S2969;Trailing closure syntax should be used for the last argument;MINOR;Swift;CODE_SMELL;{clumsy}
swift:S2966;Optionals should not be force-unwrapped;MINOR;Swift;CODE_SMELL;{unpredictable}
swift:S2967;Implicitly unwrapped optionals should not be used;CRITICAL;Swift;BUG;{pitfall}
swift:S1117;Local variables should not have the same name as fields or enum cases;MAJOR;Swift;CODE_SMELL;{cert,pitfall}
swift:S1479;switch statements should not have too many case clauses;MAJOR;Swift;CODE_SMELL;{brain-overload}
swift:S1996;Types should be defined in separate source files;MAJOR;Swift;CODE_SMELL;{brain-overload}
swift:S1908;Files should not be too complex;MAJOR;Swift;CODE_SMELL;{}
swift:S2042;Classes should not have too many lines of code;MAJOR;Swift;CODE_SMELL;{brain-overload}
swift:S4184;IBOutlet variables should be private;MAJOR;Swift;CODE_SMELL;{bad-practice}
swift:S1192;String literals should not be duplicated;CRITICAL;Swift;CODE_SMELL;{design}
swift:S4186;IBInspectable should be used correctly;MAJOR;Swift;CODE_SMELL;{confusing}
swift:S1764;Identical expressions should not be used on both sides of a binary operator;MAJOR;Swift;BUG;{cert}
swift:S1642;struct names should comply with a naming convention;MINOR;Swift;CODE_SMELL;{convention}
swift:S1763;Jump statements should not be followed by dead code;MAJOR;Swift;BUG;{cert,cwe,misra,unused}
swift:S1125;Boolean literals should not be redundant;MINOR;Swift;CODE_SMELL;{clumsy}
swift:S1244;Floating point numbers should not be tested for equality;MAJOR;Swift;BUG;{misra}
swift:S4233;Parentheses should be omitted when trailing closure is the only argument;MINOR;Swift;CODE_SMELL;{}
swift:S101;Class names should comply with a naming convention;MINOR;Swift;CODE_SMELL;{convention}
swift:S100;Function names should comply with a naming convention;MINOR;Swift;CODE_SMELL;{convention}
swift:S3661;try! should not be used;CRITICAL;Swift;CODE_SMELL;{suspicious}
swift:S1481;Unused local variables should be removed;MINOR;Swift;CODE_SMELL;{unused}
swift:S2148;Underscores should be used to make large numbers readable;MINOR;Swift;CODE_SMELL;{convention}
swift:S3358;Ternary operators should not be nested;MAJOR;Swift;CODE_SMELL;{confusing}
swift:S1451;Track lack of copyright and license headers;BLOCKER;Swift;CODE_SMELL;{}
swift:S3630;Force casts should not be used;MAJOR;Swift;CODE_SMELL;{pitfall}
swift:S3110;Infix operators that end with = should update their left operands;MAJOR;Swift;BUG;{pitfall}
swift:S3111;Conditional compilation should not be used;CRITICAL;Swift;CODE_SMELL;{design,pitfall}
swift:S2309;Files should not be empty;MINOR;Swift;CODE_SMELL;{unused}
swift:S1854;Dead stores should be removed;MAJOR;Swift;CODE_SMELL;{cert,cwe,unused}
swift:S1172;Unused function parameters should be removed;MAJOR;Swift;CODE_SMELL;{cert,misra,unused}
swift:S2260;Track parsing failures;MAJOR;Swift;CODE_SMELL;{suspicious}
swift:S2951;break should be the only statement in a case;MINOR;Swift;CODE_SMELL;{clumsy,unused}
swift:S1862;Related if/else if statements and cases in a switch should not have the same condition;MAJOR;Swift;BUG;{cert,pitfall,unused}
swift:S3400;Functions should not return constants;MINOR;Swift;CODE_SMELL;{confusing}
swift:S2950;Access control should be specified for top-level definitions;MINOR;Swift;VULNERABILITY;{}
swift:S1067;Expressions should not be too complex;CRITICAL;Swift;CODE_SMELL;{brain-overload}
swift:S1188;Closures should not have too many lines;MAJOR;Swift;CODE_SMELL;{}
swift:S1066;Collapsible if statements should be merged;MAJOR;Swift;CODE_SMELL;{clumsy}
swift:S1065;Unused labels should be removed;MAJOR;Swift;CODE_SMELL;{cert,misra,unused}
swift:S1186;Functions and closures should not be empty;CRITICAL;Swift;CODE_SMELL;{suspicious}
swift:S2959;Statements should not end with semicolons;MINOR;Swift;CODE_SMELL;{convention}
swift:S2957;return should be omitted from single-expression closures;MINOR;Swift;CODE_SMELL;{clumsy}
swift:S1109;A close curly brace should be located at the beginning of a line;MINOR;Swift;CODE_SMELL;{convention}
swift:S2958;Trailing closure syntax should not be used when multiple parameters are of function type;MAJOR;Swift;CODE_SMELL;{confusing}
swift:S3923;All branches in a conditional structure should not have exactly the same implementation;MAJOR;Swift;BUG;{}
swift:S1105;An open curly brace should be located at the end of a line;MINOR;Swift;CODE_SMELL;{convention}
swift:S3086;Operator functions should call existing functions;MINOR;Swift;CODE_SMELL;{api-design,convention}
swift:S3087;Closure expressions should not be nested too deeply;MAJOR;Swift;CODE_SMELL;{confusing}
swift:S4173;Filter conditions should be used as predicates to first;MAJOR;Swift;CODE_SMELL;{performance}
swift:S2523;Comments should not be nested;MAJOR;Swift;CODE_SMELL;{}
swift:S1311;Classes should not be too complex;CRITICAL;Swift;CODE_SMELL;{}
swift:S2760;Sequential tests should not check the same condition;MINOR;Swift;CODE_SMELL;{clumsy,suspicious}
swift:S4144;Functions should not have identical implementations;MAJOR;Swift;CODE_SMELL;{confusing,duplicate,suspicious}
swift:S134;Control flow statements if, for, for in, while, do while and switch should not be nested too deeply;CRITICAL;Swift;CODE_SMELL;{brain-overload}
swift:S1438;Statements should end with semicolons;MINOR;Swift;CODE_SMELL;{convention}
swift:S2007;Functions and variables should not be defined outside of classes;BLOCKER;Swift;CODE_SMELL;{design}
swift:S1151;switch case clauses should not have too many lines of code;MAJOR;Swift;CODE_SMELL;{brain-overload}
swift:S4143;Collection elements should not be replaced unconditionally;MAJOR;Swift;BUG;{suspicious}
swift:S126;if ... else if constructs should end with else clauses;CRITICAL;Swift;CODE_SMELL;{cert,misra}
swift:S4142;Duplicate values should not be passed as arguments;MAJOR;Swift;CODE_SMELL;{}
swift:S3981;Collection sizes comparisons should make sense;MAJOR;Swift;BUG;{}
swift:S1845;Methods and field names should not be the same or differ only by capitalization;BLOCKER;Swift;CODE_SMELL;{confusing}
swift:S138;Functions should not have too many lines of code;MAJOR;Swift;CODE_SMELL;{brain-overload}
swift:S2094;Classes should not be empty;MINOR;Swift;CODE_SMELL;{clumsy}
swift:S139;Comments should not be located at the end of lines of code;MINOR;Swift;CODE_SMELL;{convention}
common-php:InsufficientLineCoverage;Lines should have sufficient coverage by tests;MAJOR;PHP;CODE_SMELL;{bad-practice}
common-php:InsufficientBranchCoverage;Branches should have sufficient coverage by tests;MAJOR;PHP;CODE_SMELL;{bad-practice}
common-c:InsufficientLineCoverage;Lines should have sufficient coverage by tests;MAJOR;C;CODE_SMELL;{bad-practice}
common-c:InsufficientBranchCoverage;Branches should have sufficient coverage by tests;MAJOR;C;CODE_SMELL;{bad-practice}
vbnet:S1654;Method parameters should follow a naming convention;MAJOR;VB.NET;CODE_SMELL;{convention}
vbnet:S2346;Flags enumerations zero-value members should be named None;CRITICAL;VB.NET;CODE_SMELL;{convention}
vbnet:S2347;Event handlers should comply with a naming convention;MINOR;VB.NET;CODE_SMELL;{convention}
vbnet:S2344;Enumeration type names should not have Flags or Enum suffixes;MINOR;VB.NET;CODE_SMELL;{convention}
vbnet:S2345;Flags enumerations should explicitly initialize all their members;MINOR;VB.NET;BUG;{}
vbnet:S2342;Enumeration types should comply with a naming convention;MINOR;VB.NET;CODE_SMELL;{convention}
vbnet:S2343;Enumeration values should comply with a naming convention;MINOR;VB.NET;CODE_SMELL;{convention}
vbnet:S2340;Do loops should not be used without a While or Until condition;CRITICAL;VB.NET;CODE_SMELL;{pitfall}
vbnet:S2429;Arrays should be initialized using the ... = {} syntax;MINOR;VB.NET;CODE_SMELL;{clumsy}
vbnet:S2304;Namespace names should comply with a naming convention;MINOR;VB.NET;CODE_SMELL;{convention}
vbnet:S2348;Events should comply with a naming convention;MINOR;VB.NET;CODE_SMELL;{convention}
vbnet:S2349;Event names should not have Before or After as a prefix or suffix;MINOR;VB.NET;CODE_SMELL;{convention}
vbnet:S103;Lines should not be too long;MAJOR;VB.NET;CODE_SMELL;{convention}
vbnet:S105;Tabulation characters should not be used;MINOR;VB.NET;CODE_SMELL;{convention}
vbnet:S104;Files should not have too many lines of code;MAJOR;VB.NET;CODE_SMELL;{brain-overload}
vbnet:S2951;VB.Net: Exit Select statements should not be used redundantly;MINOR;VB.NET;CODE_SMELL;{clumsy,unused}
vbnet:S2357;Fields should be private;MAJOR;VB.NET;CODE_SMELL;{pitfall}
vbnet:S2358;IsNot should be used instead of Not ... Is ...;MAJOR;VB.NET;CODE_SMELL;{clumsy}
vbnet:S1542;Functions and procedures should comply with a naming convention;MAJOR;VB.NET;CODE_SMELL;{convention}
vbnet:S2355;Array literals should be used instead of array creation expressions;MINOR;VB.NET;CODE_SMELL;{clumsy}
vbnet:S1541;Functions, procedures and properties should not be too complex;CRITICAL;VB.NET;CODE_SMELL;{brain-overload}
vbnet:S2353;Indexed properties should be named Item;MINOR;VB.NET;CODE_SMELL;{}
vbnet:S1067;Expressions should not be too complex;CRITICAL;VB.NET;CODE_SMELL;{brain-overload}
vbnet:S2354;Line continuations should not be used;MINOR;VB.NET;CODE_SMELL;{convention}
vbnet:S122;Statements should be on separate lines;MAJOR;VB.NET;CODE_SMELL;{style}
vbnet:S2352;Indexed properties with more than one parameter should not be used;MAJOR;VB.NET;CODE_SMELL;{clumsy}
vbnet:S2359;On Error statements should not be used;MAJOR;VB.NET;CODE_SMELL;{bad-practice}
vbnet:S114;Interface names should comply with a naming convention;MINOR;VB.NET;CODE_SMELL;{convention}
vbnet:S117;Local variable names should comply with a naming convention;MINOR;VB.NET;CODE_SMELL;{convention}
vbnet:S2368;Public methods should not have multidimensional array parameters;BLOCKER;VB.NET;CODE_SMELL;{pitfall}
vbnet:S2369;Non-private fields should comply with a naming convention;MINOR;VB.NET;CODE_SMELL;{convention}
vbnet:S2366;Properties should comply with a naming convention;MINOR;VB.NET;CODE_SMELL;{convention}
vbnet:S2367;Non-private constants should comply with a naming convention;MINOR;VB.NET;CODE_SMELL;{convention}
vbnet:S1871;Two branches in a conditional structure should not have exactly the same implementation;MAJOR;VB.NET;CODE_SMELL;{design,suspicious}
vbnet:S2364;Private fields should comply with a naming convention;MINOR;VB.NET;CODE_SMELL;{convention}
vbnet:S2365;Properties should not make collection or array copies;CRITICAL;VB.NET;CODE_SMELL;{api-design,performance}
vbnet:S4144;Methods should not have identical implementations;MAJOR;VB.NET;CODE_SMELL;{confusing,duplicate,suspicious}
vbnet:S2362;Private constants should comply with a naming convention;MINOR;VB.NET;CODE_SMELL;{convention}
vbnet:S134;Control flow statements If, For, For Each, Do, While, Select and Try should not be nested too deeply;CRITICAL;VB.NET;CODE_SMELL;{brain-overload}
vbnet:S1197;Array designators () should be on the type, not the variable;MINOR;VB.NET;CODE_SMELL;{convention}
vbnet:S2363;Private Shared ReadOnly fields should comply with a naming convention;MINOR;VB.NET;CODE_SMELL;{convention}
vbnet:S4142;Duplicate values should not be passed as arguments;MAJOR;VB.NET;CODE_SMELL;{}
vbnet:S1643;Strings should not be concatenated using + or & in a loop;MINOR;VB.NET;CODE_SMELL;{performance}
vbnet:S2375;With statements should be used for a series of calls to the same object;MINOR;VB.NET;CODE_SMELL;{clumsy}
vbnet:S3860;ByVal should not be used;MINOR;VB.NET;CODE_SMELL;{clumsy}
vbnet:S3981;Collection sizes and array length comparisons should make sense;MAJOR;VB.NET;BUG;{}
vbnet:S2376;Write-only properties should not be used;MAJOR;VB.NET;CODE_SMELL;{pitfall}
vbnet:S2373;Generic type parameter names should comply with a naming convention;MINOR;VB.NET;CODE_SMELL;{convention}
vbnet:S101;Class names should comply with a naming convention;MINOR;VB.NET;CODE_SMELL;{convention}
vbnet:S3385;Exit statements should not be used;MAJOR;VB.NET;CODE_SMELL;{bad-practice,brain-overload}
vbnet:S2374;Signed types should be preferred to unsigned ones;CRITICAL;VB.NET;CODE_SMELL;{pitfall}
vbnet:S2339;Public constant members should not be used;CRITICAL;VB.NET;CODE_SMELL;{pitfall}
vbnet:S1645;The & operator should be used to concatenate strings;CRITICAL;VB.NET;CODE_SMELL;{suspicious}
vbnet:S3866;IIf should not be used;CRITICAL;VB.NET;CODE_SMELL;{performance}
vbnet:S2372;Exceptions should not be thrown from property getters;MAJOR;VB.NET;CODE_SMELL;{error-handling}
vbnet:S2370;Non-private Shared ReadOnly fields should comply with a naming convention;MINOR;VB.NET;CODE_SMELL;{convention}
vbnet:S139;Comments should not be located at the end of lines of code;MINOR;VB.NET;CODE_SMELL;{convention}
typescript:S1533;Wrapper objects should not be used for primitive types;MINOR;TypeScript;CODE_SMELL;{pitfall}
objc:S984;Dynamic heap memory allocation should not be used;CRITICAL;Objective-C;BUG;{based-on-misra,pitfall}
typescript:S2589;Conditions should not always evaluate to 'true' or to 'false';MAJOR;TypeScript;CODE_SMELL;{cert,cwe,misra,redundant}
typescript:S3799;Destructuring patterns should not be empty;MAJOR;TypeScript;BUG;{}
typescript:S4524;default clauses should be last;CRITICAL;TypeScript;CODE_SMELL;{misra}
typescript:S4123;await should only be used with promises;CRITICAL;TypeScript;CODE_SMELL;{confusing}
typescript:S4124;Constructors should not be declared inside interfaces;MAJOR;TypeScript;BUG;{}
typescript:S1656;Variables should not be self-assigned;MAJOR;TypeScript;BUG;{cert}
typescript:S2228;Console logging should not be used;MINOR;TypeScript;VULNERABILITY;{owasp-a3}
typescript:S905;Non-empty statements should change control flow or have at least one side-effect;MAJOR;TypeScript;BUG;{cwe,misra,unused}
typescript:S103;Lines should not be too long;MAJOR;TypeScript;CODE_SMELL;{convention}
typescript:S105;Tabulation characters should not be used;MINOR;TypeScript;CODE_SMELL;{convention}
typescript:S104;Files should not have too many lines of code;MAJOR;TypeScript;CODE_SMELL;{brain-overload}
typescript:S108;Nested blocks of code should not be left empty;MAJOR;TypeScript;CODE_SMELL;{suspicious}
typescript:S4138;for of should be used with Iterables;MINOR;TypeScript;CODE_SMELL;{clumsy}
typescript:S1301;switch statements should have at least 3 case clauses;MINOR;TypeScript;CODE_SMELL;{bad-practice,misra}
typescript:S4137;Type assertions should use as;MINOR;TypeScript;CODE_SMELL;{confusing}
typescript:S4139;for in should not be used with iterables;MAJOR;TypeScript;CODE_SMELL;{}
typescript:S1541;Functions should not be too complex;CRITICAL;TypeScript;CODE_SMELL;{brain-overload}
typescript:S2870;delete should not be used on arrays;MAJOR;TypeScript;CODE_SMELL;{}
typescript:S121;Control structures should use curly braces;CRITICAL;TypeScript;CODE_SMELL;{cert,misra,pitfall}
typescript:S1264;A while loop should be used instead of a for loop;MINOR;TypeScript;CODE_SMELL;{clumsy}
typescript:S4136;Method overloads should be grouped together;MINOR;TypeScript;CODE_SMELL;{convention}
typescript:S122;Statements should be on separate lines;MAJOR;TypeScript;CODE_SMELL;{style}
typescript:S881;Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression;MAJOR;TypeScript;CODE_SMELL;{cert,misra}
typescript:S2757;Non-existent operators '=+', '=-' and '=!' should not be used;MAJOR;TypeScript;BUG;{}
typescript:S113;Files should contain an empty newline at the end;MINOR;TypeScript;CODE_SMELL;{convention}
typescript:S117;Variable names should comply with a naming convention;MINOR;TypeScript;CODE_SMELL;{convention}
typescript:S878;Comma operator should not be used;MAJOR;TypeScript;CODE_SMELL;{misra}
typescript:S4622;Union types should not have too many elements;MAJOR;TypeScript;CODE_SMELL;{brain-overload}
typescript:S1874;Deprecated APIs should not be used;MINOR;TypeScript;CODE_SMELL;{cert,cwe,obsolete}
typescript:S3776;Cognitive Complexity of functions should not be too high;CRITICAL;TypeScript;CODE_SMELL;{brain-overload}
typescript:S2688;NaN should not be used in comparisons;MAJOR;TypeScript;BUG;{cert}
typescript:S4621;Union and intersection types should not be defined with duplicated elements;CRITICAL;TypeScript;CODE_SMELL;{}
typescript:S4624;Template literals should not be nested;MAJOR;TypeScript;CODE_SMELL;{brain-overload,confusing}
typescript:S3257;Primitive types should be omitted from initialized or defaulted declarations;MINOR;TypeScript;CODE_SMELL;{clumsy,finding}
typescript:S2201;Return values from functions without side effects should not be ignored;MAJOR;TypeScript;BUG;{cert,misra}
typescript:S2685;arguments.callee should not be used;MAJOR;TypeScript;CODE_SMELL;{obsolete}
typescript:S4623;undefined should not be passed as the value of optional parameters;MAJOR;TypeScript;CODE_SMELL;{confusing}
typescript:S3533;import should be used to include external code;MINOR;TypeScript;CODE_SMELL;{convention,es2015,obsolete}
typescript:S1871;Two branches in a conditional structure should not have exactly the same implementation;MAJOR;TypeScript;CODE_SMELL;{design,suspicious}
typescript:S3498;Object literal shorthand syntax should be used;MINOR;TypeScript;CODE_SMELL;{convention,es2015}
typescript:S1110;Redundant pairs of parentheses should be removed;MAJOR;TypeScript;CODE_SMELL;{confusing}
typescript:S2681;Multiline blocks should be enclosed in curly braces;MAJOR;TypeScript;CODE_SMELL;{cert,cwe}
typescript:S1516;Multiline string literals should not be used;MINOR;TypeScript;CODE_SMELL;{bad-practice}
typescript:S2966;Non-null assertions should not be used;MINOR;TypeScript;CODE_SMELL;{unpredictable}
typescript:S1116;Extra semicolons should be removed;MINOR;TypeScript;CODE_SMELL;{cert,misra,unused}
typescript:S1488;Local variables should not be declared and then immediately returned or thrown;MINOR;TypeScript;CODE_SMELL;{clumsy}
typescript:S1125;Boolean literals should not be redundant;MINOR;TypeScript;CODE_SMELL;{clumsy}
typescript:S3786;Template literal placeholder syntax should not be used in regular strings;MAJOR;TypeScript;BUG;{}
typescript:S4634;Shorthand promises should be used;MAJOR;TypeScript;CODE_SMELL;{proficiency}
typescript:S1121;Assignments should not be made from within conditions;MAJOR;TypeScript;CODE_SMELL;{cert,cwe,misra,suspicious}
typescript:S101;Class and interface names should comply with a naming convention;MINOR;TypeScript;CODE_SMELL;{convention}
typescript:S1526;Variables should be declared before they are used;BLOCKER;TypeScript;CODE_SMELL;{pitfall}
typescript:S1525;Debugger statements should not be used;MINOR;TypeScript;VULNERABILITY;{cwe,owasp-a3,user-experience}
typescript:S1524;Variables should not be shadowed;CRITICAL;TypeScript;CODE_SMELL;{cert,misra,suspicious}
typescript:S3512;Template strings should be used instead of concatenation;MINOR;TypeScript;CODE_SMELL;{clumsy,es2015}
typescript:S4325;Redundant casts and not-null assertions should be avoided;MINOR;TypeScript;CODE_SMELL;{redundant}
typescript:S4204;The any type should not be used;MAJOR;TypeScript;CODE_SMELL;{pitfall}
typescript:S4324;Primitive return types should be used;MINOR;TypeScript;CODE_SMELL;{proficiency}
typescript:S4327;this should not be assigned to variables;MAJOR;TypeScript;CODE_SMELL;{clumsy}
typescript:S4326;await should not be used redundantly;MINOR;TypeScript;CODE_SMELL;{redundant}
typescript:S1451;Track lack of copyright and license headers;BLOCKER;TypeScript;CODE_SMELL;{}
typescript:S4323;Type aliases should be used;MINOR;TypeScript;CODE_SMELL;{proficiency}
typescript:S3353;Unchanged variables should be marked const;CRITICAL;TypeScript;CODE_SMELL;{}
typescript:S4328;Dependencies should be explicit;MAJOR;TypeScript;CODE_SMELL;{}
typescript:S1854;Dead stores should be removed;MAJOR;TypeScript;CODE_SMELL;{cert,cwe,unused}
typescript:S4043;Array-mutating methods should not be used misleadingly;MAJOR;TypeScript;BUG;{}
typescript:S4335;Types without members, 'any' and 'never' should not be used in type intersections;CRITICAL;TypeScript;BUG;{pitfall}
typescript:S1862;Related if/else if statements and cases in a switch should not have the same condition;MAJOR;TypeScript;BUG;{cert,pitfall,unused}
typescript:S4619;in should not be used on arrays;CRITICAL;TypeScript;BUG;{pitfall}
typescript:S3923;All branches in a conditional structure should not have exactly the same implementation;MAJOR;TypeScript;BUG;{}
typescript:S1105;An open curly brace should be located at the end of a line;MINOR;TypeScript;CODE_SMELL;{convention}
typescript:S3801;Functions should use return consistently;MAJOR;TypeScript;CODE_SMELL;{api-design,confusing}
typescript:S1226;Function parameters, caught exceptions and foreach variables' initial values should not be ignored;MINOR;TypeScript;BUG;{misra}
typescript:S3699;The output of functions that don't return anything should not be used;MAJOR;TypeScript;BUG;{}
typescript:S3854;super() should only be invoked once;CRITICAL;TypeScript;BUG;{}
typescript:S3972;Conditionals should start on new lines;CRITICAL;TypeScript;CODE_SMELL;{suspicious}
typescript:S2123;Values should not be uselessly incremented;MAJOR;TypeScript;BUG;{unused}
typescript:S3696;Strings should not be thrown;MAJOR;TypeScript;CODE_SMELL;{api-design,error-handling,misra}
typescript:S4144;Functions should not have identical implementations;MAJOR;TypeScript;CODE_SMELL;{confusing,duplicate,suspicious}
typescript:S4023;Interfaces should not be empty;MINOR;TypeScript;CODE_SMELL;{}
typescript:S1439;Only while, do, for and switch statements should be labelled;MAJOR;TypeScript;CODE_SMELL;{pitfall}
typescript:S1438;Statements should end with semicolons;MINOR;TypeScript;CODE_SMELL;{convention}
typescript:S3616;Logical OR should not be used in switch cases;MAJOR;TypeScript;BUG;{}
typescript:S125;Sections of code should not be commented out;MAJOR;TypeScript;CODE_SMELL;{misra,unused}
typescript:S4140;Sparse arrays should not be declared;MAJOR;TypeScript;CODE_SMELL;{suspicious}
typescript:S4143;Collection elements should not be replaced unconditionally;MAJOR;TypeScript;BUG;{suspicious}
typescript:S3863;Imports from the same modules should be merged;MINOR;TypeScript;CODE_SMELL;{}
typescript:S1441;Quotes for string literals should be used consistently;MINOR;TypeScript;CODE_SMELL;{convention}
typescript:S4156;module should not be used;MINOR;TypeScript;CODE_SMELL;{obsolete}
typescript:S1440;=== and !== should be used instead of == and !=;MAJOR;TypeScript;CODE_SMELL;{suspicious}
typescript:S4157;Default type parameters should be omitted;MINOR;TypeScript;CODE_SMELL;{clumsy}
typescript:S2814;Variables should not be redeclared;MAJOR;TypeScript;CODE_SMELL;{confusing}
typescript:S2933;Private properties that are only assigned in the constructor or at declaration should be readonly;MAJOR;TypeScript;CODE_SMELL;{confusing}
typescript:S3626;Jump statements should not be redundant;MINOR;TypeScript;CODE_SMELL;{clumsy,redundant}
typescript:S3504;Variables should be declared with let or const;CRITICAL;TypeScript;CODE_SMELL;{bad-practice,es2015}
typescript:S4030;Collection and array contents should be used;MAJOR;TypeScript;CODE_SMELL;{suspicious,unused}
typescript:S138;Functions should not have too many lines of code;MAJOR;TypeScript;CODE_SMELL;{brain-overload}
typescript:S4275;Getters and setters should access the expected fields;CRITICAL;TypeScript;BUG;{pitfall}
common-swift:FailedUnitTests;Failed unit tests should be fixed;MAJOR;Swift;BUG;{}
common-swift:SkippedUnitTests;Skipped unit tests should be either removed or fixed;MAJOR;Swift;CODE_SMELL;{pitfall}
common-swift:DuplicatedBlocks;Source files should not have any duplicated blocks;MAJOR;Swift;CODE_SMELL;{pitfall}
common-swift:InsufficientCommentDensity;Source files should have a sufficient density of comment lines;MAJOR;Swift;CODE_SMELL;{convention}
common-swift:InsufficientLineCoverage;Lines should have sufficient coverage by tests;MAJOR;Swift;CODE_SMELL;{bad-practice}
common-swift:InsufficientBranchCoverage;Branches should have sufficient coverage by tests;MAJOR;Swift;CODE_SMELL;{bad-practice}
flex:S1455;Package definition should be separate from Class definition;MINOR;Flex;CODE_SMELL;{obsolete}
flex:S1176;Public classes, methods, properties and metadata should be documented with ASDoc;MAJOR;Flex;CODE_SMELL;{convention}
flex:S1454;Multiple ++ or -- unary operators should not be used in a single arithmetic expression;MAJOR;Flex;BUG;{}
flex:S1451;Track lack of copyright and license headers;BLOCKER;Flex;CODE_SMELL;{}
flex:ParsingError;Flex parser failure;MAJOR;Flex;CODE_SMELL;{suspicious}
flex:LineLength;Lines should not be too long;MAJOR;Flex;CODE_SMELL;{convention}
flex:S1170;Public constants and fields initialized at declaration should be const static rather than merely const;MINOR;Flex;CODE_SMELL;{convention}
flex:S107;Functions should not have too many parameters;MAJOR;Flex;CODE_SMELL;{brain-overload}
flex:S108;Nested blocks of code should not be left empty;MAJOR;Flex;CODE_SMELL;{suspicious}
flex:XPath;Track breaches of an XPath rule;MAJOR;Flex;CODE_SMELL;{}
flex:S1466;The flash.system.Security.exactSettings property should never be set to false;BLOCKER;Flex;VULNERABILITY;{}
flex:S1982;MovieClip.onEnterFrame event handler should not be used;MINOR;Flex;CODE_SMELL;{performance}
flex:S1784;Method visibility should be explicitly declared;MINOR;Flex;BUG;{convention}
flex:S1068;Unused private fields should be removed;MAJOR;Flex;CODE_SMELL;{unused}
flex:S1465;LocalConnection should be configured to narrowly specify the domains with which local connections to other Flex application ar;CRITICAL;Flex;VULNERABILITY;{}
flex:S1464;ManagedEvents tags should have companion Event tags;MAJOR;Flex;BUG;{}
flex:S1144;Unused private functions should be removed;MAJOR;Flex;CODE_SMELL;{unused}
flex:S1463;Event types should be defined in metadata tags;CRITICAL;Flex;CODE_SMELL;{design}
flex:S120;Package names should comply with a naming convention;MINOR;Flex;CODE_SMELL;{convention}
flex:S1462;Event names should not be hardcoded in event listeners;CRITICAL;Flex;CODE_SMELL;{design}
flex:S1066;Collapsible if statements should be merged;MAJOR;Flex;CODE_SMELL;{clumsy}
flex:S1186;Methods should not be empty;CRITICAL;Flex;CODE_SMELL;{suspicious}
flex:S1142;Functions should not contain too many return statements;MAJOR;Flex;CODE_SMELL;{brain-overload}
flex:S1185;Overriding methods should do more than simply call the same method in the super class;MINOR;Flex;CODE_SMELL;{clumsy,redundant}
flex:OneStatementPerLine;Statements should be on separate lines;MAJOR;Flex;CODE_SMELL;{style}
flex:S1821;switch statements should not be nested;CRITICAL;Flex;CODE_SMELL;{pitfall}
flex:S1469;The element type of an array field should be specified;BLOCKER;Flex;CODE_SMELL;{pitfall}
flex:S1820;Classes should not have too many fields;MAJOR;Flex;CODE_SMELL;{brain-overload}
flex:S1468;Security.allowDomain(...) should only be used in a tightly focused manner;BLOCKER;Flex;VULNERABILITY;{}
flex:ClassComplexity;Classes should not be too complex;CRITICAL;Flex;CODE_SMELL;{}
flex:S116;Field names should comply with a naming convention;MINOR;Flex;CODE_SMELL;{convention}
flex:S115;Constant names should comply with a naming convention;CRITICAL;Flex;CODE_SMELL;{convention}
flex:S117;Local variable and function parameter names should comply with a naming convention;MINOR;Flex;CODE_SMELL;{convention}
flex:S1434;Variables of the Object type should not be used;CRITICAL;Flex;CODE_SMELL;{suspicious}
flex:S1950;Cases in a switch should not have the same condition;MINOR;Flex;BUG;{}
flex:S1312;Loggers should be private static const and should share naming convention;MINOR;Flex;CODE_SMELL;{convention}
flex:S134;Control flow statements if, for, while and switch should not be nested too deeply;CRITICAL;Flex;CODE_SMELL;{brain-overload}
flex:S1439;Only while, do and for statements should be labelled;MAJOR;Flex;CODE_SMELL;{pitfall}
flex:S1438;Statements should end with semicolons;MINOR;Flex;CODE_SMELL;{convention}
flex:FunctionComplexity;Functions should not be too complex;CRITICAL;Flex;CODE_SMELL;{brain-overload}
flex:S1952;Objects should not be instantiated inside a loop;MAJOR;Flex;CODE_SMELL;{performance}
flex:S1435;The special star type should not be used;CRITICAL;Flex;CODE_SMELL;{unpredictable}
flex:CommentRegularExpression;Track comments matching a regular expression;MAJOR;Flex;CODE_SMELL;{}
flex:WithStatement;with statements should not be used;MAJOR;Flex;BUG;{}
flex:S1470;Classes that extend Event should override Event.clone();MAJOR;Flex;BUG;{}
flex:S1151;switch case clauses should not have too many lines of code;MAJOR;Flex;CODE_SMELL;{brain-overload}
flex:ActionScript2;Statements, operators and keywords specific to ActionScript 2 should not be used;MAJOR;Flex;CODE_SMELL;{obsolete}
flex:S1445;Constructors should not have a void return type;MINOR;Flex;CODE_SMELL;{confusing}
flex:S1125;Boolean literals should not be redundant;MINOR;Flex;CODE_SMELL;{clumsy}
flex:S1440;=== and !== should be used instead of == and !=;MAJOR;Flex;CODE_SMELL;{suspicious}
flex:S100;Function names should comply with a naming convention;MINOR;Flex;CODE_SMELL;{convention}
flex:S101;Class names should comply with a naming convention;MINOR;Flex;CODE_SMELL;{convention}
flex:S1448;Classes should not have too many methods;MAJOR;Flex;CODE_SMELL;{brain-overload}
flex:S1447;Constructor bodies should be as lightweight as possible;MAJOR;Flex;CODE_SMELL;{performance}
flex:S1446;Dynamic classes should not be used;BLOCKER;Flex;CODE_SMELL;{pitfall}
flex:S1481;Unused local variables should be removed;MINOR;Flex;CODE_SMELL;{unused}
flex:S138;Functions should not have too many lines of code;MAJOR;Flex;CODE_SMELL;{brain-overload}
common-abap:FailedUnitTests;Failed unit tests should be fixed;MAJOR;ABAP;BUG;{}
common-abap:SkippedUnitTests;Skipped unit tests should be either removed or fixed;MAJOR;ABAP;CODE_SMELL;{pitfall}
common-abap:DuplicatedBlocks;Source files should not have any duplicated blocks;MAJOR;ABAP;CODE_SMELL;{pitfall}
common-abap:InsufficientCommentDensity;Source files should have a sufficient density of comment lines;MAJOR;ABAP;CODE_SMELL;{convention}
common-abap:InsufficientLineCoverage;Lines should have sufficient coverage by tests;MAJOR;ABAP;CODE_SMELL;{bad-practice}
common-abap:InsufficientBranchCoverage;Branches should have sufficient coverage by tests;MAJOR;ABAP;CODE_SMELL;{bad-practice}
common-rpg:FailedUnitTests;Failed unit tests should be fixed;MAJOR;RPG;BUG;{}
common-rpg:InsufficientLineCoverage;Lines should have sufficient coverage by tests;MAJOR;RPG;CODE_SMELL;{bad-practice}
common-rpg:InsufficientBranchCoverage;Branches should have sufficient coverage by tests;MAJOR;RPG;CODE_SMELL;{bad-practice}
plsql:PlSql.FunctionAndProcedureNaming;Function and procedure names should comply with a naming convention;MAJOR;PL/SQL;CODE_SMELL;{convention}
plsql:S3830;COMMIT should not be used inside a loop;CRITICAL;PL/SQL;BUG;{}
plsql:AvoidFetchBulkCollectIntoWithoutLimitCheck;FETCH ... BULK COLLECT INTO should not be used without a LIMIT clause;BLOCKER;PL/SQL;BUG;{}
plsql:S1131;Lines should not end with trailing whitespaces;MINOR;PL/SQL;CODE_SMELL;{convention}
plsql:NotNullDeclarationWithoutInitializationCheck;NOT NULL variables should be initialized;BLOCKER;PL/SQL;BUG;{}
plsql:VariableNotNullUsageCheck;Variables should be nullable;MAJOR;PL/SQL;CODE_SMELL;{performance}
plsql:LineLength;Lines should not be too long;MAJOR;PL/SQL;CODE_SMELL;{convention}
plsql:S1138;SQL EXISTS subqueries should not be used;MAJOR;PL/SQL;CODE_SMELL;{performance,sql}
plsql:UseNativeSqlJoinsInsteadOfEmbeddedCursorLoopsCheck;Native SQL joins should be used;MAJOR;PL/SQL;CODE_SMELL;{performance,sql}
plsql:FloatWithScaleUsageCheck;Scale should not be specified for float types;BLOCKER;PL/SQL;BUG;{}
plsql:NamingFunctionAndProcedureParametersCheck;Function and procedure parameters should comply with a naming convention;MAJOR;PL/SQL;CODE_SMELL;{convention}
plsql:LoopHardcodedBoundsCheck;FOR loop end conditions should not be hard-coded;MAJOR;PL/SQL;CODE_SMELL;{brain-overload}
plsql:UseAnsiJoinsCheck;SQL tables should be joined with the JOIN keyword;MINOR;PL/SQL;CODE_SMELL;{obsolete,sql}
plsql:S4081;PLS_INTEGER types should be used;MINOR;PL/SQL;CODE_SMELL;{performance}
plsql:LoopUseExitWhenCheck;EXIT WHEN should be used rather than IF ... THEN EXIT END IF;MAJOR;PL/SQL;CODE_SMELL;{clumsy}
plsql:S1145;IF statement conditions should not evaluate unconditionally to TRUE or to FALSE;MAJOR;PL/SQL;BUG;{cwe,misra}
plsql:LoopMissingSemicolonCheck;END LOOP should be followed by a semicolon;BLOCKER;PL/SQL;BUG;{}
objc:S5297;GNU attributes should be used correctly;MAJOR;Objective-C;CODE_SMELL;{confusing}
objc:GotoUsage;goto statement should not be used;MAJOR;Objective-C;CODE_SMELL;{based-on-misra,brain-overload}
objc:S986;offsetof macro from <stddef.h> should not be used;CRITICAL;Objective-C;CODE_SMELL;{misra-c++2008,misra-c2004,suspicious}
objc:S989;atof, atoi and atol from <stdlib.h> should not be used;CRITICAL;Objective-C;BUG;{based-on-misra,cert}
objc:S109;Magic numbers should not be used;MAJOR;Objective-C;CODE_SMELL;{brain-overload}
plsql:OrderByColumnNumberCheck;Column names should be used in a SQL ORDER BY clause;MAJOR;PL/SQL;CODE_SMELL;{sql}
plsql:ForLoopUsageCheck;Collections should not be iterated in FOR loops;CRITICAL;PL/SQL;BUG;{}
plsql:LabelSubBlock;Nested blocks should be labeled;MAJOR;PL/SQL;CODE_SMELL;{style}
plsql:PlSql.FileComplexity;Files should not be too complex;MAJOR;PL/SQL;CODE_SMELL;{}
plsql:AvoidGroupByClauseCheck;GROUP BY should not be used in SQL SELECT statements;MAJOR;PL/SQL;CODE_SMELL;{brain-overload,performance,sql}
plsql:FunctionOutParametersCheck;FUNCTIONS should not have OUT parameters;MAJOR;PL/SQL;CODE_SMELL;{pitfall,suspicious}
plsql:PositionalAndNamedArgumentMixCheck;Positional and named arguments should not be mixed in invocations;CRITICAL;PL/SQL;BUG;{}
plsql:NaturalJoinUsageCheck;NATURAL JOIN queries should not be used;MAJOR;PL/SQL;CODE_SMELL;{design,sql}
plsql:SysOwnedFunctions;Sensitive SYS owned functions should not be used;CRITICAL;PL/SQL;VULNERABILITY;{cwe}
plsql:S1110;Redundant pairs of parentheses should be removed;MAJOR;PL/SQL;CODE_SMELL;{confusing}
plsql:SingleLineCommentsSyntaxCheck;Single line comments should start with --;MINOR;PL/SQL;CODE_SMELL;{convention}
plsql:PipelinedFunctionsWithoutPipeRow;Pipelined functions should have at least one PIPE ROW statement and not return an expression (PLS-00633);BLOCKER;PL/SQL;BUG;{}
plsql:NamingObjectAttribute;Object attributes should comply with a naming convention;MINOR;PL/SQL;CODE_SMELL;{convention}
plsql:PlSql.Goto;GOTO statements should not be used;MAJOR;PL/SQL;CODE_SMELL;{brain-overload,misra}
plsql:BlockUnlabeledEndCheck;END statements of labeled blocks should be labeled;MAJOR;PL/SQL;CODE_SMELL;{style}
plsql:BlockMissingSemicolonCheck;Block labels should appear on the same lines as END;CRITICAL;PL/SQL;CODE_SMELL;{convention}
plsql:MlslabelDatatypeUsageCheck;MLSLABEL should not be used;MAJOR;PL/SQL;BUG;{obsolete}
squid:S1314;Octal values should not be used;BLOCKER;Java;CODE_SMELL;{based-on-misra,cert,pitfall}
cpp:S5302;A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast;BLOCKER;C++;BUG;{misra-c++2008}
abap:S1764;Identical expressions should not be used on both sides of a binary operator;MAJOR;ABAP;BUG;{cert}
abap:S1655;FORM... ENDFORM and PERFORM should not be used;MAJOR;ABAP;CODE_SMELL;{}
abap:S1487;SYSTEM-CALL statement should not be used;MAJOR;ABAP;CODE_SMELL;{}
squid:NoSonar;Track uses of NOSONAR comments;MAJOR;Java;CODE_SMELL;{bad-practice}
squid:S1774;The ternary operator should not be used;MAJOR;Java;CODE_SMELL;{brain-overload}
cobol:S1755;Files should not contain too many sections;MAJOR;COBOL;CODE_SMELL;{brain-overload}
tsql:S4054;Queries that use TOP should have an ORDER BY;MAJOR;T-SQL;BUG;{sql}
cpp:S3590;Stack allocated memory should not be freed;BLOCKER;C++;BUG;{unpredictable}
pli:ParseError;Track parsing failures;MAJOR;PL/I;CODE_SMELL;{suspicious}
rpg:S2024;Standard language features should be in upper case;MINOR;RPG;CODE_SMELL;{convention}
c:S1186;Methods should not be empty;CRITICAL;C;CODE_SMELL;{suspicious}
cpp:S3230;Initialization lists should be used;MAJOR;C++;CODE_SMELL;{performance}
typescript:S109;Magic numbers should not be used;MAJOR;TypeScript;CODE_SMELL;{brain-overload}
typescript:S3981;Collection sizes and array length comparisons should make sense;MAJOR;TypeScript;BUG;{}
flex:S1467;Constructors should not dispatch events;MAJOR;Flex;BUG;{}
common-rpg:SkippedUnitTests;Skipped unit tests should be either removed or fixed;MAJOR;RPG;CODE_SMELL;{pitfall}
common-rpg:DuplicatedBlocks;Source files should not have any duplicated blocks;MAJOR;RPG;CODE_SMELL;{pitfall}
common-rpg:InsufficientCommentDensity;Source files should have a sufficient density of comment lines;MAJOR;RPG;CODE_SMELL;{convention}
plsql:VariableRedeclaration;Variables should be declared only once in a scope;BLOCKER;PL/SQL;BUG;{}
plsql:OverridePredefinedExceptionCheck;Predefined exceptions should not be overridden;BLOCKER;PL/SQL;BUG;{}
plsql:S1479;CASE structures should not have too many WHEN clauses;MAJOR;PL/SQL;CODE_SMELL;{brain-overload}
plsql:BackwardsGoto;GOTO should not be used to jump backwards;BLOCKER;PL/SQL;CODE_SMELL;{misra,pitfall}
plsql:CommentRegularExpressionCheckPlSql;Track comments matching a regular expression;MAJOR;PL/SQL;CODE_SMELL;{}
plsql:ParameterExplicitInCheck;Parameter IN mode should be specified explicitly;MINOR;PL/SQL;CODE_SMELL;{convention}
plsql:PlSql.FunctionAndProcedureExcessiveParameters;Functions and procedures should not have too many parameters;MAJOR;PL/SQL;CODE_SMELL;{brain-overload}
plsql:InvalidConstrainCheck;Constraints should not be applied to types that cannot be constrained;BLOCKER;PL/SQL;BUG;{}
plsql:S1192;String literals should not be duplicated;CRITICAL;PL/SQL;CODE_SMELL;{design}
plsql:LoopAvoidSimpleLoopCheck;LOOP ... END LOOP constructs should be avoided;CRITICAL;PL/SQL;CODE_SMELL;{pitfall}
plsql:S4062;ROWNUM should not be used at the same query level as ORDER BY;MAJOR;PL/SQL;BUG;{sql}
plsql:S1126;Return of boolean expressions should not be wrapped into an if-then-else statement;MINOR;PL/SQL;CODE_SMELL;{clumsy}
plsql:NameReusedInInnerScope;Labels should not be reused in inner scopes;MAJOR;PL/SQL;CODE_SMELL;{pitfall}
plsql:Notfound;cursor%NOTFOUND should be used instead of NOT cursor%FOUND;MINOR;PL/SQL;CODE_SMELL;{clumsy}
plsql:NumberWithoutPrecisionCheck;NUMBER variables should be declared with precision;MAJOR;PL/SQL;CODE_SMELL;{performance}
plsql:CompoundTriggerDefinesSingleTrigger;Compound triggers should define at least two triggers;MAJOR;PL/SQL;CODE_SMELL;{clumsy}
plsql:LabelStartEndMatchLoopCheck;Loop start and end labels should match;BLOCKER;PL/SQL;CODE_SMELL;{confusing}
plsql:PlSql.ParsingError;Track parsing failures;MAJOR;PL/SQL;CODE_SMELL;{suspicious}
plsql:CharVarchar;VARCHAR2 and NVARCHAR2 should be used;MAJOR;PL/SQL;BUG;{}
plsql:SelectStarCheck;Columns to be read with a SELECT statement should be clearly defined;MAJOR;PL/SQL;CODE_SMELL;{performance,sql}
plsql:UpperCaseReservedWordsCheck;Reserved words should be written in upper case;MINOR;PL/SQL;CODE_SMELL;{convention}
plsql:ComplexIfShouldBeReplacedByCase;CASE should be used for sequences of simple tests;MINOR;PL/SQL;CODE_SMELL;{clumsy}
plsql:S1481;Unused local variables should be removed;MINOR;PL/SQL;CODE_SMELL;{unused}
plsql:TablesShouldBeAliasedCheck;Tables should be aliased;MAJOR;PL/SQL;CODE_SMELL;{brain-overload,sql}
plsql:S1573;Explicitly opened cursors should be closed;MINOR;PL/SQL;BUG;{cwe,sql}
plsql:S1739;LIKE clauses should not start with wildcard characters;MAJOR;PL/SQL;CODE_SMELL;{performance,sql}
plsql:PlSql.FunctionAndProcedureComplexity;Functions and procedures should not be too complex;CRITICAL;PL/SQL;CODE_SMELL;{brain-overload}
plsql:S1615;Constraint names should comply with a naming convention;MINOR;PL/SQL;CODE_SMELL;{convention}
plsql:NamingRecordField;Record fields should comply with a naming convention;MINOR;PL/SQL;CODE_SMELL;{convention}
plsql:InItemsCountCheck;Large item lists should not be used with IN clauses;MAJOR;PL/SQL;CODE_SMELL;{pitfall,sql}
plsql:DecodeFunctionUsageCheck;CASE should be used rather than DECODE;MAJOR;PL/SQL;CODE_SMELL;{obsolete}
plsql:NestedIf;IF statements should not be nested too deeply;CRITICAL;PL/SQL;CODE_SMELL;{brain-overload}
plsql:NamingTypesCheck;Types should follow a naming convention;MINOR;PL/SQL;CODE_SMELL;{convention}
plsql:ProcedureWithoutParametersCheck;Procedures should have parameters;MAJOR;PL/SQL;CODE_SMELL;{design}
plsql:BadRaiseApplicationErrorUsageCheck;RAISE_APPLICATION_ERROR should only be used with error codes from -20,000 to -20,999;BLOCKER;PL/SQL;BUG;{error-handling}
plsql:S1614;A primary key should be specified during table creation;BLOCKER;PL/SQL;CODE_SMELL;{suspicious}
plsql:UseAsForColumnAliasesCheck;Column aliases should be defined using AS;MAJOR;PL/SQL;CODE_SMELL;{pitfall}
plsql:NamingExceptionsCheck;Exceptions should follow a naming convention;MINOR;PL/SQL;CODE_SMELL;{convention}
plsql:JoinConditionNumberCheck;SQL statements should not join too many tables;MAJOR;PL/SQL;CODE_SMELL;{brain-overload,performance,sql}
plsql:GotoInLoopCheck;GOTO should not be used within loops;MAJOR;PL/SQL;CODE_SMELL;{pitfall}
plsql:NoSonarCheck;Track uses of NOSONAR comments;MAJOR;PL/SQL;CODE_SMELL;{bad-practice}
plsql:UseForallStatementCheck;FORALL should be used;MAJOR;PL/SQL;CODE_SMELL;{performance}
plsql:StandaloneProcAndFuncCheck;Procedures and functions should be encapsulated in packages;MAJOR;PL/SQL;CODE_SMELL;{brain-overload}
plsql:SelectListSizeCheck;Queries should not SELECT too many columns;MAJOR;PL/SQL;CODE_SMELL;{brain-overload,sql}
plsql:SimpleIntegerPlsIntegerCheck;SIMPLE_INTEGER should be used instead of PLS_INTEGER;MAJOR;PL/SQL;CODE_SMELL;{error-handling,performance}
plsql:TriggerOfConditionsCheck;DML events clauses should not include multiple OF clauses;MAJOR;PL/SQL;BUG;{}
plsql:S3921;Strings should only be moved to variables or columns which are large enough to hold them;MAJOR;PL/SQL;BUG;{cwe}
plsql:PreferExecuteImmediateToDbmsSqlCheck;EXECUTE IMMEDIATE should be used instead of DBMS_SQL procedure calls;MAJOR;PL/SQL;CODE_SMELL;{clumsy}
plsql:SizeConstraintMissingCheck;Size should be specified for string variables;BLOCKER;PL/SQL;BUG;{}
plsql:OneStatementPerLineCheck;Statements should be on separate lines;MAJOR;PL/SQL;CODE_SMELL;{style}
plsql:InitializeWithNullCheck;Variables should not be initialized with NULL;MINOR;PL/SQL;CODE_SMELL;{clumsy}
plsql:MagicLiteral;Magic literals should not be used;MAJOR;PL/SQL;CODE_SMELL;{brain-overload}
plsql:FullOuterJoinCheck;FULL OUTER JOINS should be used with caution;MAJOR;PL/SQL;CODE_SMELL;{pitfall,sql}
plsql:LabelStartEndMatchBlockCheck;Block start and end labels should match;BLOCKER;PL/SQL;CODE_SMELL;{confusing}
plsql:ColumnsShouldBeAliasedCheck;Columns should be aliased;MAJOR;PL/SQL;CODE_SMELL;{design,sql}
plsql:S3633;WHERE clause conditions should not be contradictory;MAJOR;PL/SQL;BUG;{sql}
plsql:ReturnInLoop;RETURN should not be used from within a loop;MAJOR;PL/SQL;CODE_SMELL;{}
plsql:MagicNumber;Magic numbers should not be used;MAJOR;PL/SQL;CODE_SMELL;{brain-overload}
plsql:ImproperConstraintUsageCheck;Improper constraint forms should not be used;BLOCKER;PL/SQL;BUG;{}
plsql:NullComparison;NULL should not be compared directly;MAJOR;PL/SQL;BUG;{sql}
plsql:LongCheck;Deprecated LONG and LONG RAW datatypes should no longer be used;MAJOR;PL/SQL;CODE_SMELL;{obsolete}
plsql:ExecuteImmediateTrapExceptionsCheck;Blocks containing EXECUTE IMMEDIATE should trap all exceptions;CRITICAL;PL/SQL;CODE_SMELL;{error-handling}
plsql:AnchoredTypeConstrainCheck;Anchored types should not be constrained;BLOCKER;PL/SQL;BUG;{}
plsql:OrderByExplicitAscCheck;An ORDER BY direction should be specified explicitly;MINOR;PL/SQL;CODE_SMELL;{confusing,sql}
plsql:NamingVariablesCheck;Variables should comply with a naming convention;MINOR;PL/SQL;CODE_SMELL;{convention}
plsql:NamingCursorParametersCheck;Cursor parameters should follow a naming convention;MINOR;PL/SQL;CODE_SMELL;{convention}
plsql:LoopUnlabeledExitCheck;In labeled loops EXIT should exit the label;MAJOR;PL/SQL;CODE_SMELL;{pitfall}
plsql:TriggerCommitRollbackCheck;COMMIT and ROLLBACK should not be called from non-autonomous transaction triggers;CRITICAL;PL/SQL;BUG;{}
plsql:MultiLineCommentFormatCheck;Lines in a multiline comment should start with *;MINOR;PL/SQL;CODE_SMELL;{convention}
plsql:ConstantDeclarationWithoutInitializationCheck;Constant declarations should contain initialization assignments;BLOCKER;PL/SQL;BUG;{}
plsql:PlSql.UseWhenOthers;WHEN OTHERS clauses should be used for exception handling;CRITICAL;PL/SQL;CODE_SMELL;{cert,cwe,error-handling,misra}
plsql:FunctionResultCacheCheck;RESULT_CACHE should not be used;MAJOR;PL/SQL;CODE_SMELL;{performance}
plsql:NamingConstantsCheck;Constant names should comply with a naming convention;CRITICAL;PL/SQL;CODE_SMELL;{convention}
plsql:ForallStatementShouldUseSaveExceptionsClause;FORALL statements should use the SAVE EXCEPTIONS clause;BLOCKER;PL/SQL;BUG;{}
plsql:PlSql.CreateFunctionAndCreateProcedureDocumented;Procedures and functions should be documented;MAJOR;PL/SQL;CODE_SMELL;{}
plsql:FormatErrorStackAndBacktraceUsedAlongside;DBMS_UTILITY.FORMAT_ERROR_STACK and FORMAT_ERROR_BACKTRACE should be used together;MINOR;PL/SQL;CODE_SMELL;{error-reporting}
plsql:DbmsOutputPutLineCallCheck;DBMS_OUTPUT.PUT_LINE should not be used;CRITICAL;PL/SQL;CODE_SMELL;{bad-practice}
plsql:ReturnInInitializationSectionCheck;PACKAGE BODY initialization sections should not contain RETURN statements;MAJOR;PL/SQL;BUG;{unused}
plsql:OracleJoinOperatorUsageCheck;Oracle's join operator (+) should not be used;MINOR;PL/SQL;CODE_SMELL;{lock-in,sql}
plsql:WhenOthersAsOnlyExceptionHandlerCheck;WHEN OTHERS should not be the only exception handler;CRITICAL;PL/SQL;CODE_SMELL;{cwe,error-handling}
plsql:S1151;WHEN clauses should not have too many lines;MAJOR;PL/SQL;CODE_SMELL;{brain-overload}
plsql:VarcharUsageCheck;VARCHAR2 should be used;MAJOR;PL/SQL;CODE_SMELL;{lock-in}
plsql:CreateOrReplaceCheck;CREATE OR REPLACE should be used instead of CREATE;CRITICAL;PL/SQL;CODE_SMELL;{bad-practice}
plsql:CustomExceptionInitCheck;EXCEPTION_INIT -20,NNN calls should be centralized;CRITICAL;PL/SQL;CODE_SMELL;{design}
plsql:FunctionLastStatementReturnCheck;Functions should end with RETURN statements;CRITICAL;PL/SQL;BUG;{pitfall}
plsql:VariableInPackageSpecificationCheck;Global public variables should not be defined;BLOCKER;PL/SQL;CODE_SMELL;{design}
plsql:NestedSubqueriesCheck;Nested subqueries should be avoided;MAJOR;PL/SQL;CODE_SMELL;{performance,sql}
plsql:LabeledNestedLoopsCheck;Nested loops should be labeled;MAJOR;PL/SQL;CODE_SMELL;{confusing,style}
plsql:ReliesOnClauseUsage;The RELIES_ON clause should not be used;MINOR;PL/SQL;CODE_SMELL;{obsolete}
plsql:WeakRefCursorCheck;Weak REF CURSOR types should not be used;CRITICAL;PL/SQL;CODE_SMELL;{design}
plsql:ExitInLoop;EXIT should not be used in loops;MINOR;PL/SQL;CODE_SMELL;{bad-practice,misra}
plsql:LowerCaseReservedWordsCheck;Reserved words should be written in lower case;MINOR;PL/SQL;CODE_SMELL;{convention}
plsql:LoopUnlabeledEndCheck;END statements of labeled loops should be labeled;MAJOR;PL/SQL;CODE_SMELL;{pitfall,style}
plsql:S139;Comments should not be located at the end of lines of code;MINOR;PL/SQL;CODE_SMELL;{convention}
plsql:BooleanLiteralComparisonCheck;Boolean literals should not be redundant;MINOR;PL/SQL;CODE_SMELL;{clumsy}
common-ts:FailedUnitTests;Failed unit tests should be fixed;MAJOR;TypeScript;BUG;{}
common-ts:SkippedUnitTests;Skipped unit tests should be either removed or fixed;MAJOR;TypeScript;CODE_SMELL;{pitfall}
common-ts:DuplicatedBlocks;Source files should not have any duplicated blocks;MAJOR;TypeScript;CODE_SMELL;{pitfall}
common-ts:InsufficientCommentDensity;Source files should have a sufficient density of comment lines;MAJOR;TypeScript;CODE_SMELL;{convention}
common-ts:InsufficientLineCoverage;Lines should have sufficient coverage by tests;MAJOR;TypeScript;CODE_SMELL;{bad-practice}
common-ts:InsufficientBranchCoverage;Branches should have sufficient coverage by tests;MAJOR;TypeScript;CODE_SMELL;{bad-practice}
common-plsql:InsufficientLineCoverage;Lines should have sufficient coverage by tests;MAJOR;PL/SQL;CODE_SMELL;{bad-practice}
common-plsql:InsufficientBranchCoverage;Branches should have sufficient coverage by tests;MAJOR;PL/SQL;CODE_SMELL;{bad-practice}
common-cpp:InsufficientLineCoverage;Lines should have sufficient coverage by tests;MAJOR;C++;CODE_SMELL;{bad-practice}
common-cpp:InsufficientBranchCoverage;Branches should have sufficient coverage by tests;MAJOR;C++;CODE_SMELL;{bad-practice}
common-java:InsufficientLineCoverage;Lines should have sufficient coverage by tests;MAJOR;Java;CODE_SMELL;{bad-practice}
common-java:InsufficientBranchCoverage;Branches should have sufficient coverage by tests;MAJOR;Java;CODE_SMELL;{bad-practice}
common-vbnet:FailedUnitTests;Failed unit tests should be fixed;MAJOR;VB.NET;BUG;{}
common-vbnet:SkippedUnitTests;Skipped unit tests should be either removed or fixed;MAJOR;VB.NET;CODE_SMELL;{pitfall}
common-vbnet:DuplicatedBlocks;Source files should not have any duplicated blocks;MAJOR;VB.NET;CODE_SMELL;{pitfall}
common-vbnet:InsufficientCommentDensity;Source files should have a sufficient density of comment lines;MAJOR;VB.NET;CODE_SMELL;{convention}
common-vbnet:InsufficientLineCoverage;Lines should have sufficient coverage by tests;MAJOR;VB.NET;CODE_SMELL;{bad-practice}
common-vbnet:InsufficientBranchCoverage;Branches should have sufficient coverage by tests;MAJOR;VB.NET;CODE_SMELL;{bad-practice}
common-js:InsufficientLineCoverage;Lines should have sufficient coverage by tests;MAJOR;JavaScript;CODE_SMELL;{bad-practice}
common-js:InsufficientBranchCoverage;Branches should have sufficient coverage by tests;MAJOR;JavaScript;CODE_SMELL;{bad-practice}
common-pli:FailedUnitTests;Failed unit tests should be fixed;MAJOR;PL/I;BUG;{}
common-pli:SkippedUnitTests;Skipped unit tests should be either removed or fixed;MAJOR;PL/I;CODE_SMELL;{pitfall}
common-pli:DuplicatedBlocks;Source files should not have any duplicated blocks;MAJOR;PL/I;CODE_SMELL;{pitfall}
common-pli:InsufficientCommentDensity;Source files should have a sufficient density of comment lines;MAJOR;PL/I;CODE_SMELL;{convention}
common-pli:InsufficientLineCoverage;Lines should have sufficient coverage by tests;MAJOR;PL/I;CODE_SMELL;{bad-practice}
common-pli:InsufficientBranchCoverage;Branches should have sufficient coverage by tests;MAJOR;PL/I;CODE_SMELL;{bad-practice}
common-c:DuplicatedBlocks;Source files should not have any duplicated blocks;MAJOR;C;CODE_SMELL;{pitfall}
common-c:FailedUnitTests;Failed unit tests should be fixed;MAJOR;C;BUG;{}
common-c:InsufficientCommentDensity;Source files should have a sufficient density of comment lines;MAJOR;C;CODE_SMELL;{convention}
common-c:SkippedUnitTests;Skipped unit tests should be either removed or fixed;MAJOR;C;CODE_SMELL;{pitfall}
common-cobol:DuplicatedBlocks;Source files should not have any duplicated blocks;MAJOR;COBOL;CODE_SMELL;{pitfall}
common-cobol:FailedUnitTests;Failed unit tests should be fixed;MAJOR;COBOL;BUG;{}
common-cobol:InsufficientCommentDensity;Source files should have a sufficient density of comment lines;MAJOR;COBOL;CODE_SMELL;{convention}
common-cobol:SkippedUnitTests;Skipped unit tests should be either removed or fixed;MAJOR;COBOL;CODE_SMELL;{pitfall}
common-cpp:DuplicatedBlocks;Source files should not have any duplicated blocks;MAJOR;C++;CODE_SMELL;{pitfall}
common-cpp:FailedUnitTests;Failed unit tests should be fixed;MAJOR;C++;BUG;{}
common-cpp:InsufficientCommentDensity;Source files should have a sufficient density of comment lines;MAJOR;C++;CODE_SMELL;{convention}
common-cpp:SkippedUnitTests;Skipped unit tests should be either removed or fixed;MAJOR;C++;CODE_SMELL;{pitfall}
common-flex:DuplicatedBlocks;Source files should not have any duplicated blocks;MAJOR;Flex;CODE_SMELL;{pitfall}
common-flex:FailedUnitTests;Failed unit tests should be fixed;MAJOR;Flex;BUG;{}
common-flex:InsufficientCommentDensity;Source files should have a sufficient density of comment lines;MAJOR;Flex;CODE_SMELL;{convention}
common-flex:SkippedUnitTests;Skipped unit tests should be either removed or fixed;MAJOR;Flex;CODE_SMELL;{pitfall}
common-java:DuplicatedBlocks;Source files should not have any duplicated blocks;MAJOR;Java;CODE_SMELL;{pitfall}
common-java:FailedUnitTests;Failed unit tests should be fixed;MAJOR;Java;BUG;{}
common-java:InsufficientCommentDensity;Source files should have a sufficient density of comment lines;MAJOR;Java;CODE_SMELL;{convention}
common-java:SkippedUnitTests;Skipped unit tests should be either removed or fixed;MAJOR;Java;CODE_SMELL;{pitfall}
common-js:DuplicatedBlocks;Source files should not have any duplicated blocks;MAJOR;JavaScript;CODE_SMELL;{pitfall}
common-js:FailedUnitTests;Failed unit tests should be fixed;MAJOR;JavaScript;BUG;{}
common-js:InsufficientCommentDensity;Source files should have a sufficient density of comment lines;MAJOR;JavaScript;CODE_SMELL;{convention}
common-js:SkippedUnitTests;Skipped unit tests should be either removed or fixed;MAJOR;JavaScript;CODE_SMELL;{pitfall}
common-objc:DuplicatedBlocks;Source files should not have any duplicated blocks;MAJOR;Objective-C;CODE_SMELL;{pitfall}
common-objc:FailedUnitTests;Failed unit tests should be fixed;MAJOR;Objective-C;BUG;{}
common-objc:InsufficientCommentDensity;Source files should have a sufficient density of comment lines;MAJOR;Objective-C;CODE_SMELL;{convention}
common-objc:SkippedUnitTests;Skipped unit tests should be either removed or fixed;MAJOR;Objective-C;CODE_SMELL;{pitfall}
common-php:DuplicatedBlocks;Source files should not have any duplicated blocks;MAJOR;PHP;CODE_SMELL;{pitfall}
common-php:FailedUnitTests;Failed unit tests should be fixed;MAJOR;PHP;BUG;{}
common-php:InsufficientCommentDensity;Source files should have a sufficient density of comment lines;MAJOR;PHP;CODE_SMELL;{convention}
common-php:SkippedUnitTests;Skipped unit tests should be either removed or fixed;MAJOR;PHP;CODE_SMELL;{pitfall}
common-plsql:DuplicatedBlocks;Source files should not have any duplicated blocks;MAJOR;PL/SQL;CODE_SMELL;{pitfall}
common-plsql:FailedUnitTests;Failed unit tests should be fixed;MAJOR;PL/SQL;BUG;{}
common-plsql:InsufficientCommentDensity;Source files should have a sufficient density of comment lines;MAJOR;PL/SQL;CODE_SMELL;{convention}
common-plsql:SkippedUnitTests;Skipped unit tests should be either removed or fixed;MAJOR;PL/SQL;CODE_SMELL;{pitfall}
common-web:DuplicatedBlocks;Source files should not have any duplicated blocks;MAJOR;HTML;CODE_SMELL;{pitfall}
common-web:FailedUnitTests;Failed unit tests should be fixed;MAJOR;HTML;BUG;{}
common-web:InsufficientCommentDensity;Source files should have a sufficient density of comment lines;MAJOR;HTML;CODE_SMELL;{convention}
common-web:SkippedUnitTests;Skipped unit tests should be either removed or fixed;MAJOR;HTML;CODE_SMELL;{pitfall}
plsql:RowidAndUrowidCheck;ROWID and UROWID data types should not be used;MAJOR;PL/SQL;CODE_SMELL;{lock-in,sql}
plsql:NcharByteLengthUsageCheck;NCHAR and NVARCHAR2 size should not be specified in bytes;BLOCKER;PL/SQL;BUG;{}
plsql:PlSql.PackageNaming;Package names should comply with a naming convention;MINOR;PL/SQL;CODE_SMELL;{convention}
plsql:ReturnInProcedureCheck;Procedures should not contain RETURN statements;MINOR;PL/SQL;CODE_SMELL;{brain-overload,misra}
plsql:QuotedIdentifiersCheck;Quoted identifiers should not be used;BLOCKER;PL/SQL;CODE_SMELL;{pitfall}
plsql:S1066;Collapsible if statements should be merged;MAJOR;PL/SQL;CODE_SMELL;{clumsy}
plsql:XPathCheckPlSql;Track breaches of an XPath rule;MAJOR;PL/SQL;CODE_SMELL;{}
plsql:CrossJoinUsageCheck;CROSS JOIN queries should not be used;MAJOR;PL/SQL;CODE_SMELL;{suspicious}
plsql:NamingCursorsCheck;Cursors should follow a naming convention;MINOR;PL/SQL;CODE_SMELL;{convention}
plsql:ResultCacheHintUsage;The result_cache hint should be avoided;MAJOR;PL/SQL;BUG;{}
